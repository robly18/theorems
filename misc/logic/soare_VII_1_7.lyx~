#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\usepackage{listings}
\lstset{
basicstyle=\ttfamily\footnotesize,
keepspaces=true,
tabsize=4,
breaklines=true,
columns=fullflexible,
mathescape=true
}
\usepackage{fullpage}
\usepackage{tikz}
\usepackage{braket}
\end_preamble
\use_default_options true
\begin_modules
duarte_theorems
enumitem
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Exercise VII.1.7 from Soare's Book
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "C:/Users/gaming/Desktop/theorems/misc/lyx/macros_logic.lyx"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Standard
This is,
 as the title indicates,
 exercise numbered VII.1.7 from 
\begin_inset CommandInset citation
LatexCommand cite
key "soare1"
literal "false"

\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:main"

\end_inset

Given 
\begin_inset Formula $e,i\in\N$
\end_inset

,
 there exists a c.e.
\begin_inset space ~
\end_inset

set 
\begin_inset Formula $A$
\end_inset

 such that
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
label=
\begin_inset ERT
status open

\begin_layout Plain Layout

{(
\backslash
roman*)}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "enu:p1"

\end_inset


\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 has c.e.
\begin_inset space ~
\end_inset

degree,
 and
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:p2"

\end_inset


\begin_inset Formula $A\oplus W_{e}^{A}\oplus W_{i}^{A}\equiv K$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
A Particular Case
\end_layout

\begin_layout Standard
Before proving Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:main"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 we prove what is spiritually the particular case where 
\begin_inset Formula $W_{e}^{A}$
\end_inset

 is always e.g.
\begin_inset space ~
\end_inset

the empty set.
 This is effectively exercise VII.1.6(a),
 without the noncomputability requirement.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:pc"

\end_inset

Given 
\begin_inset Formula $i\in\N$
\end_inset

,
 there exists a c.e.
\begin_inset space ~
\end_inset

set 
\begin_inset Formula $A$
\end_inset

 such that 
\begin_inset Formula $A\oplus W_{i}^{A}\equiv K$
\end_inset

.
\end_layout

\begin_layout Proof
Here is the base idea behind our construction.
 There are two competing tasks:
 On the one hand,
 we want to encode 
\begin_inset Formula $K$
\end_inset

 into 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $W_{i}^{A}$
\end_inset

.
 On the other hand,
 we don't want 
\begin_inset Formula $A$
\end_inset

 to be so complex that 
\begin_inset Formula $A\oplus W_{i}^{A}$
\end_inset

 has more computational power than 
\begin_inset Formula $K$
\end_inset

 itself.
 (We can also see this last task as attempting to ensure that 
\begin_inset Formula $A\oplus W_{i}^{A}$
\end_inset

 has c.e.
\begin_inset space ~
\end_inset

degree...) What we will try to do is to encode 
\begin_inset Formula $K$
\end_inset

 into 
\begin_inset Formula $A$
\end_inset

,
 but in such a way that we need 
\begin_inset Formula $W_{i}^{A}$
\end_inset

 to decode it.
\end_layout

\begin_layout Proof
Slightly more concretely,
 we shall be running a process in the background that enumerates the elements of 
\begin_inset Formula $K$
\end_inset

.
 When we find 
\begin_inset Formula $x\in K$
\end_inset

,
 we shall 
\begin_inset Quotes eld
\end_inset

enumerate a breadcrumb into 
\begin_inset Formula $A$
\end_inset


\begin_inset Quotes erd
\end_inset

,
 saying that 
\begin_inset Formula $x$
\end_inset

 is in 
\begin_inset Formula $K$
\end_inset

,
 but in such a way that this breadcrumb can be in infinitely many places,
 and we need 
\begin_inset Formula $W_{i}^{A}$
\end_inset

 to give us information that will limit our search.
 This will ensure that 
\begin_inset Formula $A\oplus W_{i}^{A}\geq K$
\end_inset

,
 while giving us the possibility to bound the degree of our construction.
\end_layout

\begin_layout Proof
On the other hand,
 in an attempt to prohibit the degree from getting too high,
 we will ensure that 
\begin_inset Formula $K$
\end_inset

 computes 
\begin_inset Formula $W_{i}^{A}$
\end_inset

.
 This shall be done by elaborating on the following naïve idea:
 
\begin_inset Formula $K$
\end_inset

 shall try to compute whether 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 halts by running the construction for 
\begin_inset Formula $A$
\end_inset

 at the same time as it runs 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 (starting it from scratch if any relevant new element is enumerated).
 If it never halts,
 then certainly 
\begin_inset Formula $\{i\}^{A_{\text{real}}}(x)\isnotwd$
\end_inset

.
 If it does halt,
 it may be because we have the wrong copy of 
\begin_inset Formula $A$
\end_inset

,
 but we can use 
\begin_inset Formula $K$
\end_inset

 to verify that no new relevant element of 
\begin_inset Formula $A$
\end_inset

 is enumerated.
 If none is,
 then we know 
\begin_inset Formula $\{i\}^{A_{\text{real}}}(x)\iswd$
\end_inset

.
 If any new relevant element is enumerated,
 we have to start from scratch...
 This naïve algorithm will work,
 except in the exceptional circumstance where 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 flips infinitely many times between halting and not halting.
 Thus,
 we shall make the following commitment:
 
\emph on
If we ever find 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 halting,
 we shall strive to keep it that way.

\emph default
 
\end_layout

\begin_layout Proof
Let us now get to the final construction.
 Let us see 
\begin_inset Formula $\N$
\end_inset

 as an infinite grid,
 on which we will enumerate 
\begin_inset Formula $A$
\end_inset

.
 The 
\begin_inset Formula $x$
\end_inset

-th column will have at most one element,
 which represents whether 
\begin_inset Formula $x\in K$
\end_inset

 or not.
 Where in the column this element is shall be dictated by 
\begin_inset Quotes eld
\end_inset

locks
\begin_inset Quotes erd
\end_inset

 we will place to keep elements out of 
\begin_inset Formula $A$
\end_inset

;
 each lock shall block a few rows,
 and an element will always be placed in the first available row at the moment of placement.
\end_layout

\begin_layout Proof
Our algorithm to enumerate 
\begin_inset Formula $A$
\end_inset

 consists of the following two processes,
 running concurrently:
\end_layout

\begin_deeper
\begin_layout Description
Process
\begin_inset space ~
\end_inset

1.
 Dovetail over 
\begin_inset Formula $x\in\N$
\end_inset

,
 attempting to find values of 
\begin_inset Formula $x$
\end_inset

 for which 
\begin_inset Formula $\{i\}^{A}(x)\iswd$
\end_inset

.
 When such a value is found,
 place a lock of 
\emph on
malleability
\emph default
 
\begin_inset Formula $x$
\end_inset

 on all rows containing elements used in this computation.
\end_layout

\begin_layout Description
Process
\begin_inset space ~
\end_inset

2.
 When 
\begin_inset Formula $x\in K$
\end_inset

 is found,
 enumerate 
\begin_inset Formula $\braket{x,y}$
\end_inset

 into the set,
 for 
\emph on
the smallest value of 
\begin_inset Formula $y$
\end_inset

 for which the 
\begin_inset Formula $y$
\end_inset

-th row does not have any lock of malleability 
\begin_inset Formula $<x$
\end_inset

.

\emph default
 For every lock which has been overridden in this manner,
 inform Process 1 that it should re-evaluate the corresponding values of 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Standard
The resulting set 
\begin_inset Formula $A$
\end_inset

 is evidently c.e,
 so it remains to prove the following two statements:
\end_layout

\begin_layout Itemize
(
\begin_inset Formula $W_{i}^{A}\leq K$
\end_inset

) As per the naïve algorithm presented previously,
 it would suffice to verify that for any given value of 
\begin_inset Formula $x$
\end_inset

,
 the convergence or lack thereof of 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 will change a finite number of times.
 This is not exactly what we will do;
 it could happen that at each finite stage 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 would be set to halt if no new elements were added to 
\begin_inset Formula $A$
\end_inset

,
 but that elements are being added at a rate that is too fast for Process 1 to notice,
 and hence for locks to be put up to keep it that way.
\end_layout

\begin_deeper
\begin_layout Standard
Instead,
 we use a very slight modification of the naïve algorithm:
 To check if 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 halts or not,
 we consider running the simulation and asking 
\begin_inset Formula $K$
\end_inset

 if 
\begin_inset Formula $x$
\end_inset

 will ever be responsible for putting up a lock.
 If it's not,
 then we conclude that 
\begin_inset Formula $\{i\}^{A}(x)\isnotwd$
\end_inset

,
 as if the computation did halt then Process 1 would eventually get around to placing the corresponding lock (after all relevant elements of 
\begin_inset Formula $A$
\end_inset

 are enumerated).
 If instead 
\begin_inset Formula $x$
\end_inset

 is responsible for putting up a lock,
 we continue running the simulation and ask if that lock is ever overridden;
 if it's not,
 then we have a guarantee that 
\begin_inset Formula $\{i\}^{A}(x)\iswd$
\end_inset

.
 Otherwise,
 we alternate between these two tasks:
 Asking if 
\begin_inset Formula $x$
\end_inset

 will put up a lock,
 and asking if this lock will be overridden.
\end_layout

\begin_layout Standard
To conclude,
 we note that this algorithm necessarily halts,
 as for any particular 
\begin_inset Formula $x$
\end_inset

 its locks are overridden a finite number of times,
 namely at most 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
(
\begin_inset Formula $A\oplus W_{i}^{A}\geq K$
\end_inset

) We show that 
\begin_inset Formula $A\oplus W_{i}^{A}$
\end_inset

 is capable of computing something which is very strongly intertwined with 
\begin_inset Formula $K$
\end_inset

 for our purpose:
 The 
\begin_inset Quotes eld
\end_inset

lock history
\begin_inset Quotes erd
\end_inset

 of any particular 
\begin_inset Formula $x$
\end_inset

.
 What we mean by this is that there is an algorithm (using 
\begin_inset Formula $A\oplus W_{i}^{A}$
\end_inset

 as an oracle) which,
 given 
\begin_inset Formula $x$
\end_inset

,
 will print out a complete log of the locks placed by 
\begin_inset Formula $x$
\end_inset

,
 including when these locks finally stabilize,
 as well as when elements which could override these locks are enumerated into 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Suppose by induction that,
 for some specific value of 
\begin_inset Formula $x$
\end_inset

,
 we already know the lock history of every 
\begin_inset Formula $x'<x$
\end_inset

.
 Then,
 consider running the simulation long enough that every such lock has already stabilized,
 and such that every 
\begin_inset Formula $x'<x$
\end_inset

 in 
\begin_inset Formula $K$
\end_inset

 has already been found.
 We already know the lock history of 
\begin_inset Formula $x$
\end_inset

 up to this point,
 so we wish to know how it continues and when it ends.
 Having access to 
\begin_inset Formula $W_{i}^{A}$
\end_inset

,
 we can tell whether the last step is to place a lock or to override it.
 Moreover,
 we know that an override at this point may only come from the discovery that 
\begin_inset Formula $x\in K$
\end_inset

.
 Finally,
 since we know the position of all the locks of maleability less than 
\begin_inset Formula $x$
\end_inset

,
 we know where an element would be enumerated into 
\begin_inset Formula $A$
\end_inset

 if it turns out to be the case that 
\begin_inset Formula $x\in K$
\end_inset

,
 so we look at that place to find out.
 This at once gives us whether 
\begin_inset Formula $x\in K$
\end_inset

,
 as well as all the information we need to figure out how the lock history of 
\begin_inset Formula $x$
\end_inset

 ends.
\end_layout

\end_deeper
\begin_layout Standard
This concludes the proof.
\end_layout

\end_deeper
\begin_layout Section
Outline Of Final Solution
\end_layout

\begin_layout Standard
We already have something to build upon to solve the exercise at hand,
 but let us first take stock of what needs to be done and how we might go about doing it.
\end_layout

\begin_layout Standard
First,
 we need to ensure that 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 has c.e.
\begin_inset space ~
\end_inset

degree.
 The most natural way to go about this,
 in my view,
 is to make use of the Modulus Lemma:
 We find a computable sequence 
\begin_inset Formula $f_{s}$
\end_inset

 of functions converging to the characteristic function of 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

,
 and show that 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 computes a modulus for it.
 In truth,
 since 
\begin_inset Formula $A$
\end_inset

 is itself c.e,
 it suffices for 
\begin_inset Formula $f_{s}$
\end_inset

 to converge to the characteristic function of 
\begin_inset Formula $W_{e}^{A}$
\end_inset

.
\end_layout

\begin_layout Standard
Is there a natural computable sequence that might fit the bill?
 Let us again try the naïve approach:
 Let 
\begin_inset Formula $f_{s}(x)=\{e\}^{A_{s}}(x)\iswd^{s}$
\end_inset

 (the symbol 
\begin_inset Formula $\iswd^{s}$
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

run for 
\begin_inset Formula $s$
\end_inset

 time,
 and output whether it has halted),
 where 
\begin_inset Formula $A_{s}$
\end_inset

 consists of the elements enumerated into 
\begin_inset Formula $A$
\end_inset

 after 
\begin_inset Formula $s$
\end_inset

 time.
 In general,
 this sequence has no reason to converge pointwise,
 though it is true that if 
\begin_inset Formula $x\in W_{e}^{A}$
\end_inset

 then 
\begin_inset Formula $f_{s}$
\end_inset

 will converge at 
\begin_inset Formula $s$
\end_inset

 by the use principle.
\end_layout

\begin_layout Standard
We might try to fix this issue by ensuring that,
 like in the particular case solved previously,
 if we find 
\begin_inset Formula $\{e\}^{A}(x)\iswd$
\end_inset

 at a particular stage,
 we attempt to keep it this way.
 This 
\emph on
would
\emph default
 be enough to ensure pointwise convergence of 
\begin_inset Formula $f_{s}$
\end_inset

 (or at least a slightly modified version,
 in the same vein as we had to modify the naïve algorithm in the previous exercise),
 but we demand more:
 We demand that 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 can compute a modulus of convergence.
 In keeping with the previous exercise,
 it is reasonable to want for 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 to compute the history of locks placed by 
\begin_inset Formula $\{e\}^{A}(x)$
\end_inset

.
 Since we have knowledge of 
\begin_inset Formula $W_{e}^{A}$
\end_inset

,
 we are able to compute the final state of such a set of locks,
 but there is one major edge case that stops us from having full knowledge:
 If it is known that 
\begin_inset Formula $\{e\}^{A}(x)\isnotwd$
\end_inset

,
 we need to be able to distinguish the cases 
\begin_inset Quotes eld
\end_inset

no more locks will be placed
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

a lock will yet be placed and then destroyed
\begin_inset Quotes erd
\end_inset

.
 In the previous exercise,
 this was solved by the fact that we knew where the 
\begin_inset Quotes eld
\end_inset

lock destroyer
\begin_inset Quotes erd
\end_inset

 would be placed,
 if any,
 so we could look at that location to distinguish these two cases.
 Anyway,
 this leads us to an important 
\begin_inset Quotes eld
\end_inset

maxim
\begin_inset Quotes erd
\end_inset

 of our construction:
 
\emph on
If a lock placed by 
\begin_inset Formula $e$
\end_inset

 is overridden,
 the overrider must be placed in a predictable place (from the perspective of 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Let us now discuss the other requirement:
 We want 
\begin_inset Formula $A\oplus W_{e}^{A}\oplus W_{i}^{A}\equiv K$
\end_inset

.
 This can be divided into two requirements:
 That 
\begin_inset Formula $K$
\end_inset

 computes this set,
 and that 
\begin_inset Formula $K$
\end_inset

 is computable from this set.
 The former (
\begin_inset Formula $\leq K$
\end_inset

) can be approached by,
 again,
 placing locks to preserve convergence of 
\begin_inset Formula $\{i\}^{A}(x)$
\end_inset

 if found.
 The latter 
\begin_inset Formula $(\geq K)$
\end_inset

 may be approached by placing markers indicating 
\begin_inset Quotes eld
\end_inset

we found 
\begin_inset Formula $x\in K$
\end_inset


\begin_inset Quotes erd
\end_inset

,
 allowing them to override some,
 but not all,
 locks,
 so as to allow us to effectively find in finite time such a marker in 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
Here lies the main issue with this idea so far:
 If we want not to break the maxim established above,
 we must take care when enforcing the locks placed by 
\begin_inset Formula $i$
\end_inset

.
 In particular,
 when 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 is trying to compute the lock-history of 
\begin_inset Formula $x$
\end_inset

,
 we want to avoid the following scenario at all costs:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\{e\}^{A}(x)$
\end_inset

 places a lock very far ahead,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\{i\}^{A}(x')$
\end_inset

 places a stronger lock nearby,
 a little behind it,
\end_layout

\begin_layout Itemize
\begin_inset Formula $x'\in K$
\end_inset

 is found,
 overriding the lock constructed by 
\begin_inset Formula $\{e\}^{A}(x)$
\end_inset

,
 but the indication that this has been done is placed next to the 
\begin_inset Formula $\{i\}^{A}(x')$
\end_inset

-lock,
 which is very far away from all previous 
\begin_inset Formula $e$
\end_inset

-locks.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
A possible fix is the following:
 If 
\begin_inset Formula $x'\in K$
\end_inset

 is found,
 find the first place where you could place indication of this.
 Then,
 move forward to the first 
\begin_inset Formula $e$
\end_inset

-lock you find,
 and place the indication there.
 This way,
 (almost) whenever an 
\begin_inset Formula $e$
\end_inset

-lock is broken,
 an indication of this fact can be found right next to a previous 
\begin_inset Formula $e$
\end_inset

-lock,
 which 
\emph on
does
\emph default
 allow 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 to compute the 
\begin_inset Formula $e$
\end_inset

-lock histories and hence to be a c.e.
\begin_inset space ~
\end_inset

degree.
 Unfortunately,
 this is at the cost of losing a lot of control when it comes to the 
\begin_inset Formula $i$
\end_inset

-locks,
 and in particular losing the property that 
\begin_inset Formula $A\oplus W_{e}^{A}\oplus W_{i}^{A}\leq K$
\end_inset

,
 as we are unable to verify if an 
\begin_inset Formula $i$
\end_inset

-lock will ever be placed and then broken,
 because the offending breaker could be arbitrarily far away,
 next to an 
\begin_inset Formula $e$
\end_inset

-lock which does not exist yet.
 ...unless?
\end_layout

\begin_layout Standard
This leads us to the final setup,
 which starts with a bunch of 
\begin_inset Formula $e$
\end_inset

-locks being placed on the natural numbers 
\emph on
from the start
\emph default
.
 As discussed above,
 whenever a lock is overridden we ensure that the overrider is placed next to an 
\begin_inset Formula $e$
\end_inset

-lock,
 and we do this by,
 when overriding,
 finding the nearest 
\begin_inset Formula $e$
\end_inset

-lock to place the overrider next to.
\end_layout

\begin_layout Section
Final Solution
\end_layout

\begin_layout Standard
Over the course of our algorithm,
 we will keep track of two things.
 First,
 for each value of 
\begin_inset Formula $x$
\end_inset

 we will at each point in time have a finite number of 
\begin_inset Formula $e$
\end_inset

-locks of malleability 
\begin_inset Formula $x$
\end_inset

.
 At the start,
 for each 
\begin_inset Formula $x$
\end_inset

,
 we lock the numbers 
\begin_inset Formula $0$
\end_inset

 to 
\begin_inset Formula $x$
\end_inset

 with malleability 
\begin_inset Formula $x$
\end_inset

.
 Note that 
\begin_inset Formula $e$
\end_inset

-locks will never be removed,
 only added.
 We will also keep track of a number of 
\begin_inset Formula $i$
\end_inset

-locks with varying malleability,
 but for those,
 we start with no locks.
\end_layout

\begin_layout Standard
The algorithm consists of executing the following three processes in parallel:
\end_layout

\begin_layout Description
Process
\begin_inset space ~
\end_inset

1.
 Dovetail over 
\begin_inset Formula $x\in\N$
\end_inset

,
 trying to find values of 
\begin_inset Formula $x$
\end_inset

 for which 
\begin_inset Formula $\{e\}^{A}(x)\iswd$
\end_inset

.
 Once such a value is found,
 place an 
\begin_inset Formula $e$
\end_inset

-lock of malleability 
\begin_inset Formula $x$
\end_inset

 
\emph on
and every larger malleability 
\emph default
on every row of 
\begin_inset Formula $A$
\end_inset

 which is used by the computation 
\emph on
and all its predecessors
\emph default
.
\end_layout

\begin_layout Description
Process
\begin_inset space ~
\end_inset

2.
 Dovetail over 
\begin_inset Formula $x\in\N$
\end_inset

,
 trying to find values of 
\begin_inset Formula $x$
\end_inset

 for which 
\begin_inset Formula $\{i\}^{A}(x)\iswd$
\end_inset

.
 Once such a value is found,
 place an 
\begin_inset Formula $i$
\end_inset

-lock of malleability 
\begin_inset Formula $x$
\end_inset

 on every row of 
\begin_inset Formula $A$
\end_inset

 which is used by the computation.
\end_layout

\begin_layout Description
Process
\begin_inset space ~
\end_inset

3.
 Try to find 
\begin_inset Formula $x\in K$
\end_inset

.
 Once such an 
\begin_inset Formula $x$
\end_inset

 is found,
 find the first row which has no locks of malleability 
\begin_inset Formula $<x$
\end_inset

.
 Then,
 let 
\begin_inset Formula $x'$
\end_inset

 be the malleability of the smallest 
\begin_inset Formula $e$
\end_inset

-lock currently locking this row.
 Finally,
 enumerate 
\begin_inset Formula $\braket{x,y}$
\end_inset

 into 
\begin_inset Formula $A$
\end_inset

,
 for the smallest value of 
\begin_inset Formula $y$
\end_inset

 ahead of this row which is not locked by an 
\begin_inset Formula $e$
\end_inset

-lock of malleability 
\begin_inset Formula $\leq x'$
\end_inset

,
 informing processes 1 and 2 that they should recompute the values for which this placement has overridden any locks.
\end_layout

\begin_layout Standard
Let us now verify what needs to be verified.
\end_layout

\begin_layout Itemize
(
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

 has c.e.
\begin_inset space ~
\end_inset

degree) Consider the following computable approximation of 
\begin_inset Formula $W_{e}^{A}$
\end_inset

:
 To see if 
\begin_inset Formula $x\in W_{e}^{A}$
\end_inset

,
 run the above simulation for 
\begin_inset Formula $s$
\end_inset

 steps,
 and output whether the last thing that happened to 
\begin_inset Formula $e$
\end_inset

-locks of malleability 
\begin_inset Formula $x$
\end_inset

 was a placement or an overriding.
\end_layout

\begin_deeper
\begin_layout Standard
We prove that this converges and provide an 
\begin_inset Formula $A\oplus W_{e}^{A}$
\end_inset

-computable modulus of convergence.
 Suppose by induction that we are able to compute the full 
\begin_inset Formula $e$
\end_inset

-lock history for all 
\begin_inset Formula $x'<x$
\end_inset

.
 Then,
 run the simulation up until all those locks have stabilized.
 Now,
 by the definition of the simulation,
 if an 
\begin_inset Formula $x$
\end_inset

-
\begin_inset Formula $e$
\end_inset

-lock is overridden,
 the breaker must be in the row just below all previous 
\begin_inset Formula $e$
\end_inset

-locks,
 and must be in a column 
\begin_inset Formula $\leq x$
\end_inset

,
 so a finite amount of work suffices to check if this is the case.
 If it is,
 we continue running the simulation until this override happens.
 Now,
 we know we are in a position where this wall will never be overridden.
\end_layout

\begin_layout Standard
Finally,
 to compute our modulus:
 If 
\begin_inset Formula $x\in W_{e}^{A}$
\end_inset

,
 we compute what elements are necessary for this convergence to occur,
 and run the simulation until they are all added,
 and then until Process 1 finds this convergence.
 This is our modulus.
 On the other hand,
 if 
\begin_inset Formula $x\notin W_{e}^{A}$
\end_inset

,
 we know that the last thing that's happened to this lock was being overridden,
 and that Process 1 will never find a convergence (otherwise it would place a lock and 
\begin_inset Formula $\{e\}^{A}(x)$
\end_inset

 would converge after all).
 Thus,
 the current simulation time is our modulus.
\end_layout

\end_deeper
\begin_layout Itemize
(
\begin_inset Formula $W_{i}^{A}\leq K$
\end_inset

)
\end_layout

\begin_layout Itemize
(
\begin_inset Formula $A\oplus W_{e}^{A}\oplus W_{i}^{A}\geq K$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibliography"
options "plain"
encoding "default"

\end_inset


\end_layout

\end_body
\end_document
