#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\usepackage{fullpage}
\usepackage{tikz}
\usetikzlibrary{arrows.meta, positioning,
decorations.pathreplacing, decorations.pathmorphing}
\usepackage{braket}

\tikzset{interval/.style={{Bracket[width=1em]}-{Bracket[width=1em]}},
ilbl/.style={midway, above=0.3em}}
\end_preamble
\use_default_options true
\begin_modules
duarte_theorems
enumitem
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 2
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\listings_params "basicstyle={\ttfamily\footnotesize},keepspaces=true,tabsize=4,breaklines=true,columns=fullflexible,mathescape=true"
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Algorithmic Randomness Notes
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "C:/Users/gaming/Desktop/theorems/misc/lyx/macros_logic.lyx"
literal "false"

\end_inset


\begin_inset FormulaMacro
\newcommand{\emptystring}{\varepsilon}
\end_inset


\begin_inset FormulaMacro
\newcommand{\length}[1]{\abs{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\downcl}[1]{[#1]}
\end_inset


\begin_inset FormulaMacro
\newcommand{\MLR}{{\rm MLR}}
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This file just contains my notes on Algorithmic Randomness,
 from reading Hirschfeldt and Downey's book 
\begin_inset CommandInset citation
LatexCommand cite
key "algrand_downey_hirschfeldt"
literal "false"

\end_inset

 and Nies' book 
\begin_inset CommandInset citation
LatexCommand cite
key "nies"
literal "false"

\end_inset

.
 I do not commit to ensuring that it is readable or in a reasonable order.
\end_layout

\begin_layout Section
Random Reals
\end_layout

\begin_layout Definition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is said to be Martin-Löf random if,
 for every uniform sequence of effective open sets 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 with 
\begin_inset Formula $\mu(U_{n})\leq2^{-n}$
\end_inset

 we have that 
\begin_inset Formula $\alpha$
\end_inset

 is not in all of them.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is said to be 
\emph on
digitally random
\emph default
 if,
 when we write 
\begin_inset Formula $\alpha=a+0.x_{1}x_{2}x_{3}\dots$
\end_inset

 with 
\begin_inset Formula $a\in\Z$
\end_inset

,
 the sequence 
\begin_inset Formula $X=x_{1}x_{2}x_{3}\dots$
\end_inset

 is Martin-Löf random.
 This definition is unambiguous because the only cases that admit nonuniqueness are not random either way.
\end_layout

\begin_layout Proposition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is digitally random iff it is Martin-Löf random.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Let 
\begin_inset Formula $\alpha$
\end_inset

 not be MLR,
 and let 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 be a witness to this fact.
 Let 
\begin_inset Formula $X$
\end_inset

 be the sequence subunitary digits of 
\begin_inset Formula $\alpha$
\end_inset

,
 and assume without loss of generality that 
\begin_inset Formula $\alpha\in\rinterval 01$
\end_inset

.
 Then,
 the class 
\begin_inset Formula $V_{n}$
\end_inset

 of sequences 
\begin_inset Formula $Y=y_{1}y_{2}\dots$
\end_inset

 such that 
\begin_inset Formula $0.Y\in U_{n}$
\end_inset

 forms a Martin-Löf test in Cantor space,
 and its measure is the same as the measure of 
\begin_inset Formula $U_{n}$
\end_inset

.
 Thus,
 
\begin_inset Formula $\{V_{n}\}_{n\in\N}$
\end_inset

is a ML test that 
\begin_inset Formula $X$
\end_inset

 passes,
 implying 
\begin_inset Formula $X$
\end_inset

 is not random.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\leftarrow$
\end_inset

) In a similar fashion,
 if we have a ML test for the digits of 
\begin_inset Formula $\alpha$
\end_inset

,
 we can produce a ML test for 
\begin_inset Formula $\alpha$
\end_inset

 itself.
 This does require adding a little slack,
 or dealing with the cases when 
\begin_inset Formula $\alpha$
\end_inset

 is a dyadic rational on the side.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:randomwithin"

\end_inset

A real number 
\begin_inset Formula $\alpha=a.A$
\end_inset

 is Martin-Löf random iff there exists 
\begin_inset Formula $d$
\end_inset

 such that,
 for every dyadic rational 
\begin_inset Formula $a.x$
\end_inset

 within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

,
 we have 
\begin_inset Formula $K(x)\geq\length x-d$
\end_inset

.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Suppose 
\begin_inset Formula $\alpha$
\end_inset

 is MLR.
 Consider the following candidate for a Martin-Löf test:
 
\begin_inset Formula 
\[
U_{n}=\bigcup_{K(y)<\length y-n}B_{2^{-\length y}}(a.y).
\]

\end_inset

This is a uniform effective open because checking whether 
\begin_inset Formula $K(y)$
\end_inset

 is less than something is a c.e.
\begin_inset space \space{}
\end_inset

condition.
 To bound its measure:
\begin_inset Formula 
\[
\mu(U_{n})=\mu\bigcup_{K(y)<\length y-n}\ointerval{a.y-2^{-\length y}}{a.y+2^{-\length y}}\leq\sum_{K(y)<\length y-n}2\cdot2^{-\length y}\leq2\sum2^{-K(y)-n}\leq2^{1-n}.
\]

\end_inset

Since 
\begin_inset Formula $\alpha$
\end_inset

 is MLR,
 it cannot be in all 
\begin_inset Formula $U_{n}$
\end_inset

,
 and so there will be 
\begin_inset Formula $n$
\end_inset

 for which,
 for all dyadic rationals 
\begin_inset Formula $a.y$
\end_inset

 for which 
\begin_inset Formula $\alpha$
\end_inset

 is within 
\begin_inset Formula $2^{-\length y}$
\end_inset

 of 
\begin_inset Formula $a.y$
\end_inset

,
 we have 
\begin_inset Formula $K(y)\geq\length y-n$
\end_inset

,
 as desired.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset Formula $\leftarrow$
\end_inset

) Suppose 
\begin_inset Formula $\alpha$
\end_inset

 is not MLR.
 Then,
 the sequence 
\begin_inset Formula $A$
\end_inset

 is not MLR,
 and so,
 for any chosen 
\begin_inset Formula $d$
\end_inset

,
 we may find a prefix 
\begin_inset Formula $x\leq A$
\end_inset

 for which 
\begin_inset Formula $K(x)\leq\length x-d$
\end_inset

.
 This prefix obviously satisfies the condition that 
\begin_inset Formula $a.x$
\end_inset

 is within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Remark
There is some ambiguity in the wording and proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randomwithin"

\end_inset

.
 Does 
\begin_inset Quotes eld
\end_inset

within 
\begin_inset Formula $2^{-\length x}$
\end_inset

of 
\begin_inset Formula $\alpha$
\end_inset


\begin_inset Quotes erd
\end_inset

 mean that the distance is 
\begin_inset Formula $\leq2^{-\length x}$
\end_inset

,
 or strictly less?
 Our proof actually uses different interpretation for either implication.
 We dedicate some words to rectifying this issue.
\end_layout

\begin_layout Remark
(
\begin_inset Formula $\rightarrow$
\end_inset

) We proved the statement for 
\begin_inset Quotes eld
\end_inset

within
\begin_inset Quotes erd
\end_inset

 meaning 
\begin_inset Quotes eld
\end_inset

strictly within
\begin_inset Quotes erd
\end_inset

.
 To modify the proof,
 define 
\begin_inset Formula $U_{n}$
\end_inset

 as the union of balls of size 
\begin_inset Formula $2^{-\length y+1}$
\end_inset

 instead of 
\begin_inset Formula $2^{-\length y}$
\end_inset

.
 We are merely doubling the size of each 
\begin_inset Formula $U_{n}$
\end_inset

,
 so the proof follows through,
 and we prove the stronger statement:
 for every dyadic rational 
\begin_inset Formula $a.x$
\end_inset

 strictly within 
\begin_inset Formula $2\cdot2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

 we have 
\begin_inset Formula $K(x)\geq\length x-d$
\end_inset

.
\end_layout

\begin_layout Remark
(
\begin_inset Formula $\leftarrow$
\end_inset

) Let us think of what happens if 
\begin_inset Formula $a.x$
\end_inset

 is weakly,
 but not strictly,
 within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

.
 This must be because 
\begin_inset Formula $\alpha=a.x1^{\omega}=a.x+2^{-\length x}$
\end_inset

.
 Thus,
 
\begin_inset Formula $\alpha$
\end_inset

 is a dyadic rational,
 and we chose 
\begin_inset Formula $A$
\end_inset

 to be the binary expansion with cofinitely many ones.
 Simply repeat the argument with the other expansion to get our result.
\end_layout

\begin_layout Section
Random c.e.
\begin_inset space \space{}
\end_inset

Reals
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Solovay}{{\rm S}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sleq}{\leq_{\Solovay}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sgeq}{\geq_{\Solovay}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sequiv}{\equiv_{\Solovay}}
\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:solovay1"

\end_inset

Let 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 be left-c.e.
\begin_inset space \space{}
\end_inset

reals.
 We define 
\emph on

\begin_inset Formula $\alpha$
\end_inset

 is Solovay reducible to 
\begin_inset Formula $\beta$
\end_inset

,

\emph default
 denoted 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

 if there is a computable function 
\begin_inset Formula $\varphi\colon\Q\pto\Q$
\end_inset

 such that,
 for every rational 
\begin_inset Formula $q<\beta$
\end_inset

,
 we have 
\begin_inset Formula $\varphi(q)\iswd\leq\alpha$
\end_inset

,
 and there is a fixed constant 
\begin_inset Formula $c$
\end_inset

 such that 
\begin_inset Formula 
\begin{equation}
\abs{\alpha-\varphi(q)}\leq c\abs{\beta-q}.\label{eq:solovay1}
\end{equation}

\end_inset

(Note:
 The absolute value signs are redundant.) Informally,
 this means that rational approximations of 
\begin_inset Formula $\beta$
\end_inset

 turn into rational approximations of 
\begin_inset Formula $\alpha$
\end_inset

,
 and to know the first 
\begin_inset Formula $n$
\end_inset

 digits of 
\begin_inset Formula $\alpha$
\end_inset

 we need only know the first 
\begin_inset Formula $c'n$
\end_inset

 digits of 
\begin_inset Formula $\beta$
\end_inset

 for some constant value 
\begin_inset Formula $c'$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:solovay2"

\end_inset

The previous definition of Solovay-reducibility for left-c.e.
\begin_inset space \space{}
\end_inset

reals is equivalent to the following,
 due to Downey,
 Hirschfeldt,
 and Nies:
 We say 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

 if there is an integer 
\begin_inset Formula $d$
\end_inset

 and a left-c.e.
\begin_inset space \space{}
\end_inset

real 
\begin_inset Formula $\gamma$
\end_inset

 so that
\begin_inset Formula 
\begin{equation}
2^{d}\alpha+\gamma=\beta.\label{eq:solovay2}
\end{equation}

\end_inset


\end_layout

\begin_layout Proof
First,
 suppose that 
\begin_inset Formula $2^{d}\alpha+\gamma=\beta$
\end_inset

 as above,
 and let us show that 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

.
 We do this by defining our function 
\begin_inset Formula $\varphi$
\end_inset

 as follows:
 Given an approximation 
\begin_inset Formula $q<\beta$
\end_inset

,
 we search for rationals 
\begin_inset Formula $a<\alpha$
\end_inset

 and 
\begin_inset Formula $g<\gamma$
\end_inset

 such that 
\begin_inset Formula $2^{d}a+g\geq q$
\end_inset

.
 Then,
 we have 
\begin_inset Formula $\beta-q\geq2^{d}(\alpha-a)+(\gamma-g)\geq2^{d}(\alpha-a)$
\end_inset

,
 and so equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 holds with 
\begin_inset Formula $c=2^{d}$
\end_inset

 if we define 
\begin_inset Formula $\varphi(q)$
\end_inset

 as the rational number 
\begin_inset Formula $a$
\end_inset

 obtained from this search.
\end_layout

\begin_layout Proof
Now,
 suppose that Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:solovay1"

\end_inset

 holds.
 Let 
\begin_inset Formula $d$
\end_inset

 be some integer that satisfies 
\begin_inset Formula $c\leq2^{-d}$
\end_inset

.
 Then,
 we can rearrange Equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 into
\begin_inset Formula 
\begin{equation}
2^{d}\alpha+(q-2^{d}\varphi(q))\leq\beta,\label{eq:qleq}
\end{equation}

\end_inset

for 
\begin_inset Formula $q$
\end_inset

 rational numbers less than 
\begin_inset Formula $\beta$
\end_inset

.
 Now,
 let 
\begin_inset Formula $\beta_{s}$
\end_inset

 be a computable sequence of rationals approximating 
\begin_inset Formula $\beta$
\end_inset

 from below,
 and set 
\begin_inset Formula $\gamma_{s}=\beta_{s}-2^{d}\varphi(\beta_{s})$
\end_inset

.
 This defines a left-c.e.
\begin_inset space \space{}
\end_inset

real by 
\begin_inset Formula $\gamma=\sup\gamma_{s}$
\end_inset

,
 and Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:qleq"

\end_inset

 guarantees that 
\begin_inset Formula $2^{d}\alpha+\gamma\leq\beta$
\end_inset

.
 On the other hand,
 taking the limit of the definition of 
\begin_inset Formula $\gamma_{s}$
\end_inset

 we see that 
\begin_inset Formula $\gamma\geq\lim\gamma_{s}=\beta-2^{d}\alpha$
\end_inset

,
 which provides the opposite inequality,
 proving that Equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay2"

\end_inset

 holds,
 and completing the proof.
\end_layout

\begin_layout Proposition
Let 
\begin_inset Formula $\alpha$
\end_inset

 be a left-c.e.
\begin_inset space \space{}
\end_inset

real number.
 The following statements are equivalent:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

label=(
\backslash
alph*)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "enu:mlr"

\end_inset


\begin_inset Formula $\alpha$
\end_inset

 is ML-random,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:pff"

\end_inset

There is an optimal prefix-free machine 
\begin_inset Formula $R$
\end_inset

 and an integer 
\begin_inset Formula $z$
\end_inset

 such that 
\begin_inset Formula $\alpha=\Omega_{R}+z$
\end_inset

,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:sc"

\end_inset


\begin_inset Formula $\alpha$
\end_inset

 is Solovay-complete.
\end_layout

\end_deeper
\begin_layout Proof
(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:mlr"

\end_inset


\begin_inset Formula $\to$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:sc"

\end_inset

) To motivate this proof,
 we start from the following idea:
 How do we turn a left-approximation of 
\begin_inset Formula $\alpha$
\end_inset

 into a better left-approximation of another left c.e.
\begin_inset space \space{}
\end_inset

real 
\begin_inset Formula $\beta$
\end_inset

?
 To be more precise,
 given 
\begin_inset Formula $q<\alpha$
\end_inset

 at a distance of 
\begin_inset Formula $\delta$
\end_inset

 we want to construct 
\begin_inset Formula $\varphi(q)<\beta$
\end_inset

 at a distance of at most 
\begin_inset Formula $c\delta$
\end_inset

.
 Dividing everything out by 
\begin_inset Formula $c$
\end_inset

,
 we temporarily assume that 
\begin_inset Formula $c=1$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\alpha_{s}\nearrow\alpha$
\end_inset

 and 
\begin_inset Formula $\beta_{s}\nearrow\beta$
\end_inset

 be computable left-approximations,
 and suppose,
 for the sake of argument,
 that 
\begin_inset Formula $\beta_{0}$
\end_inset

 is a better approximation than 
\begin_inset Formula $\alpha_{0}$
\end_inset

.
 Then,
 we have the following picture:
\end_layout

\begin_layout Proof
\begin_inset Float figure
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (-5,0) -- (5,0);
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (A0) at (-3,0){};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of A0] {$
\backslash
alpha_0$};
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (A1) at (1.5,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of A1] {$
\backslash
alpha_s$};
\end_layout

\begin_layout Plain Layout


\backslash
node (A0P) at (1,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (A0) to[bend left=10] node[ilbl] {$
\backslash
delta$} (A0P);
\end_layout

\begin_layout Plain Layout


\backslash
draw[fill=black] (3,0) circle (0.15) node[below=0.2cm] {$
\backslash
alpha$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[yshift=-2cm]
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (-5,0) -- (5,0);
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (B0) at (-2,0){};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of B0] {$
\backslash
beta_0$};
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (B1) at (2,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of B1] {$
\backslash
beta_1$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (B0) to[bend left=10] node[ilbl] {$
\backslash
delta$} (B1);
\end_layout

\begin_layout Plain Layout


\backslash
draw[fill=black] (3,0) circle (0.15) node[below=0.2cm] {$
\backslash
beta$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Assuming 
\begin_inset Formula $\beta_{0}$
\end_inset

 approximates 
\begin_inset Formula $\beta$
\end_inset

 better than 
\begin_inset Formula $\alpha_{0}$
\end_inset

 does 
\begin_inset Formula $\alpha$
\end_inset

,
 there will be some 
\begin_inset Formula $\alpha_{s}>\alpha_{0}+\delta$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Thus,
 we wait for some value of 
\begin_inset Formula $\alpha_{s}$
\end_inset

 that is greater than 
\begin_inset Formula $\alpha_{0}+(\beta_{1}-\beta_{0})$
\end_inset

.
 If this exists,
 we send every 
\begin_inset Formula $q<\alpha_{0}$
\end_inset

 to 
\begin_inset Formula $\varphi(q):=\beta_{0}$
\end_inset

.
 Now,
 we proceed:
 Assuming that 
\begin_inset Formula $\beta_{1}$
\end_inset

 is a better approximation of 
\begin_inset Formula $\beta$
\end_inset

 than 
\begin_inset Formula $\alpha_{s}$
\end_inset

 is of 
\begin_inset Formula $\alpha$
\end_inset

,
 we use the distance between 
\begin_inset Formula $\beta_{1}$
\end_inset

 and 
\begin_inset Formula $\beta_{2}$
\end_inset

 to determine an interval of size 
\begin_inset Formula $\beta_{2}-\beta_{1}$
\end_inset

,
 which we hope that 
\begin_inset Formula $\alpha_{s}$
\end_inset

 will eventually escape,
 and when it does we know to define the image of every 
\begin_inset Formula $\alpha_{0}\leq q<\alpha_{s}$
\end_inset

 under 
\begin_inset Formula $\varphi$
\end_inset

 as 
\begin_inset Formula $\beta_{1}$
\end_inset

,
 and so on.
\end_layout

\begin_layout Proof
If this algorithm succeeds forever,
 we have just obtained a computable map 
\begin_inset Formula $\varphi\colon\Q\pto\Q$
\end_inset

 that satisfies 
\begin_inset Formula $\abs{\beta-\varphi(q)}\leq\abs{\alpha-q}$
\end_inset

.
 This is because the distance between 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\varphi(q)=\beta_{t}$
\end_inset

 is the sum of the distances 
\begin_inset Formula $\beta_{t+1}-\beta_{t}$
\end_inset

,
 
\begin_inset Formula $\beta_{t+2}-\beta_{t+1}$
\end_inset

,
 etc,
 which are in turn less than or equal to the sum of the distances between the 
\begin_inset Formula $\alpha_{i}$
\end_inset

 used to define 
\begin_inset Formula $\varphi$
\end_inset

.
\end_layout

\begin_layout Proof
If this algorithm does not succeed forever,
 the intervals of size 
\begin_inset Formula $\delta_{i}=\beta_{i+1}-\beta_{i}$
\end_inset

 furnish a 
\begin_inset Formula $\Sigma_{1}$
\end_inset

 set of measure 
\begin_inset Formula $\leq\sum\delta_{i}=\beta-\beta_{0}$
\end_inset

 inside of which 
\begin_inset Formula $\alpha$
\end_inset

 is guaranteed to be.
\end_layout

\begin_layout Proof
Now,
 the idea is to apply the above algorithm uniformly to 
\begin_inset Formula $\beta/2^{n}$
\end_inset

 for 
\begin_inset Formula $n=0$
\end_inset

,
 
\begin_inset Formula $1$
\end_inset

,
 etc:
 If this algorithm is to fail for every such value of 
\begin_inset Formula $n$
\end_inset

,
 the resulting open sets furnish a Martin-Löf test that 
\begin_inset Formula $\alpha$
\end_inset

 now fails.
 Once we manage to turn approximations of 
\begin_inset Formula $\alpha$
\end_inset

 into approximations of 
\begin_inset Formula $\beta/2^{n}$
\end_inset

,
 multiplying them by 
\begin_inset Formula $2^{n}$
\end_inset

 furnishes approximations of 
\begin_inset Formula $\beta$
\end_inset

 with a constant multiplicative increase in error.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:pff"

\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:mlr"

\end_inset

) Whether or not a given left-c.e.
\begin_inset space \space{}
\end_inset

is ML-random or not depends solely on its sub-unitary digits,
 so it suffices to prove that,
 for 
\begin_inset Formula $R$
\end_inset

 an optimal prefix-free machine,
 
\begin_inset Formula $\Omega_{R}$
\end_inset

 is MLR.
\end_layout

\begin_layout Proof
We know that,
 up to a constant additive factor,
 the definition of Kolmogorov prefix-free complexity does not depend on the choice of such machine,
 so we use 
\begin_inset Formula $K(\sigma)$
\end_inset

 to denote the prefix-free complexity of 
\begin_inset Formula $\sigma$
\end_inset

 wrt this machine 
\begin_inset Formula $R$
\end_inset

.
 The basic idea is that knowing 
\begin_inset Formula $\Omega_{R}$
\end_inset

 to a good amount of precision would let us compute the domain of 
\begin_inset Formula $R$
\end_inset

,
 which we should not be able to do.
\end_layout

\begin_layout Proof
To be more precise,
 let 
\begin_inset Formula $\sigma$
\end_inset

 be a prefix of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 with length 
\begin_inset Formula $n$
\end_inset

;
 in other words,
 
\begin_inset Formula $0.\sigma\leq\Omega_{R}\leq0.\sigma+2^{-n}$
\end_inset

.
 Then,
 we are able to calculate the domain of 
\begin_inset Formula $R$
\end_inset

 up to length 
\begin_inset Formula $n-1$
\end_inset

,
 by letting 
\begin_inset Formula $R$
\end_inset

 run on all inputs until the approximation of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 exceeds 
\begin_inset Formula $0.\sigma-2^{-n}$
\end_inset

.
 By this point,
 if there were an input of length 
\begin_inset Formula $n-1$
\end_inset

 or less that was yet to halt,
 the value of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 would exceed 
\begin_inset Formula $0.\sigma+2^{-n}$
\end_inset

,
 a contradiction.
 Thus,
 let us define 
\begin_inset Formula $x(\sigma)$
\end_inset

 as an arbitrarily (but effectively) chosen string that hasn't been output by 
\begin_inset Formula $R$
\end_inset

 by this point – note that the defnition of 
\begin_inset Formula $x$
\end_inset

 produces a computable,
 if partial,
 function on all strings.
 By definition,
 we then have 
\begin_inset Formula $K(x(\Omega_{R}\upto n))\geq n$
\end_inset

.
 Now,
 note the string of inequalities
\begin_inset Formula 
\[
n\leq K(x(\Omega_{R}\upto n))\leq c+K(\Omega_{R}\upto n),
\]

\end_inset

which tells us that 
\begin_inset Formula $K(\Omega_{R}\upto n)\geq n-c$
\end_inset

 for some constant 
\begin_inset Formula $c$
\end_inset

,
 i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\Omega_{R}$
\end_inset

 is 1-random.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Proof
(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:sc"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:pff"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

) Assume that 
\begin_inset Formula $\alpha$
\end_inset

 is Solovay-complete,
 i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\alpha\Sgeq\beta$
\end_inset

 for every left-c.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\beta$
\end_inset

.
 By the previous two implications,
 this is equivalent to the assumption that 
\begin_inset Formula $\alpha\Sgeq\Omega$
\end_inset

,
 where 
\begin_inset Formula $\Omega$
\end_inset

 is the halting probability of some previously fixed optimal universal machine 
\begin_inset Formula $U$
\end_inset

.
 Assume also,
 without loss of generality,
 that 
\begin_inset Formula $\alpha\in\linterval 01$
\end_inset

,
 as to show that 
\begin_inset Formula $\alpha$
\end_inset

 itself is the halting probability of some optimal machine.
\end_layout

\begin_layout Proof
Apply Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:solovay2"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 to this scenario to obtain that 
\begin_inset Formula $2^{d}\Omega+\gamma=\alpha$
\end_inset

 for some integer 
\begin_inset Formula $d$
\end_inset

 and left-c.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\gamma$
\end_inset

.
 Without loss of generality,
 possibly by decreasing the value of 
\begin_inset Formula $d$
\end_inset

,
 we assume that 
\begin_inset Formula $\gamma>0$
\end_inset

 and that 
\begin_inset Formula $\gamma\leq1-2^{d}$
\end_inset

 (this is done by setting 
\begin_inset Formula $d$
\end_inset

 so small that 
\begin_inset Formula $2^{d}<\alpha$
\end_inset

 and 
\begin_inset Formula $2^{d}<1-\alpha$
\end_inset

).
 This implies also 
\begin_inset Formula $d<0$
\end_inset

.
 Now,
 the idea is consider a padded version of the optimal machine whose halting probability is 
\begin_inset Formula $\Omega$
\end_inset

,
 so as to add halting probability 
\begin_inset Formula $2^{d}\Omega$
\end_inset

,
 while making other inputs halt (yielding some arbitrary value) as to add 
\begin_inset Formula $\gamma$
\end_inset

 to the halting probability.
 This can be done by the KC theorem,
 but I would consider it relatively overkill;
 a simpler construction can be considered by taking approximations 
\begin_inset Formula $\gamma_{s}$
\end_inset

 of 
\begin_inset Formula $\gamma$
\end_inset

 that always increase by a power of two,
 and such that this power never increases.
 Then,
 each time we spot 
\begin_inset Formula $\gamma_{s+1}=\gamma_{s}+2^{-n}$
\end_inset

,
 we pick a new string of length 
\begin_inset Formula $n$
\end_inset

 and stipulate that our machine halts on this string.
\end_layout

\begin_layout Proposition
For any optimal machine,
 
\begin_inset Formula $\Omega\equiv0'$
\end_inset

.
\end_layout

\begin_layout Proof
Evidently,
 
\begin_inset Formula $0'$
\end_inset

 computes 
\begin_inset Formula $\Omega$
\end_inset

 because it is left-c.e.
 Thus,
 we show the opposite computation.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 be the prefix-free machine 
\begin_inset Formula 
\[
M(1^{e}0)=\text{halting time of \ensuremath{e}-th Turing machine, if any.}
\]

\end_inset

By definition of optimality,
 there is a constant 
\begin_inset Formula $d$
\end_inset

 such that 
\begin_inset Formula $K(\sigma)\leq K_{M}(\sigma)+d$
\end_inset

.
 Now,
 suppose that we are interested in finding out if the 
\begin_inset Formula $e$
\end_inset

-th turing machine halts.
 Say that it does halt by time 
\begin_inset Formula $t$
\end_inset

.
 Then,
 
\begin_inset Formula $M(1^{e}0)=t$
\end_inset

,
 hence 
\begin_inset Formula $e+1\geq K_{M}(t)\geq K(t)-d$
\end_inset

.
 This places a bound on how long the 
\begin_inset Formula $e$
\end_inset

-th may take to halt:
 we need only wait for the values of 
\begin_inset Formula $t$
\end_inset

 such that 
\begin_inset Formula $K(t)\leq e+1+d$
\end_inset

,
 of which there are finitely many.
 To figure out which values these are:
 Evaluate values of 
\begin_inset Formula $U(\sigma)$
\end_inset

 until you find that you're within 
\begin_inset Formula $2^{-e-1-d}$
\end_inset

 of the halting probability 
\begin_inset Formula $\Omega$
\end_inset

 (this is where we use an oracle for 
\begin_inset Formula $\Omega$
\end_inset

).
 Then,
 you know that any input on which 
\begin_inset Formula $U$
\end_inset

 halts will be longer than 
\begin_inset Formula $e+1+d$
\end_inset

,
 so all values of 
\begin_inset Formula $t$
\end_inset

 for which 
\begin_inset Formula $K(t)\leq e+1+d$
\end_inset

 are already known.
 Thus,
 to figure out whether the 
\begin_inset Formula $e$
\end_inset

-th Turing machine halts,
 we need only run it for 
\begin_inset Formula $T$
\end_inset

 time,
 where 
\begin_inset Formula $T$
\end_inset

 is the max of all such values of 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset Formula $\Pi_{1}$
\end_inset

 Classes
\end_layout

\begin_layout Proposition
Let 
\begin_inset Formula $\MLR$
\end_inset

 denote the class of Martin-Löf random sets.
 Then,
 
\begin_inset Formula $\MLR$
\end_inset

 is a measure one 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 class.
\end_layout

\begin_layout Proof
Consider a universal ML test 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

.
 Then,
 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

 is MLR iff it is not in all 
\begin_inset Formula $U_{n}$
\end_inset

,
 which is a 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 property (
\begin_inset Quotes eld
\end_inset

there exists 
\begin_inset Formula $n$
\end_inset

 (
\begin_inset Formula $\exists$
\end_inset

) such that 
\begin_inset Formula $A$
\end_inset

 is not in 
\begin_inset Formula $U_{n}$
\end_inset

 (
\begin_inset Formula $\forall$
\end_inset

)
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Proof
Moreover,
 
\begin_inset Formula $\MLR^{c}=\cap U_{n}$
\end_inset

,
 which has measure zero.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:pi1classmlr"

\end_inset

A 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S\subseteq2^{\omega}$
\end_inset

 contains an MLR set iff 
\begin_inset Formula $\mu(S)>0$
\end_inset

.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Suppose 
\begin_inset Formula $\mu(S)=0$
\end_inset

,
 with 
\begin_inset Formula $S$
\end_inset

 being the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class given by 
\begin_inset Formula $\forall_{y}P(f\upto y)$
\end_inset

.
 Then,
 
\begin_inset Formula $S=\cap S_{n}$
\end_inset

,
 with 
\begin_inset Formula $S_{n}$
\end_inset

 being defined as the class of elements that satisfies 
\begin_inset Formula $P$
\end_inset

 up to length 
\begin_inset Formula $n$
\end_inset

.
 As such,
 we have 
\begin_inset Formula $0=\mu(S)=\lim\mu(S_{n})$
\end_inset

.
 Moreover,
 
\begin_inset Formula $\mu(S_{n})$
\end_inset

 is effective,
 because in fact 
\begin_inset Formula $S_{n}$
\end_inset

 is a clopen set determined by the length up-to-
\begin_inset Formula $n$
\end_inset

 strings that satisfy 
\begin_inset Formula $P$
\end_inset

.
 Thus,
 we can effectively take a subsequence 
\begin_inset Formula $S_{n_{k}}$
\end_inset

 of measure 
\begin_inset Formula $\leq2^{-k}$
\end_inset

,
 which furnishes an ML test that every element of 
\begin_inset Formula $S$
\end_inset

 passes.
 Thus,
 every element of 
\begin_inset Formula $S$
\end_inset

 is 
\emph on
not
\emph default
 Martin-Löf random.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset Formula $\leftarrow$
\end_inset

) The collection of ML-random sets has measure one.
 Thus,
 
\begin_inset Formula $S\cap\MLR$
\end_inset

 will,
 by inclusion-exclusion,
 have measure
\begin_inset Formula 
\[
\mu(S\cap\MLR)\geq\mu(S)+\mu(\MLR)-\mu(S\cup\MLR)\geq\mu(S)+1-1=\mu(S).
\]

\end_inset

Hence,
 if 
\begin_inset Formula $\mu(S)>0$
\end_inset

,
 we get that 
\begin_inset Formula $S\cap\MLR$
\end_inset

 is nonempty and therefore contains at least one element,
 finishing the proof.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:randommeasure"

\end_inset

If a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S$
\end_inset

 is contained in 
\begin_inset Formula $\MLR$
\end_inset

,
 then its measure is ML-random.
 In particular,
 
\begin_inset Formula $\MLR$
\end_inset

 is not a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class.
\end_layout

\begin_layout Standard
Before proving Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"

\end_inset

,
 we will prove some related results to motivate the ideas.
 The first of these results explains how MLR measure crops up:
 We show that if the measure of a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S$
\end_inset

 is positive and nonrandom,
 then we can find a prefix of some element of 
\begin_inset Formula $S$
\end_inset

 that is easy to describe.
 More precisely:
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:randommeasure"

\end_inset

If 
\begin_inset Formula $\mu(S)$
\end_inset

 is positive and not MLR,
 for each 
\begin_inset Formula $d$
\end_inset

 there exists a string 
\begin_inset Formula $y$
\end_inset

 such that 
\begin_inset Formula $\mu(S\cap\downcl y)>0$
\end_inset

 and 
\begin_inset Formula $K(y)\leq\length y-d$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\mu(S)=0.x\dots$
\end_inset

,
 with 
\begin_inset Formula $K(x)\leq\length x-d'$
\end_inset

 with 
\begin_inset Formula $d'$
\end_inset

 to be determined.
 We will also require that 
\begin_inset Formula $x$
\end_inset

 be long enough in some sense to be determined in a moment.
 The idea is that we approximate 
\begin_inset Formula $S=\cap S_{t}$
\end_inset

 with 
\begin_inset Formula $S_{t}$
\end_inset

 uniform finite unions of clopens.
 We can compute the measure of 
\begin_inset Formula $S_{t}$
\end_inset

,
 and it converges to 
\begin_inset Formula $\mu(S)$
\end_inset

,
 so we are able to (computably in 
\begin_inset Formula $x$
\end_inset

) determine a point when 
\begin_inset Formula $\mu(S_{t})\leq\mu(S)+2^{-\length x+1}$
\end_inset

.
 Next,
 we look for a value of 
\begin_inset Formula $y$
\end_inset

 at some depth 
\begin_inset Formula $p$
\end_inset

 (also to be determined) such that 
\begin_inset Formula $\mu(\downcl y\cap S_{t})>2^{-\length x+1}$
\end_inset

;
 this will guarantee that 
\begin_inset Formula $\mu([y]\cap S)>0$
\end_inset

 as desired.
 How do we ensure that such a value of 
\begin_inset Formula $y$
\end_inset

 exists?
 Suppose that it does not.
 Then,
 we can bound 
\begin_inset Formula $\mu(S_{t})\leq\sum_{\text{\ensuremath{y} depth \ensuremath{p}}}\mu(\downcl y\cap S_{t})\leq2^{p-\length x+1}$
\end_inset

,
 so we pick a value of 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $\mu(S)>2^{-q}$
\end_inset

 and set 
\begin_inset Formula $p=\length x-q-1$
\end_inset

.
 This requires assuming that 
\begin_inset Formula $x$
\end_inset

 has length at least 
\begin_inset Formula $q+1$
\end_inset

.
 Once we do,
 the above procedure provides a description of 
\begin_inset Formula $y$
\end_inset

 of length
\begin_inset Formula 
\[
c+K(S)+K(x)+K(q)\leq c+K(S)+\length x-d'+q,
\]

\end_inset

so setting 
\begin_inset Formula $d'=d+q+c+K(S)$
\end_inset

 proves the desired result.
\end_layout

\begin_layout Proof
To recap the proof:
 First,
 choose 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $\mu(S)>2^{-q}$
\end_inset

.
 Then,
 find 
\begin_inset Formula $x$
\end_inset

 a prefix of 
\begin_inset Formula $\mu(S)$
\end_inset

 of length at least 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $K(x)\leq\length x-q-d-c-K(S)$
\end_inset

,
 where 
\begin_inset Formula $c$
\end_inset

 is the length of a program encoding the procedure outlined in the next sentence.
 Then,
 we describe a string 
\begin_inset Formula $y$
\end_inset

 by the following procedure:
 Calculate the measures of 
\begin_inset Formula $\mu(S_{t})$
\end_inset

 until one of them is below 
\begin_inset Formula $0.x+2^{-\length x+1}$
\end_inset

 and,
 for the corresponding value of 
\begin_inset Formula $t$
\end_inset

,
 pick a string 
\begin_inset Formula $y$
\end_inset

 of length 
\begin_inset Formula $\length x-q-1$
\end_inset

 such that 
\begin_inset Formula $\mu(\downcl y\cap S_{t})\geq2^{-\length x+1}$
\end_inset

,
 which exists by the previous paragraph.
 This string 
\begin_inset Formula $y$
\end_inset

 satisfies the desired conclusion.
\end_layout

\begin_layout Standard
The idea for the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"

\end_inset

 is to stack Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

 on itself repeatedly to build an increasing chain of easy-to-describe strings in 
\begin_inset Formula $S$
\end_inset

,
 which will furnish a nonrandom path in 
\begin_inset Formula $S$
\end_inset

.
 This requires another auxilliary lemma,
 to ensure that when we chain Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

 the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 classes we apply it to continue to satisfy the assumptions of the lemma.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:sumrandom"

\end_inset

Let 
\begin_inset Formula $\mu=\alpha+\beta$
\end_inset

,
 with all these three numbers being right-c.e.
 Then,
 if 
\begin_inset Formula $\mu$
\end_inset

 is not MLR,
 neither is 
\begin_inset Formula $\alpha$
\end_inset

 nor 
\begin_inset Formula $\beta$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $\mu$
\end_inset

 is not MLR,
 we can find prefixes of 
\begin_inset Formula $\mu$
\end_inset

 that are easy to describe,
 say 
\begin_inset Formula $\mu=m.x\dots$
\end_inset

 with 
\begin_inset Formula $K(x)\leq\length x-d$
\end_inset

 for large 
\begin_inset Formula $d$
\end_inset

.
 Then,
 we use 
\begin_inset Formula $x$
\end_inset

 to provide a short description of a prefix of 
\begin_inset Formula $\alpha$
\end_inset

.
 To do this,
 consider decreasing computable approximations 
\begin_inset Formula $\alpha_{n}$
\end_inset

 and 
\begin_inset Formula $\beta_{n}$
\end_inset

,
 of 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 respectively.
 Set 
\begin_inset Formula $\mu_{n}=\alpha_{n}+\beta_{n}$
\end_inset

,
 and computably find 
\begin_inset Formula $n$
\end_inset

 large enough such that 
\begin_inset Formula $\mu_{n}\leq m.x+2^{-\length x}$
\end_inset

.
 This implies that 
\begin_inset Formula $\alpha_{n}\leq\alpha+2^{-\length x}$
\end_inset

,
 and so 
\begin_inset Formula $\alpha_{n}$
\end_inset

 is an approximation within this small error.
 Let 
\begin_inset Formula $a.y$
\end_inset

 be the truncation of 
\begin_inset Formula $\alpha_{n}$
\end_inset

 to 
\begin_inset Formula $\length x$
\end_inset

 binary digits,
 rounded down.
 Then,
\begin_inset Formula 
\[
a.y-2^{-\length y}\leq\alpha_{n}-2^{-\length y}\leq\alpha\leq\alpha_{n}\leq a.y+2^{-\length y}.
\]

\end_inset

 Note that this entire process is computable,
 and hence for some constant 
\begin_inset Formula $c$
\end_inset

 we have 
\begin_inset Formula $K(y)\leq c+K(x)\leq\length y+c-d$
\end_inset

.
 In other words,
 since 
\begin_inset Formula $d$
\end_inset

 is arbitrary,
 we verified that for any value of 
\begin_inset Formula $d$
\end_inset

 we can find 
\begin_inset Formula $a.y$
\end_inset

 within 
\begin_inset Formula $2^{-\length y}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

,
 with 
\begin_inset Formula $K(y)\leq\length y-d$
\end_inset

,
 which by Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randomwithin"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 implies that 
\begin_inset Formula $\alpha$
\end_inset

 is not MLR,
 as desired.
\end_layout

\begin_layout Standard
We are now ready for the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\end_inset

Suppose 
\begin_inset Formula $S$
\end_inset

 is a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class contained in 
\begin_inset Formula $\MLR$
\end_inset

.
 By Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:pi1classmlr"

\end_inset

,
 its measure is strictly positive.
 Suppose that this measure is not MLR.
 Then,
 applying Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

,
 we can find 
\begin_inset Formula $y_{0}$
\end_inset

 such that 
\begin_inset Formula $\mu(S\cap\downcl{y_{0}})>0$
\end_inset

 and 
\begin_inset Formula $K(y_{0})\leq\length{y_{0}}$
\end_inset

.
 Then,
 looking at the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S\cap\downcl{y_{0}}$
\end_inset

,
 we attempt to find 
\begin_inset Formula $y_{1}\geq y_{0}$
\end_inset

 such that 
\begin_inset Formula $K(y_{1})\leq\length{y_{1}}-1$
\end_inset

.
 We can do this because,
 by Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:sumrandom"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 additivity of measure,
 and the fact that measure of a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class is right-c.e,
 we get that the measure of 
\begin_inset Formula $S\cap\downcl y$
\end_inset

 is not MLR for any 
\begin_inset Formula $y$
\end_inset

.
 Proceeding analogously,
 we may iteratively produce a chain of strings 
\begin_inset Formula $y_{n}$
\end_inset

 in 
\begin_inset Formula $S_{t}$
\end_inset

 for arbitrarily large 
\begin_inset Formula $t$
\end_inset

 with 
\begin_inset Formula $K(y_{n})\leq\length{y_{n}}-n$
\end_inset

.
 Then,
 the limit sequence 
\begin_inset Formula $Y$
\end_inset

 is in 
\begin_inset Formula $S$
\end_inset

 but not MLR,
 a contradiction.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibliography"
options "plain"
encoding "default"

\end_inset


\end_layout

\end_body
\end_document
