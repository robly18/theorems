#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\usepackage{fullpage}
\usepackage{tikz}
\usetikzlibrary{arrows.meta, positioning,
decorations.pathreplacing, decorations.pathmorphing}
\usepackage{braket}

\tikzset{interval/.style={{Bracket[width=1em]}-{Bracket[width=1em]}},
ilbl/.style={midway, above=0.3em}}
\end_preamble
\use_default_options true
\begin_modules
duarte_theorems
enumitem
InStar
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 2
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\listings_params "basicstyle={\ttfamily\footnotesize},keepspaces=true,tabsize=4,breaklines=true,columns=fullflexible,mathescape=true"
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Algorithmic Randomness Notes
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "C:/Users/gaming/Desktop/theorems/misc/lyx/macros_logic.lyx"
literal "false"

\end_inset


\end_layout

\begin_layout In Preamble
\begin_inset FormulaMacro
\newcommand{\emptystring}{\varepsilon}
\end_inset


\begin_inset FormulaMacro
\newcommand{\length}[1]{\abs{#1}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\downcl}[1]{[#1]}
\end_inset


\begin_inset FormulaMacro
\newcommand{\MLR}{{\rm MLR}}
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This file just contains my notes on Algorithmic Randomness,
 from reading Hirschfeldt and Downey's book 
\begin_inset CommandInset citation
LatexCommand cite
key "algrand_downey_hirschfeldt"
literal "false"

\end_inset

 and Nies' book 
\begin_inset CommandInset citation
LatexCommand cite
key "nies"
literal "false"

\end_inset

.
 I do not commit to ensuring that it is readable or in a reasonable order.
\end_layout

\begin_layout Section
Random Reals
\end_layout

\begin_layout Definition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is said to be Martin-Löf random if,
 for every uniform sequence of effective open sets 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 with 
\begin_inset Formula $\mu(U_{n})\leq2^{-n}$
\end_inset

 we have that 
\begin_inset Formula $\alpha$
\end_inset

 is not in all of them.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is said to be 
\emph on
digitally random
\emph default
 if,
 when we write 
\begin_inset Formula $\alpha=a+0.x_{1}x_{2}x_{3}\dots$
\end_inset

 with 
\begin_inset Formula $a\in\Z$
\end_inset

,
 the sequence 
\begin_inset Formula $X=x_{1}x_{2}x_{3}\dots$
\end_inset

 is Martin-Löf random.
 This definition is unambiguous because the only cases that admit nonuniqueness are not random either way.
\end_layout

\begin_layout Proposition
A real number 
\begin_inset Formula $\alpha$
\end_inset

 is digitally random iff it is Martin-Löf random.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Let 
\begin_inset Formula $\alpha$
\end_inset

 not be MLR,
 and let 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 be a witness to this fact.
 Let 
\begin_inset Formula $X$
\end_inset

 be the sequence subunitary digits of 
\begin_inset Formula $\alpha$
\end_inset

,
 and assume without loss of generality that 
\begin_inset Formula $\alpha\in\rinterval 01$
\end_inset

.
 Then,
 the class 
\begin_inset Formula $V_{n}$
\end_inset

 of sequences 
\begin_inset Formula $Y=y_{1}y_{2}\dots$
\end_inset

 such that 
\begin_inset Formula $0.Y\in U_{n}$
\end_inset

 forms a Martin-Löf test in Cantor space,
 and its measure is the same as the measure of 
\begin_inset Formula $U_{n}$
\end_inset

.
 Thus,
 
\begin_inset Formula $\{V_{n}\}_{n\in\N}$
\end_inset

is a ML test that 
\begin_inset Formula $X$
\end_inset

 passes,
 implying 
\begin_inset Formula $X$
\end_inset

 is not random.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\leftarrow$
\end_inset

) In a similar fashion,
 if we have a ML test for the digits of 
\begin_inset Formula $\alpha$
\end_inset

,
 we can produce a ML test for 
\begin_inset Formula $\alpha$
\end_inset

 itself.
 This does require adding a little slack,
 or dealing with the cases when 
\begin_inset Formula $\alpha$
\end_inset

 is a dyadic rational on the side.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:randomwithin"

\end_inset

A real number 
\begin_inset Formula $\alpha=a.A$
\end_inset

 is Martin-Löf random iff there exists 
\begin_inset Formula $d$
\end_inset

 such that,
 for every dyadic rational 
\begin_inset Formula $a.x$
\end_inset

 within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

,
 we have 
\begin_inset Formula $K(x)\geq\length x-d$
\end_inset

.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Suppose 
\begin_inset Formula $\alpha$
\end_inset

 is MLR.
 Consider the following candidate for a Martin-Löf test:
 
\begin_inset Formula 
\[
U_{n}=\bigcup_{K(y)<\length y-n}B_{2^{-\length y}}(a.y).
\]

\end_inset

This is a uniform effective open because checking whether 
\begin_inset Formula $K(y)$
\end_inset

 is less than something is a c.e.
\begin_inset space \space{}
\end_inset

condition.
 To bound its measure:
\begin_inset Formula 
\[
\mu(U_{n})=\mu\bigcup_{K(y)<\length y-n}\ointerval{a.y-2^{-\length y}}{a.y+2^{-\length y}}\leq\sum_{K(y)<\length y-n}2\cdot2^{-\length y}\leq2\sum2^{-K(y)-n}\leq2^{1-n}.
\]

\end_inset

Since 
\begin_inset Formula $\alpha$
\end_inset

 is MLR,
 it cannot be in all 
\begin_inset Formula $U_{n}$
\end_inset

,
 and so there will be 
\begin_inset Formula $n$
\end_inset

 for which,
 for all dyadic rationals 
\begin_inset Formula $a.y$
\end_inset

 for which 
\begin_inset Formula $\alpha$
\end_inset

 is within 
\begin_inset Formula $2^{-\length y}$
\end_inset

 of 
\begin_inset Formula $a.y$
\end_inset

,
 we have 
\begin_inset Formula $K(y)\geq\length y-n$
\end_inset

,
 as desired.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset Formula $\leftarrow$
\end_inset

) Suppose 
\begin_inset Formula $\alpha$
\end_inset

 is not MLR.
 Then,
 the sequence 
\begin_inset Formula $A$
\end_inset

 is not MLR,
 and so,
 for any chosen 
\begin_inset Formula $d$
\end_inset

,
 we may find a prefix 
\begin_inset Formula $x\leq A$
\end_inset

 for which 
\begin_inset Formula $K(x)\leq\length x-d$
\end_inset

.
 This prefix obviously satisfies the condition that 
\begin_inset Formula $a.x$
\end_inset

 is within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Remark
There is some ambiguity in the wording and proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randomwithin"

\end_inset

.
 Does 
\begin_inset Quotes eld
\end_inset

within 
\begin_inset Formula $2^{-\length x}$
\end_inset

of 
\begin_inset Formula $\alpha$
\end_inset


\begin_inset Quotes erd
\end_inset

 mean that the distance is 
\begin_inset Formula $\leq2^{-\length x}$
\end_inset

,
 or strictly less?
 Our proof actually uses different interpretation for either implication.
 We dedicate some words to rectifying this issue.
\end_layout

\begin_layout Remark
(
\begin_inset Formula $\rightarrow$
\end_inset

) We proved the statement for 
\begin_inset Quotes eld
\end_inset

within
\begin_inset Quotes erd
\end_inset

 meaning 
\begin_inset Quotes eld
\end_inset

strictly within
\begin_inset Quotes erd
\end_inset

.
 To modify the proof,
 define 
\begin_inset Formula $U_{n}$
\end_inset

 as the union of balls of size 
\begin_inset Formula $2^{-\length y+1}$
\end_inset

 instead of 
\begin_inset Formula $2^{-\length y}$
\end_inset

.
 We are merely doubling the size of each 
\begin_inset Formula $U_{n}$
\end_inset

,
 so the proof follows through,
 and we prove the stronger statement:
 for every dyadic rational 
\begin_inset Formula $a.x$
\end_inset

 strictly within 
\begin_inset Formula $2\cdot2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

 we have 
\begin_inset Formula $K(x)\geq\length x-d$
\end_inset

.
\end_layout

\begin_layout Remark
(
\begin_inset Formula $\leftarrow$
\end_inset

) Let us think of what happens if 
\begin_inset Formula $a.x$
\end_inset

 is weakly,
 but not strictly,
 within 
\begin_inset Formula $2^{-\length x}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

.
 This must be because 
\begin_inset Formula $\alpha=a.x1^{\omega}=a.x+2^{-\length x}$
\end_inset

.
 Thus,
 
\begin_inset Formula $\alpha$
\end_inset

 is a dyadic rational,
 and we chose 
\begin_inset Formula $A$
\end_inset

 to be the binary expansion with cofinitely many ones.
 Simply repeat the argument with the other expansion to get our result.
\end_layout

\begin_layout Section
Random c.e.
\begin_inset space \space{}
\end_inset

Reals
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Solovay}{{\rm S}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sleq}{\leq_{\Solovay}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sgeq}{\geq_{\Solovay}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\Sequiv}{\equiv_{\Solovay}}
\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:solovay1"

\end_inset

Let 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 be left-c.e.
\begin_inset space \space{}
\end_inset

reals.
 We define 
\emph on

\begin_inset Formula $\alpha$
\end_inset

 is Solovay reducible to 
\begin_inset Formula $\beta$
\end_inset

,

\emph default
 denoted 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

 if there is a computable function 
\begin_inset Formula $\varphi\colon\Q\pto\Q$
\end_inset

 such that,
 for every rational 
\begin_inset Formula $q<\beta$
\end_inset

,
 we have 
\begin_inset Formula $\varphi(q)\iswd\leq\alpha$
\end_inset

,
 and there is a fixed constant 
\begin_inset Formula $c$
\end_inset

 such that 
\begin_inset Formula 
\begin{equation}
\abs{\alpha-\varphi(q)}\leq c\abs{\beta-q}.\label{eq:solovay1}
\end{equation}

\end_inset

(Note:
 The absolute value signs are redundant.) Informally,
 this means that rational approximations of 
\begin_inset Formula $\beta$
\end_inset

 turn into rational approximations of 
\begin_inset Formula $\alpha$
\end_inset

,
 and to know the first 
\begin_inset Formula $n$
\end_inset

 digits of 
\begin_inset Formula $\alpha$
\end_inset

 we need only know the first 
\begin_inset Formula $c'n$
\end_inset

 digits of 
\begin_inset Formula $\beta$
\end_inset

 for some constant value 
\begin_inset Formula $c'$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:solovay2"

\end_inset

The previous definition of Solovay-reducibility for left-c.e.
\begin_inset space \space{}
\end_inset

reals is equivalent to the following,
 due to Downey,
 Hirschfeldt,
 and Nies:
 We say 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

 if there is an integer 
\begin_inset Formula $d$
\end_inset

 and a left-c.e.
\begin_inset space \space{}
\end_inset

real 
\begin_inset Formula $\gamma$
\end_inset

 so that
\begin_inset Formula 
\begin{equation}
2^{d}\alpha+\gamma=\beta.\label{eq:solovay2}
\end{equation}

\end_inset


\end_layout

\begin_layout Proof
First,
 suppose that 
\begin_inset Formula $2^{d}\alpha+\gamma=\beta$
\end_inset

 as above,
 and let us show that 
\begin_inset Formula $\alpha\Sleq\beta$
\end_inset

.
 We do this by defining our function 
\begin_inset Formula $\varphi$
\end_inset

 as follows:
 Given an approximation 
\begin_inset Formula $q<\beta$
\end_inset

,
 we search for rationals 
\begin_inset Formula $a<\alpha$
\end_inset

 and 
\begin_inset Formula $g<\gamma$
\end_inset

 such that 
\begin_inset Formula $2^{d}a+g\geq q$
\end_inset

.
 Then,
 we have 
\begin_inset Formula $\beta-q\geq2^{d}(\alpha-a)+(\gamma-g)\geq2^{d}(\alpha-a)$
\end_inset

,
 and so equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 holds with 
\begin_inset Formula $c=2^{d}$
\end_inset

 if we define 
\begin_inset Formula $\varphi(q)$
\end_inset

 as the rational number 
\begin_inset Formula $a$
\end_inset

 obtained from this search.
\end_layout

\begin_layout Proof
Now,
 suppose that Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:solovay1"

\end_inset

 holds.
 Let 
\begin_inset Formula $d$
\end_inset

 be some integer that satisfies 
\begin_inset Formula $c\leq2^{-d}$
\end_inset

.
 Then,
 we can rearrange Equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 into
\begin_inset Formula 
\begin{equation}
2^{d}\alpha+(q-2^{d}\varphi(q))\leq\beta,\label{eq:qleq}
\end{equation}

\end_inset

for 
\begin_inset Formula $q$
\end_inset

 rational numbers less than 
\begin_inset Formula $\beta$
\end_inset

.
 Now,
 let 
\begin_inset Formula $\beta_{s}$
\end_inset

 be a computable sequence of rationals approximating 
\begin_inset Formula $\beta$
\end_inset

 from below,
 and set 
\begin_inset Formula $\gamma_{s}=\beta_{s}-2^{d}\varphi(\beta_{s})$
\end_inset

.
 This defines a left-c.e.
\begin_inset space \space{}
\end_inset

real by 
\begin_inset Formula $\gamma=\sup\gamma_{s}$
\end_inset

,
 and Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:qleq"

\end_inset

 guarantees that 
\begin_inset Formula $2^{d}\alpha+\gamma\leq\beta$
\end_inset

.
 On the other hand,
 taking the limit of the definition of 
\begin_inset Formula $\gamma_{s}$
\end_inset

 we see that 
\begin_inset Formula $\gamma\geq\lim\gamma_{s}=\beta-2^{d}\alpha$
\end_inset

,
 which provides the opposite inequality,
 proving that Equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:solovay2"

\end_inset

 holds,
 and completing the proof.
\end_layout

\begin_layout Proposition
Let 
\begin_inset Formula $\alpha$
\end_inset

 be a left-c.e.
\begin_inset space \space{}
\end_inset

real number.
 The following statements are equivalent:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

label=(
\backslash
alph*)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "enu:mlr"

\end_inset


\begin_inset Formula $\alpha$
\end_inset

 is ML-random,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:pff"

\end_inset

There is an optimal prefix-free machine 
\begin_inset Formula $R$
\end_inset

 and an integer 
\begin_inset Formula $z$
\end_inset

 such that 
\begin_inset Formula $\alpha=\Omega_{R}+z$
\end_inset

,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:sc"

\end_inset


\begin_inset Formula $\alpha$
\end_inset

 is Solovay-complete.
\end_layout

\end_deeper
\begin_layout Proof
(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:mlr"

\end_inset


\begin_inset Formula $\to$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:sc"

\end_inset

) To motivate this proof,
 we start from the following idea:
 How do we turn a left-approximation of 
\begin_inset Formula $\alpha$
\end_inset

 into a better left-approximation of another left c.e.
\begin_inset space \space{}
\end_inset

real 
\begin_inset Formula $\beta$
\end_inset

?
 To be more precise,
 given 
\begin_inset Formula $q<\alpha$
\end_inset

 at a distance of 
\begin_inset Formula $\delta$
\end_inset

 we want to construct 
\begin_inset Formula $\varphi(q)<\beta$
\end_inset

 at a distance of at most 
\begin_inset Formula $c\delta$
\end_inset

.
 Dividing everything out by 
\begin_inset Formula $c$
\end_inset

,
 we temporarily assume that 
\begin_inset Formula $c=1$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\alpha_{s}\nearrow\alpha$
\end_inset

 and 
\begin_inset Formula $\beta_{s}\nearrow\beta$
\end_inset

 be computable left-approximations,
 and suppose,
 for the sake of argument,
 that 
\begin_inset Formula $\beta_{0}$
\end_inset

 is a better approximation than 
\begin_inset Formula $\alpha_{0}$
\end_inset

.
 Then,
 we have the following picture:
\end_layout

\begin_layout Proof
\begin_inset Float figure
placement document
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (-5,0) -- (5,0);
 
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (A0) at (-3,0){};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of A0] {$
\backslash
alpha_0$};
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (A1) at (1.5,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of A1] {$
\backslash
alpha_s$};
\end_layout

\begin_layout Plain Layout


\backslash
node (A0P) at (1,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (A0) to[bend left=10] node[ilbl] {$
\backslash
delta$} (A0P);
\end_layout

\begin_layout Plain Layout


\backslash
draw[fill=black] (3,0) circle (0.15) node[below=0.2cm] {$
\backslash
alpha$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[yshift=-2cm]
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (-5,0) -- (5,0);
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (B0) at (-2,0){};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of B0] {$
\backslash
beta_0$};
\end_layout

\begin_layout Plain Layout


\backslash
node[circle,
 fill=black] (B1) at (2,0) {};
\end_layout

\begin_layout Plain Layout


\backslash
node[below=0.2cm of B1] {$
\backslash
beta_1$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (B0) to[bend left=10] node[ilbl] {$
\backslash
delta$} (B1);
\end_layout

\begin_layout Plain Layout


\backslash
draw[fill=black] (3,0) circle (0.15) node[below=0.2cm] {$
\backslash
beta$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Assuming 
\begin_inset Formula $\beta_{0}$
\end_inset

 approximates 
\begin_inset Formula $\beta$
\end_inset

 better than 
\begin_inset Formula $\alpha_{0}$
\end_inset

 does 
\begin_inset Formula $\alpha$
\end_inset

,
 there will be some 
\begin_inset Formula $\alpha_{s}>\alpha_{0}+\delta$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Proof
Thus,
 we wait for some value of 
\begin_inset Formula $\alpha_{s}$
\end_inset

 that is greater than 
\begin_inset Formula $\alpha_{0}+(\beta_{1}-\beta_{0})$
\end_inset

.
 If this exists,
 we send every 
\begin_inset Formula $q<\alpha_{0}$
\end_inset

 to 
\begin_inset Formula $\varphi(q):=\beta_{0}$
\end_inset

.
 Now,
 we proceed:
 Assuming that 
\begin_inset Formula $\beta_{1}$
\end_inset

 is a better approximation of 
\begin_inset Formula $\beta$
\end_inset

 than 
\begin_inset Formula $\alpha_{s}$
\end_inset

 is of 
\begin_inset Formula $\alpha$
\end_inset

,
 we use the distance between 
\begin_inset Formula $\beta_{1}$
\end_inset

 and 
\begin_inset Formula $\beta_{2}$
\end_inset

 to determine an interval of size 
\begin_inset Formula $\beta_{2}-\beta_{1}$
\end_inset

,
 which we hope that 
\begin_inset Formula $\alpha_{s}$
\end_inset

 will eventually escape,
 and when it does we know to define the image of every 
\begin_inset Formula $\alpha_{0}\leq q<\alpha_{s}$
\end_inset

 under 
\begin_inset Formula $\varphi$
\end_inset

 as 
\begin_inset Formula $\beta_{1}$
\end_inset

,
 and so on.
\end_layout

\begin_layout Proof
If this algorithm succeeds forever,
 we have just obtained a computable map 
\begin_inset Formula $\varphi\colon\Q\pto\Q$
\end_inset

 that satisfies 
\begin_inset Formula $\abs{\beta-\varphi(q)}\leq\abs{\alpha-q}$
\end_inset

.
 This is because the distance between 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\varphi(q)=\beta_{t}$
\end_inset

 is the sum of the distances 
\begin_inset Formula $\beta_{t+1}-\beta_{t}$
\end_inset

,
 
\begin_inset Formula $\beta_{t+2}-\beta_{t+1}$
\end_inset

,
 etc,
 which are in turn less than or equal to the sum of the distances between the 
\begin_inset Formula $\alpha_{i}$
\end_inset

 used to define 
\begin_inset Formula $\varphi$
\end_inset

.
\end_layout

\begin_layout Proof
If this algorithm does not succeed forever,
 the intervals of size 
\begin_inset Formula $\delta_{i}=\beta_{i+1}-\beta_{i}$
\end_inset

 furnish a 
\begin_inset Formula $\Sigma_{1}$
\end_inset

 set of measure 
\begin_inset Formula $\leq\sum\delta_{i}=\beta-\beta_{0}$
\end_inset

 inside of which 
\begin_inset Formula $\alpha$
\end_inset

 is guaranteed to be.
\end_layout

\begin_layout Proof
Now,
 the idea is to apply the above algorithm uniformly to 
\begin_inset Formula $\beta/2^{n}$
\end_inset

 for 
\begin_inset Formula $n=0$
\end_inset

,
 
\begin_inset Formula $1$
\end_inset

,
 etc:
 If this algorithm is to fail for every such value of 
\begin_inset Formula $n$
\end_inset

,
 the resulting open sets furnish a Martin-Löf test that 
\begin_inset Formula $\alpha$
\end_inset

 now fails.
 Once we manage to turn approximations of 
\begin_inset Formula $\alpha$
\end_inset

 into approximations of 
\begin_inset Formula $\beta/2^{n}$
\end_inset

,
 multiplying them by 
\begin_inset Formula $2^{n}$
\end_inset

 furnishes approximations of 
\begin_inset Formula $\beta$
\end_inset

 with a constant multiplicative increase in error.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:pff"

\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:mlr"

\end_inset

) Whether or not a given left-c.e.
\begin_inset space \space{}
\end_inset

is ML-random or not depends solely on its sub-unitary digits,
 so it suffices to prove that,
 for 
\begin_inset Formula $R$
\end_inset

 an optimal prefix-free machine,
 
\begin_inset Formula $\Omega_{R}$
\end_inset

 is MLR.
\end_layout

\begin_layout Proof
We know that,
 up to a constant additive factor,
 the definition of Kolmogorov prefix-free complexity does not depend on the choice of such machine,
 so we use 
\begin_inset Formula $K(\sigma)$
\end_inset

 to denote the prefix-free complexity of 
\begin_inset Formula $\sigma$
\end_inset

 wrt this machine 
\begin_inset Formula $R$
\end_inset

.
 The basic idea is that knowing 
\begin_inset Formula $\Omega_{R}$
\end_inset

 to a good amount of precision would let us compute the domain of 
\begin_inset Formula $R$
\end_inset

,
 which we should not be able to do.
\end_layout

\begin_layout Proof
To be more precise,
 let 
\begin_inset Formula $\sigma$
\end_inset

 be a prefix of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 with length 
\begin_inset Formula $n$
\end_inset

;
 in other words,
 
\begin_inset Formula $0.\sigma\leq\Omega_{R}\leq0.\sigma+2^{-n}$
\end_inset

.
 Then,
 we are able to calculate the domain of 
\begin_inset Formula $R$
\end_inset

 up to length 
\begin_inset Formula $n-1$
\end_inset

,
 by letting 
\begin_inset Formula $R$
\end_inset

 run on all inputs until the approximation of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 exceeds 
\begin_inset Formula $0.\sigma-2^{-n}$
\end_inset

.
 By this point,
 if there were an input of length 
\begin_inset Formula $n-1$
\end_inset

 or less that was yet to halt,
 the value of 
\begin_inset Formula $\Omega_{R}$
\end_inset

 would exceed 
\begin_inset Formula $0.\sigma+2^{-n}$
\end_inset

,
 a contradiction.
 Thus,
 let us define 
\begin_inset Formula $x(\sigma)$
\end_inset

 as an arbitrarily (but effectively) chosen string that hasn't been output by 
\begin_inset Formula $R$
\end_inset

 by this point – note that the defnition of 
\begin_inset Formula $x$
\end_inset

 produces a computable,
 if partial,
 function on all strings.
 By definition,
 we then have 
\begin_inset Formula $K(x(\Omega_{R}\upto n))\geq n$
\end_inset

.
 Now,
 note the string of inequalities
\begin_inset Formula 
\[
n\leq K(x(\Omega_{R}\upto n))\leq c+K(\Omega_{R}\upto n),
\]

\end_inset

which tells us that 
\begin_inset Formula $K(\Omega_{R}\upto n)\geq n-c$
\end_inset

 for some constant 
\begin_inset Formula $c$
\end_inset

,
 i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\Omega_{R}$
\end_inset

 is 1-random.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Proof
(
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:sc"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\begin_inset Formula $\rightarrow$
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:pff"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

) Assume that 
\begin_inset Formula $\alpha$
\end_inset

 is Solovay-complete,
 i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\alpha\Sgeq\beta$
\end_inset

 for every left-c.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\beta$
\end_inset

.
 By the previous two implications,
 this is equivalent to the assumption that 
\begin_inset Formula $\alpha\Sgeq\Omega$
\end_inset

,
 where 
\begin_inset Formula $\Omega$
\end_inset

 is the halting probability of some previously fixed optimal universal machine 
\begin_inset Formula $U$
\end_inset

.
 Assume also,
 without loss of generality,
 that 
\begin_inset Formula $\alpha\in\linterval 01$
\end_inset

,
 as to show that 
\begin_inset Formula $\alpha$
\end_inset

 itself is the halting probability of some optimal machine.
\end_layout

\begin_layout Proof
Apply Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:solovay2"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 to this scenario to obtain that 
\begin_inset Formula $2^{d}\Omega+\gamma=\alpha$
\end_inset

 for some integer 
\begin_inset Formula $d$
\end_inset

 and left-c.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\gamma$
\end_inset

.
 Without loss of generality,
 possibly by decreasing the value of 
\begin_inset Formula $d$
\end_inset

,
 we assume that 
\begin_inset Formula $\gamma>0$
\end_inset

 and that 
\begin_inset Formula $\gamma\leq1-2^{d}$
\end_inset

 (this is done by setting 
\begin_inset Formula $d$
\end_inset

 so small that 
\begin_inset Formula $2^{d}<\alpha$
\end_inset

 and 
\begin_inset Formula $2^{d}<1-\alpha$
\end_inset

).
 This implies also 
\begin_inset Formula $d<0$
\end_inset

.
 Now,
 the idea is consider a padded version of the optimal machine whose halting probability is 
\begin_inset Formula $\Omega$
\end_inset

,
 so as to add halting probability 
\begin_inset Formula $2^{d}\Omega$
\end_inset

,
 while making other inputs halt (yielding some arbitrary value) as to add 
\begin_inset Formula $\gamma$
\end_inset

 to the halting probability.
 This can be done by the KC theorem,
 but I would consider it relatively overkill;
 a simpler construction can be considered by taking approximations 
\begin_inset Formula $\gamma_{s}$
\end_inset

 of 
\begin_inset Formula $\gamma$
\end_inset

 that always increase by a power of two,
 and such that this power never increases.
 Then,
 each time we spot 
\begin_inset Formula $\gamma_{s+1}=\gamma_{s}+2^{-n}$
\end_inset

,
 we pick a new string of length 
\begin_inset Formula $n$
\end_inset

 and stipulate that our machine halts on this string.
\end_layout

\begin_layout Proposition
For any optimal machine,
 
\begin_inset Formula $\Omega\equiv0'$
\end_inset

.
\end_layout

\begin_layout Proof
Evidently,
 
\begin_inset Formula $0'$
\end_inset

 computes 
\begin_inset Formula $\Omega$
\end_inset

 because it is left-c.e.
 Thus,
 we show the opposite computation.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M$
\end_inset

 be the prefix-free machine 
\begin_inset Formula 
\[
M(1^{e}0)=\text{halting time of \ensuremath{e}-th Turing machine, if any.}
\]

\end_inset

By definition of optimality,
 there is a constant 
\begin_inset Formula $d$
\end_inset

 such that 
\begin_inset Formula $K(\sigma)\leq K_{M}(\sigma)+d$
\end_inset

.
 Now,
 suppose that we are interested in finding out if the 
\begin_inset Formula $e$
\end_inset

-th turing machine halts.
 Say that it does halt by time 
\begin_inset Formula $t$
\end_inset

.
 Then,
 
\begin_inset Formula $M(1^{e}0)=t$
\end_inset

,
 hence 
\begin_inset Formula $e+1\geq K_{M}(t)\geq K(t)-d$
\end_inset

.
 This places a bound on how long the 
\begin_inset Formula $e$
\end_inset

-th may take to halt:
 we need only wait for the values of 
\begin_inset Formula $t$
\end_inset

 such that 
\begin_inset Formula $K(t)\leq e+1+d$
\end_inset

,
 of which there are finitely many.
 To figure out which values these are:
 Evaluate values of 
\begin_inset Formula $U(\sigma)$
\end_inset

 until you find that you're within 
\begin_inset Formula $2^{-e-1-d}$
\end_inset

 of the halting probability 
\begin_inset Formula $\Omega$
\end_inset

 (this is where we use an oracle for 
\begin_inset Formula $\Omega$
\end_inset

).
 Then,
 you know that any input on which 
\begin_inset Formula $U$
\end_inset

 halts will be longer than 
\begin_inset Formula $e+1+d$
\end_inset

,
 so all values of 
\begin_inset Formula $t$
\end_inset

 for which 
\begin_inset Formula $K(t)\leq e+1+d$
\end_inset

 are already known.
 Thus,
 to figure out whether the 
\begin_inset Formula $e$
\end_inset

-th Turing machine halts,
 we need only run it for 
\begin_inset Formula $T$
\end_inset

 time,
 where 
\begin_inset Formula $T$
\end_inset

 is the max of all such values of 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset Formula $\Pi_{1}$
\end_inset

 Classes
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:mlrissigma2"

\end_inset

Let 
\begin_inset Formula $\MLR$
\end_inset

 denote the class of Martin-Löf random sets.
 Then,
 
\begin_inset Formula $\MLR$
\end_inset

 is a measure one 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 class.
\end_layout

\begin_layout Proof
Consider a universal ML test 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

.
 Then,
 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

 is MLR iff it is not in all 
\begin_inset Formula $U_{n}$
\end_inset

,
 which is a 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 property (
\begin_inset Quotes eld
\end_inset

there exists 
\begin_inset Formula $n$
\end_inset

 (
\begin_inset Formula $\exists$
\end_inset

) such that 
\begin_inset Formula $A$
\end_inset

 is not in 
\begin_inset Formula $U_{n}$
\end_inset

 (
\begin_inset Formula $\forall$
\end_inset

)
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Proof
Moreover,
 
\begin_inset Formula $\MLR^{c}=\cap U_{n}$
\end_inset

,
 which has measure zero.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:pi1classmlr"

\end_inset

A 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S\subseteq2^{\omega}$
\end_inset

 contains an MLR set iff 
\begin_inset Formula $\mu(S)>0$
\end_inset

.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Suppose 
\begin_inset Formula $\mu(S)=0$
\end_inset

,
 with 
\begin_inset Formula $S$
\end_inset

 being the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class given by 
\begin_inset Formula $\forall_{y}P(f\upto y)$
\end_inset

.
 Then,
 
\begin_inset Formula $S=\cap S_{n}$
\end_inset

,
 with 
\begin_inset Formula $S_{n}$
\end_inset

 being defined as the class of elements that satisfies 
\begin_inset Formula $P$
\end_inset

 up to length 
\begin_inset Formula $n$
\end_inset

.
 As such,
 we have 
\begin_inset Formula $0=\mu(S)=\lim\mu(S_{n})$
\end_inset

.
 Moreover,
 
\begin_inset Formula $\mu(S_{n})$
\end_inset

 is effective,
 because in fact 
\begin_inset Formula $S_{n}$
\end_inset

 is a clopen set determined by the length up-to-
\begin_inset Formula $n$
\end_inset

 strings that satisfy 
\begin_inset Formula $P$
\end_inset

.
 Thus,
 we can effectively take a subsequence 
\begin_inset Formula $S_{n_{k}}$
\end_inset

 of measure 
\begin_inset Formula $\leq2^{-k}$
\end_inset

,
 which furnishes an ML test that every element of 
\begin_inset Formula $S$
\end_inset

 passes.
 Thus,
 every element of 
\begin_inset Formula $S$
\end_inset

 is 
\emph on
not
\emph default
 Martin-Löf random.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset

(
\begin_inset Formula $\leftarrow$
\end_inset

) The collection of ML-random sets has measure one.
 Thus,
 
\begin_inset Formula $S\cap\MLR$
\end_inset

 will,
 by inclusion-exclusion,
 have measure
\begin_inset Formula 
\[
\mu(S\cap\MLR)\geq\mu(S)+\mu(\MLR)-\mu(S\cup\MLR)\geq\mu(S)+1-1=\mu(S).
\]

\end_inset

Hence,
 if 
\begin_inset Formula $\mu(S)>0$
\end_inset

,
 we get that 
\begin_inset Formula $S\cap\MLR$
\end_inset

 is nonempty and therefore contains at least one element,
 finishing the proof.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:randommeasure"

\end_inset

If a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S$
\end_inset

 is contained in 
\begin_inset Formula $\MLR$
\end_inset

,
 then its measure is ML-random.
 In particular,
 
\begin_inset Formula $\MLR$
\end_inset

 is not a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class.
\end_layout

\begin_layout Standard
Before proving Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"

\end_inset

,
 we will prove some related results to motivate the ideas.
 The first of these results explains how MLR measure crops up:
 We show that if the measure of a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S$
\end_inset

 is positive and nonrandom,
 then we can find a prefix of some element of 
\begin_inset Formula $S$
\end_inset

 that is easy to describe.
 More precisely:
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:randommeasure"

\end_inset

If 
\begin_inset Formula $\mu(S)$
\end_inset

 is positive and not MLR,
 for each 
\begin_inset Formula $d$
\end_inset

 there exists a string 
\begin_inset Formula $y$
\end_inset

 such that 
\begin_inset Formula $\mu(S\cap\downcl y)>0$
\end_inset

 and 
\begin_inset Formula $K(y)\leq\length y-d$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\mu(S)=0.x\dots$
\end_inset

,
 with 
\begin_inset Formula $K(x)\leq\length x-d'$
\end_inset

 with 
\begin_inset Formula $d'$
\end_inset

 to be determined.
 We will also require that 
\begin_inset Formula $x$
\end_inset

 be long enough in some sense to be determined in a moment.
 The idea is that we approximate 
\begin_inset Formula $S=\cap S_{t}$
\end_inset

 with 
\begin_inset Formula $S_{t}$
\end_inset

 uniform finite unions of clopens.
 We can compute the measure of 
\begin_inset Formula $S_{t}$
\end_inset

,
 and it converges to 
\begin_inset Formula $\mu(S)$
\end_inset

,
 so we are able to (computably in 
\begin_inset Formula $x$
\end_inset

) determine a point when 
\begin_inset Formula $\mu(S_{t})\leq\mu(S)+2^{-\length x+1}$
\end_inset

.
 Next,
 we look for a value of 
\begin_inset Formula $y$
\end_inset

 at some depth 
\begin_inset Formula $p$
\end_inset

 (also to be determined) such that 
\begin_inset Formula $\mu(\downcl y\cap S_{t})>2^{-\length x+1}$
\end_inset

;
 this will guarantee that 
\begin_inset Formula $\mu([y]\cap S)>0$
\end_inset

 as desired.
 How do we ensure that such a value of 
\begin_inset Formula $y$
\end_inset

 exists?
 Suppose that it does not.
 Then,
 we can bound 
\begin_inset Formula $\mu(S_{t})\leq\sum_{\text{\ensuremath{y} depth \ensuremath{p}}}\mu(\downcl y\cap S_{t})\leq2^{p-\length x+1}$
\end_inset

,
 so we pick a value of 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $\mu(S)>2^{-q}$
\end_inset

 and set 
\begin_inset Formula $p=\length x-q-1$
\end_inset

.
 This requires assuming that 
\begin_inset Formula $x$
\end_inset

 has length at least 
\begin_inset Formula $q+1$
\end_inset

.
 Once we do,
 the above procedure provides a description of 
\begin_inset Formula $y$
\end_inset

 of length
\begin_inset Formula 
\[
c+K(S)+K(x)+K(q)\leq c+K(S)+\length x-d'+q,
\]

\end_inset

so setting 
\begin_inset Formula $d'=d+q+c+K(S)$
\end_inset

 proves the desired result.
\end_layout

\begin_layout Proof
To recap the proof:
 First,
 choose 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $\mu(S)>2^{-q}$
\end_inset

.
 Then,
 find 
\begin_inset Formula $x$
\end_inset

 a prefix of 
\begin_inset Formula $\mu(S)$
\end_inset

 of length at least 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $K(x)\leq\length x-q-d-c-K(S)$
\end_inset

,
 where 
\begin_inset Formula $c$
\end_inset

 is the length of a program encoding the procedure outlined in the next sentence.
 Then,
 we describe a string 
\begin_inset Formula $y$
\end_inset

 by the following procedure:
 Calculate the measures of 
\begin_inset Formula $\mu(S_{t})$
\end_inset

 until one of them is below 
\begin_inset Formula $0.x+2^{-\length x+1}$
\end_inset

 and,
 for the corresponding value of 
\begin_inset Formula $t$
\end_inset

,
 pick a string 
\begin_inset Formula $y$
\end_inset

 of length 
\begin_inset Formula $\length x-q-1$
\end_inset

 such that 
\begin_inset Formula $\mu(\downcl y\cap S_{t})\geq2^{-\length x+1}$
\end_inset

,
 which exists by the previous paragraph.
 This string 
\begin_inset Formula $y$
\end_inset

 satisfies the desired conclusion.
\end_layout

\begin_layout Standard
The idea for the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"

\end_inset

 is to stack Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

 on itself repeatedly to build an increasing chain of easy-to-describe strings in 
\begin_inset Formula $S$
\end_inset

,
 which will furnish a nonrandom path in 
\begin_inset Formula $S$
\end_inset

.
 This requires another auxilliary lemma,
 to ensure that when we chain Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

 the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 classes we apply it to continue to satisfy the assumptions of the lemma.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:sumrandom"

\end_inset

Let 
\begin_inset Formula $\mu=\alpha+\beta$
\end_inset

,
 with all these three numbers being right-c.e.
 Then,
 if 
\begin_inset Formula $\mu$
\end_inset

 is not MLR,
 neither is 
\begin_inset Formula $\alpha$
\end_inset

 nor 
\begin_inset Formula $\beta$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $\mu$
\end_inset

 is not MLR,
 we can find prefixes of 
\begin_inset Formula $\mu$
\end_inset

 that are easy to describe,
 say 
\begin_inset Formula $\mu=m.x\dots$
\end_inset

 with 
\begin_inset Formula $K(x)\leq\length x-d$
\end_inset

 for large 
\begin_inset Formula $d$
\end_inset

.
 Then,
 we use 
\begin_inset Formula $x$
\end_inset

 to provide a short description of a prefix of 
\begin_inset Formula $\alpha$
\end_inset

.
 To do this,
 consider decreasing computable approximations 
\begin_inset Formula $\alpha_{n}$
\end_inset

 and 
\begin_inset Formula $\beta_{n}$
\end_inset

,
 of 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 respectively.
 Set 
\begin_inset Formula $\mu_{n}=\alpha_{n}+\beta_{n}$
\end_inset

,
 and computably find 
\begin_inset Formula $n$
\end_inset

 large enough such that 
\begin_inset Formula $\mu_{n}\leq m.x+2^{-\length x}$
\end_inset

.
 This implies that 
\begin_inset Formula $\alpha_{n}\leq\alpha+2^{-\length x}$
\end_inset

,
 and so 
\begin_inset Formula $\alpha_{n}$
\end_inset

 is an approximation within this small error.
 Let 
\begin_inset Formula $a.y$
\end_inset

 be the truncation of 
\begin_inset Formula $\alpha_{n}$
\end_inset

 to 
\begin_inset Formula $\length x$
\end_inset

 binary digits,
 rounded down.
 Then,
\begin_inset Formula 
\[
a.y-2^{-\length y}\leq\alpha_{n}-2^{-\length y}\leq\alpha\leq\alpha_{n}\leq a.y+2^{-\length y}.
\]

\end_inset

 Note that this entire process is computable,
 and hence for some constant 
\begin_inset Formula $c$
\end_inset

 we have 
\begin_inset Formula $K(y)\leq c+K(x)\leq\length y+c-d$
\end_inset

.
 In other words,
 since 
\begin_inset Formula $d$
\end_inset

 is arbitrary,
 we verified that for any value of 
\begin_inset Formula $d$
\end_inset

 we can find 
\begin_inset Formula $a.y$
\end_inset

 within 
\begin_inset Formula $2^{-\length y}$
\end_inset

 of 
\begin_inset Formula $\alpha$
\end_inset

,
 with 
\begin_inset Formula $K(y)\leq\length y-d$
\end_inset

,
 which by Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randomwithin"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 implies that 
\begin_inset Formula $\alpha$
\end_inset

 is not MLR,
 as desired.
\end_layout

\begin_layout Standard
We are now ready for the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:randommeasure"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\end_inset

Suppose 
\begin_inset Formula $S$
\end_inset

 is a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class contained in 
\begin_inset Formula $\MLR$
\end_inset

.
 By Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:pi1classmlr"

\end_inset

,
 its measure is strictly positive.
 Suppose that this measure is not MLR.
 Then,
 applying Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:randommeasure"

\end_inset

,
 we can find 
\begin_inset Formula $y_{0}$
\end_inset

 such that 
\begin_inset Formula $\mu(S\cap\downcl{y_{0}})>0$
\end_inset

 and 
\begin_inset Formula $K(y_{0})\leq\length{y_{0}}$
\end_inset

.
 Then,
 looking at the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $S\cap\downcl{y_{0}}$
\end_inset

,
 we attempt to find 
\begin_inset Formula $y_{1}\geq y_{0}$
\end_inset

 such that 
\begin_inset Formula $K(y_{1})\leq\length{y_{1}}-1$
\end_inset

.
 We can do this because,
 by Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:sumrandom"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 additivity of measure,
 and the fact that measure of a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class is right-c.e,
 we get that the measure of 
\begin_inset Formula $S\cap\downcl y$
\end_inset

 is not MLR for any 
\begin_inset Formula $y$
\end_inset

.
 Proceeding analogously,
 we may iteratively produce a chain of strings 
\begin_inset Formula $y_{n}$
\end_inset

 in 
\begin_inset Formula $S_{t}$
\end_inset

 for arbitrarily large 
\begin_inset Formula $t$
\end_inset

 with 
\begin_inset Formula $K(y_{n})\leq\length{y_{n}}-n$
\end_inset

.
 Then,
 the limit sequence 
\begin_inset Formula $Y$
\end_inset

 is in 
\begin_inset Formula $S$
\end_inset

 but not MLR,
 a contradiction.
\end_layout

\begin_layout Standard
We now show that MLR sets can encode arbitrary information,
 using the fact that there is a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class composed entirely of MLR sets.
\end_layout

\begin_layout Proposition
There is a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class contained within 
\begin_inset Formula $\MLR$
\end_inset

.
\end_layout

\begin_layout Proof
We saw in Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:mlrissigma2"

\end_inset

 that 
\begin_inset Formula $\MLR$
\end_inset

 is a 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 class,
 and hence that it is an increasing union of 
\begin_inset Formula $\Pi_{1}$
\end_inset

 classes.
 Moreover,
 
\begin_inset Formula $\MLR$
\end_inset

 has measure 1,
 and so some of these classes must have positive measure.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:mt"

\end_inset

Let 
\begin_inset Formula $S\subseteq2^{\omega}$
\end_inset

 be a set of positive measure,
 say 
\begin_inset Formula $\mu(S)\geq2^{-r}$
\end_inset

.
 Then,
 there are distinct strings 
\begin_inset Formula $y_{0}$
\end_inset

 and 
\begin_inset Formula $y_{1}$
\end_inset

 of length 
\begin_inset Formula $r+1$
\end_inset

 such that 
\begin_inset Formula $\mu(S\mid y_{i})\geq2^{-r-1}$
\end_inset

.
\end_layout

\begin_layout Proof
We know that 
\begin_inset Formula $2^{-r}\leq\mu(S)=\sum_{\length y=r}\mu(S\cap\downcl y)$
\end_inset

.
 This sum has 
\begin_inset Formula $2^{r+1}$
\end_inset

 components,
 so on average each term is at least 
\begin_inset Formula $2^{-2r-1}$
\end_inset

.
 Note also that 
\begin_inset Formula $\mu(S\mid y)=2^{\length y}\mu(S\cap\downcl y)$
\end_inset

,
 and hence
\begin_inset Formula 
\[
\sum_{\length y=r}\mu(S\mid y)\geq2,
\]

\end_inset

so the average value of 
\begin_inset Formula $\mu(S\mid y)$
\end_inset

 is 
\begin_inset Formula $2^{-r+1}$
\end_inset

.
 Thus,
 at least one such 
\begin_inset Formula $y$
\end_inset

 has 
\begin_inset Formula $\mu(S\mid y)\geq2^{-r}$
\end_inset

.
 This value of 
\begin_inset Formula $y$
\end_inset

 can contribute to the sum by at most 
\begin_inset Formula $1$
\end_inset

,
 however;
 the remaining terms must also add up to at least 
\begin_inset Formula $1$
\end_inset

,
 and so on average they have value 
\begin_inset Formula $\frac{1}{2^{r+1}-1}\geq2^{-r-1}$
\end_inset

,
 so at least one of the remaining has 
\begin_inset Formula $\mu(S\mid y)\geq2^{-r-1}$
\end_inset

,
 completing the proof.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:encodeintoQ"

\end_inset

Let 
\begin_inset Formula $Q$
\end_inset

 be a positive measure 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class.
 Then,
 
\begin_inset Formula $Q$
\end_inset

 admits members that compute arbitrary degrees,
 with at most 
\begin_inset Formula $0'$
\end_inset

 of error.
 More precisely:
 For any 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

 there is some 
\begin_inset Formula $Z\in Q$
\end_inset

 such that 
\begin_inset Formula $A\leq Z\leq A\oplus0'$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\mu(Q)\geq2^{-r_{0}}$
\end_inset

 for some 
\begin_inset Formula $r_{0}\in\N$
\end_inset

.
 Then,
 we know by Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:mt"

\end_inset

 that there are two distinct strings of length 
\begin_inset Formula $r_{0}+1$
\end_inset

 with 
\begin_inset Formula $S$
\end_inset

-density at least 
\begin_inset Formula $2^{-r_{0}-1}$
\end_inset

.
 Note that,
 since the measure of a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class can be approximated from above,
 we can in finite (but unknown) time eliminate every string with density less than 
\begin_inset Formula $2^{-r_{0}-1}$
\end_inset

.
 Define the initial segment of our 
\begin_inset Formula $Z$
\end_inset

 to be the leftmost or rightmost according to 
\begin_inset Formula $A(0)$
\end_inset

.
 Then,
 iterate this process to encode 
\begin_inset Formula $A(1)$
\end_inset

,
 
\begin_inset Formula $A(2)$
\end_inset

,
 etc.
 We can decode 
\begin_inset Formula $A$
\end_inset

 from 
\begin_inset Formula $Z$
\end_inset

 by eliminating strings of the next length until 
\begin_inset Formula $Z$
\end_inset

 is the leftmost or rightmost possible,
 and we can calculate 
\begin_inset Formula $Z$
\end_inset

 knowing 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $0'$
\end_inset

 (to tell when we have already eliminated every string with small density,
 so that we know how to proceed).
\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:encodemlr"

\end_inset

For any 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

 there is a MLR set 
\begin_inset Formula $Z$
\end_inset

 with 
\begin_inset Formula $A\leq Z\leq A\oplus0'$
\end_inset

.
\end_layout

\begin_layout Corollary
In the exercises,
 Nies presents an approximation of Kucera's original proof of this theorem.
 In the following,
 let 
\begin_inset Formula $Q$
\end_inset

 be the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class of sets 
\begin_inset Formula $A$
\end_inset

 such that,
 for all 
\begin_inset Formula $n$
\end_inset

,
 
\begin_inset Formula $K(A\upto n)\geq n$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:kucera1"

\end_inset

Given an effective enumeration 
\begin_inset Formula $\{P_{n}\}_{n\in\N}$
\end_inset

 of 
\begin_inset Formula $\Pi_{1}$
\end_inset

 classes,
 there is a constant 
\begin_inset Formula $c$
\end_inset

,
 effectively obtainable,
 such that for every 
\begin_inset Formula $n$
\end_inset

 either 
\begin_inset Formula $P_{n}\cap Q=\emptyset$
\end_inset

 or 
\begin_inset Formula $\mu(P_{n}\cap Q)\geq2^{-K(n)-c}$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $c_{0}$
\end_inset

 be the cost of describing the following algorithm (for the purposes of the optimal prefix-free machine of choice).
 By the recursion theorem,
 we may assume that the algorithm that follows may use 
\begin_inset Formula $c_{0}$
\end_inset

 in its own code,
 and moreover since the recursion theorem is effective the constant 
\begin_inset Formula $c$
\end_inset

 is effective (and will depend on the enumeration,
 because the algorithm that follows uses this enumeration).
 We will set 
\begin_inset Formula $c=c_{0}+1$
\end_inset

.
\end_layout

\begin_layout Proof
As input,
 take in a self-delimiting description 
\begin_inset Formula $n^{*}$
\end_inset

 for 
\begin_inset Formula $n$
\end_inset

,
 followed by a string 
\begin_inset Formula $\sigma$
\end_inset

 of 
\begin_inset Formula $N-c_{0}-1-\length{n^{*}}$
\end_inset

 bits,
 where 
\begin_inset Formula $N$
\end_inset

 will be described shortly.
 Then,
 decode 
\begin_inset Formula $n$
\end_inset

 out of 
\begin_inset Formula $n^{*}$
\end_inset

,
 and consider decreasing approximations of the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $P_{n}\cap Q$
\end_inset

 by clopens,
 until the measure decreases below 
\begin_inset Formula $2^{-\length{n^{*}}-c_{0}-1}$
\end_inset

 (if ever).
 Let 
\begin_inset Formula $C$
\end_inset

 be the clopen obtained by this process.
 By this point,
 let 
\begin_inset Formula $N$
\end_inset

 be large enough such that the first 
\begin_inset Formula $N$
\end_inset

 bits of a sequence determine whether the sequence is in 
\begin_inset Formula $C$
\end_inset

 or not.
 In other words,
 we may write 
\begin_inset Formula $C$
\end_inset

 as the disjoint union of basic clopens of measure 
\begin_inset Formula $2^{-N}$
\end_inset

,
 and since 
\begin_inset Formula $C$
\end_inset

 has small measure we know that there must be at most 
\begin_inset Formula $2^{N-\length{n^{*}}-c_{0}-1}$
\end_inset

 such basic clopens,
 and so we may identify any of them by our string 
\begin_inset Formula $\sigma$
\end_inset

.
\end_layout

\begin_layout Proof
Let us now see why this proves the desired result.
 Suppose that 
\begin_inset Formula $\mu(P_{n}\cap Q)<2^{-K(n)-c}$
\end_inset

 but 
\begin_inset Formula $P_{n}\cap Q$
\end_inset

 is nonempty;
 say it contains 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

.
 We show that this is a contradiction,
 by describing 
\begin_inset Formula $A\upto N$
\end_inset

 in only 
\begin_inset Formula $N$
\end_inset

 bits.
 First,
 describe the above algorithm;
 this uses 
\begin_inset Formula $c_{0}$
\end_inset

 bits.
 Then,
 input an optimal description 
\begin_inset Formula $n^{*}$
\end_inset

of 
\begin_inset Formula $n$
\end_inset

;
 this uses 
\begin_inset Formula $K(n)$
\end_inset

 bits.
 Finally,
 
\begin_inset Formula $A\upto N$
\end_inset

 will correspond to one of the possible sequences of bits because 
\begin_inset Formula $\mu(P_{n}\cap Q)<2^{-K(n)-c}=2^{-\length{n^{*}}-c_{0}-1}$
\end_inset

.
 Thus,
 we've described 
\begin_inset Formula $A\upto N$
\end_inset

 in 
\begin_inset Formula $c_{0}+K(n)+N-c_{0}-1-K(n)=N-1$
\end_inset

 bits,
 meaning that 
\begin_inset Formula $A$
\end_inset

 cannot be in 
\begin_inset Formula $Q$
\end_inset

,
 a contradiction.
\end_layout

\begin_layout Standard
It may be of interest to verify that Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:kucera1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is not a triviality.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:kucera2"

\end_inset

The 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $Q=\{A\mid\forall_{n}K(A\upto n)\geq n\}$
\end_inset

 is nonempty.
\end_layout

\begin_layout Proof
Consider the binary tree whose nodes are the strings 
\begin_inset Formula $\sigma$
\end_inset

 with 
\begin_inset Formula $K(\sigma)\geq\length{\sigma}$
\end_inset

 (and such that this property holds for every prefix of 
\begin_inset Formula $\sigma$
\end_inset

).
 We show that this tree is infinite.
 Indeed,
 if it were not,
 we could find a finite but nonzero amount of strings 
\begin_inset Formula $\{\sigma_{i}\}$
\end_inset

 
\begin_inset Quotes eld
\end_inset

just below the tree
\begin_inset Quotes erd
\end_inset

,
 such that 
\begin_inset Formula $K(\sigma_{i})<\length{\sigma_{i}}$
\end_inset

 and 
\begin_inset Formula $\sum2^{-\length{\sigma_{i}}}=1$
\end_inset

.
 This yields a contradiction,
 because
\begin_inset Formula 
\[
1=\sum2^{-\length{\sigma_{i}}}<\sum2^{-K(\sigma_{i})}=\sum2^{-K(\sigma)}\leq1.
\]

\end_inset

Thus,
 the tree is infinite and by Weak Konig's Lemma there must be a path through this tree,
 which is an element of 
\begin_inset Formula $Q$
\end_inset

.
\end_layout

\begin_layout Standard
We are now in a position to provide an alternate proof of Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:encodemlr"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:encodemlr"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\end_inset

First,
 consider that Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:kucera1"

\end_inset

 used nothing specific about the fact that the classes were indexed on the natural numbers.
 Thus,
 we may consider indexation on strings instead,
 and in particular we consider 
\begin_inset Formula $P_{x}=\downcl x$
\end_inset

 in order to obtain the following lemma:
 There is some constant 
\begin_inset Formula $c$
\end_inset

 for which either 
\begin_inset Formula $Q\cap\downcl x=\emptyset$
\end_inset

 or 
\begin_inset Formula $\mu(Q\cap\downcl x)\geq2^{-K(x)-c}$
\end_inset

.
 Moreover,
 since 
\begin_inset Formula $K(x)\leq2\log\length x+\length x+c'$
\end_inset

,
 we have for 
\begin_inset Formula $\bar{c}=c+c'$
\end_inset

 the result:
\begin_inset Formula 
\[
\text{For all \ensuremath{x}, either }Q\cap\downcl x\text{ or }\mu(Q\cap\downcl x)\geq2^{-2\log\length x-\length x-\bar{c}}.
\]

\end_inset


\end_layout

\begin_layout Proof
We use this to encode an arbitrary set into an element of 
\begin_inset Formula $Q$
\end_inset

.
 Start with the empty string (with the convention that 
\begin_inset Formula $\log0=0$
\end_inset

),
 which is on 
\begin_inset Formula $Q$
\end_inset

 by Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:kucera2"

\end_inset

.
 Thus,
 
\begin_inset Formula $\mu(Q)\geq2^{-\bar{c}}$
\end_inset

,
 so if we look at strings of depth 
\begin_inset Formula $\bar{c}+1$
\end_inset

,
 there must be at least two distinct strings 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $Q$
\end_inset

 at that depth.
 As a consequence,
 they must satisfy 
\begin_inset Formula $\mu(Q\cap\downcl x)\geq2^{-2\log(\bar{c}+1)-2\bar{c}-1}$
\end_inset

,
 so we can eliminate the strings not in 
\begin_inset Formula $Q$
\end_inset

 at that depth by approximating the measure below them.
 As such,
 we can encode a bit into the first 
\begin_inset Formula $\bar{c}+1$
\end_inset

 bits of a set by choosing the leftmost or rightmost such 
\begin_inset Formula $x$
\end_inset

.
 Then,
 we proceed with the argument from Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:encodeintoQ"

\end_inset

 to encode another bit into the following 
\begin_inset Formula $\bar{c}+2\log(\bar{c}+1)+2$
\end_inset

 bits,
 and so on.
 The same argument therein (together with the remark that we can eliminate strings not in 
\begin_inset Formula $Q$
\end_inset

) implies that there is a computable procedure to recover the bits we encoded into our set.
\end_layout

\begin_layout Section
Misc Results
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:usemlr"

\end_inset

Suppose that 
\begin_inset Formula $A$
\end_inset

 is not MLR relative to 
\begin_inset Formula $B$
\end_inset

.
 Then,
 there is a ML test 
\begin_inset Formula $\{U_{n}^{B}\}_{n\in\N}$
\end_inset

 witnessing this fact and a function 
\begin_inset Formula $f(x)$
\end_inset

,
 computable in 
\begin_inset Formula $A\oplus B$
\end_inset

,
 such that 
\begin_inset Formula $\{U_{n}^{B\upto f(n)}\}_{n\in\N}$
\end_inset

 is also an ML test witnessing this fact.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\{V_{n}^{B}\}_{n\in\N}$
\end_inset

be a ML test witnessing the fact that 
\begin_inset Formula $A$
\end_inset

 is not 
\begin_inset Formula $B$
\end_inset

-MLR.
 Define 
\begin_inset Formula $U_{n}^{C}$
\end_inset

,
 where 
\begin_inset Formula $C$
\end_inset

 is an arbitrary oracle tape,
 in the following manner:
 Enumerate an open set as given by 
\begin_inset Formula $V_{n}^{C}$
\end_inset

,
 keeping track of the corresponding measure,
 and halt execution if (but before) measure is about to exceed 
\begin_inset Formula $2^{-n}$
\end_inset

.
 Note that the open set determined by 
\begin_inset Formula $U_{n}^{B}$
\end_inset

 is the same as the one determined by 
\begin_inset Formula $V_{n}^{B}$
\end_inset

.
 As a consequence,
 
\begin_inset Formula $V_{n}^{B}$
\end_inset

 will eventually output a prefix of 
\begin_inset Formula $A$
\end_inset

,
 and we may 
\begin_inset Formula $(A\oplus B)$
\end_inset

-effectively determine when this occurs.
 Call the 
\begin_inset Formula $V_{n}^{B}$
\end_inset

-use of 
\begin_inset Formula $B$
\end_inset

 at this stage 
\begin_inset Formula $f(n)$
\end_inset

.
 This completes the proof.
\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:usemlr"

\end_inset

In the context of Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:usemlr"

\end_inset

,
 for any 
\begin_inset Formula $n$
\end_inset

 and for any 
\begin_inset Formula $M\geq f(n)$
\end_inset

,
 we have 
\begin_inset Formula $A\in U_{n}^{B\upto M}$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:mlrce"

\end_inset

Suppose that 
\begin_inset Formula $A$
\end_inset

 is MLR,
 
\begin_inset Formula $B$
\end_inset

 is a c.e.
\begin_inset space \space{}
\end_inset

set,
 and 
\begin_inset Formula $A$
\end_inset

 is not 
\begin_inset Formula $B$
\end_inset

-MLR.
 Then,
 
\begin_inset Formula $A\oplus B\geq0'$
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\{U_{n}^{B}\}_{n\in\N}$
\end_inset

 be as in Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:usemlr"

\end_inset

,
 and let 
\begin_inset Formula $\varphi$
\end_inset

 be an arbitrary partial computable function.
 Consider the (computable) ML test 
\begin_inset Formula $\{U_{n}^{B_{\varphi(n)}}\}_{n\in\N}$
\end_inset

,
 where 
\begin_inset Formula $\{B_{n}\}_{n\in\N}$
\end_inset

 is the obvious computable approximation of 
\begin_inset Formula $B$
\end_inset

,
 and if 
\begin_inset Formula $\varphi(n)\isnotwd$
\end_inset

 it is assumed that 
\begin_inset Formula $U_{n}^{B_{\varphi(n)}}=\emptyset$
\end_inset

.
 Since 
\begin_inset Formula $A$
\end_inset

 is MLR,
 we know that there is 
\begin_inset Formula $k$
\end_inset

 for which
\begin_inset Formula 
\[
n\geq k\implies A\notin U_{n}^{B_{\varphi(n)}}.
\]

\end_inset

Note that,
 
\shape italic
a priori
\shape default
,
 the fact that 
\begin_inset Formula $A$
\end_inset

 is MLR only guarantees that there exists 
\begin_inset Formula $n$
\end_inset

 for which 
\begin_inset Formula $A\notin U_{n}^{B_{\varphi(n)}}$
\end_inset

,
 but the same argument used to show that ML tests are equivalent to Solovay tests guarantees that indeed 
\begin_inset Formula $A$
\end_inset

 will be in only finitely many of these sets.
 As a consequence,
 by Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:usemlr"

\end_inset

 it must be the case that,
 for almost all 
\begin_inset Formula $n$
\end_inset

,
 
\begin_inset Formula $B_{\varphi(n)}$
\end_inset

 is correct up to strictly less than 
\begin_inset Formula $f(n)$
\end_inset

 places.
 In other words,
 
\begin_inset Formula $\varphi(n)$
\end_inset

 is dominated by the function 
\begin_inset Formula $n\mapsto\text{largest \ensuremath{t} for which \ensuremath{B_{t}\upto f(n)\neq B\upto f(n)}}$
\end_inset

.
 Thus,
 
\begin_inset Formula $A\oplus B$
\end_inset

 computes a function that dominates every partial computable function,
 which is known to imply 
\begin_inset Formula $A\oplus B\geq0'$
\end_inset

.
 (For example,
 consider 
\begin_inset Formula $\varphi(n)$
\end_inset

 to be the runtime of the 
\begin_inset Formula $n$
\end_inset

-th Turing Machine.)
\end_layout

\begin_layout Remark
Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:mlrce"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 uses the fact that 
\begin_inset Formula $B$
\end_inset

 is c.e.
\begin_inset space \space{}
\end_inset

because we require it (plus 
\begin_inset Formula $f$
\end_inset

) to compute the map 
\begin_inset Formula $n\mapsto\text{largest \ensuremath{t} for which \ensuremath{B_{t}\upto f(n)\neq B\upto f(n)}}$
\end_inset

.
 In the c.e.
\begin_inset space \space{}
\end_inset

case this agrees,
 up to an additive factor of 1,
 with the map 
\begin_inset Formula $n\mapsto\text{smallest \ensuremath{t} for which \ensuremath{B_{t}\upto f(n)=B\upto f(n)}}$
\end_inset

,
 which is in fact computable in 
\begin_inset Formula $B\oplus f$
\end_inset

,
 but generally this is not the case.
 One may think that the result could be improved by requiring,
 instead of 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $B$
\end_inset

 is c.e.
\begin_inset Quotes erd
\end_inset

,
 that 
\begin_inset Formula $B$
\end_inset

 is limit-computable and computes a modulus of convergence for itself,
 but it is a classical result (see 
\begin_inset CommandInset citation
LatexCommand cite
after "Corollary III.3.4"
key "soare1"
literal "false"

\end_inset

) that such a set is Turing equivalent to a c.e.
\begin_inset space \space{}
\end_inset

set 
\begin_inset Formula $B^{*}$
\end_inset

,
 and the statement of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:mlrce"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 does not change if 
\begin_inset Formula $B$
\end_inset

 is replaced by a Turing equivalent set,
 so no power is gained from this.
\end_layout

\begin_layout Section
Weak Randomness
\end_layout

\begin_layout Definition
A 
\emph on
Kurtz Test
\emph default
 is a uniform sequence of clopens 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

,
 given by a strong index so that membership in 
\begin_inset Formula $G_{n}$
\end_inset

 is uniformly effective,
 such that 
\begin_inset Formula $\mu(G_{n})\leq2^{-n}$
\end_inset

.
\end_layout

\begin_layout Definition
A 
\emph on
weakly random
\emph default
 set is one that passes every Kurtz test.
\end_layout

\begin_layout Remark
\begin_inset CommandInset label
LatexCommand label
name "rmk:kurtztest"

\end_inset

The requirement that 
\begin_inset Formula $\mu(G_{n})\leq2^{-n}$
\end_inset

 may be relaxed to requiring only that 
\begin_inset Formula $\mu(\cap G_{n})=0$
\end_inset

.
 This is because,
 since the measure of a clopen is uniformly computable (as a rational),
 we may turn a test that satisfies 
\begin_inset Formula $\mu(\cap G_{n})=0$
\end_inset

 into one that satisfies 
\begin_inset Formula $\hat{G}_{n}\leq2^{-n}$
\end_inset

 in a uniform manner,
 in such a way that the same class of sets passes each test.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:wrandompi1"

\end_inset

A set 
\begin_inset Formula $A$
\end_inset

 is weakly random iff it fails to be in every null 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) A 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class induces a uniform sequence of clopens whose intersection is the class itself.
 Combine this with Remark 
\begin_inset CommandInset ref
LatexCommand ref
reference "rmk:kurtztest"

\end_inset

 to get the result.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\leftarrow$
\end_inset

) A Kurtz test 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 induces a null 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class by:
 
\begin_inset Formula $P(X)\equiv\forall_{n}(X\in G_{n})$
\end_inset

 .
\end_layout

\begin_layout Standard
We show that every hyperimmune set computes a weakly random set.
\end_layout

\begin_layout Definition
A 
\emph on
weakly 1-generic set
\emph default
 is a set 
\begin_inset Formula $A\in2^{\omega}$
\end_inset

 that belongs to every dense c.e.
\begin_inset space \space{}
\end_inset

open set.
\end_layout

\begin_layout Proposition
Each hyperimmune set 
\begin_inset Formula $A$
\end_inset

 computes a weakly 1-generic set.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 be a uniform enumeration of the c.e.
\begin_inset space \space{}
\end_inset

open sets,
 and let 
\begin_inset Formula $f$
\end_inset

 be an 
\begin_inset Formula $A$
\end_inset

-computable function that witnesses the fact that 
\begin_inset Formula $A$
\end_inset

 is hyperimmune,
 by not being computably dominated.
\end_layout

\begin_layout Proof
We will use the growth property of 
\begin_inset Formula $f$
\end_inset

 in the following manner:
 Let 
\begin_inset Formula $U$
\end_inset

 be a particular 
\emph on
dense
\emph default
 open set.
 Then,
 to detect how to extend a string 
\begin_inset Formula $\sigma$
\end_inset

 to lie in 
\begin_inset Formula $U$
\end_inset

 will take some unknown amount of time,
 and it is unclear how long to wait because we might not know 
\shape italic
a priori
\shape default
 that 
\begin_inset Formula $U$
\end_inset

 is dense.
 Thus,
 we commit to taking 
\begin_inset Formula $f(\length{\sigma})$
\end_inset

 time to find an extension of 
\begin_inset Formula $\sigma$
\end_inset

 in 
\begin_inset Formula $U$
\end_inset

 or not.
 This process satisfies the following property:
 If 
\begin_inset Formula $U$
\end_inset

 is dense,
 there is a length (in fact,
 arbitrarily large lengths) for which an extension is guaranteed to be found.
 This length depends on 
\begin_inset Formula $U$
\end_inset

.
 The proof of this fact is the following:
 For a(n enumeration of a) dense open 
\begin_inset Formula $U$
\end_inset

,
 we can define a computable function 
\begin_inset Formula $\tau(n)$
\end_inset

 via
\begin_inset Formula 
\[
\tau(n)=\text{time it takes the enumeration of \ensuremath{U} to intersect all strings of length \ensuremath{n}.}
\]

\end_inset

Since 
\begin_inset Formula $f$
\end_inset

 is not computably dominated,
 there will be many values of 
\begin_inset Formula $n$
\end_inset

 for which 
\begin_inset Formula $f(n)\geq\tau(n)$
\end_inset

,
 which proves our claim about this process.
 We now proceed to the proof of the proposition.
\end_layout

\begin_layout Proof
We construct (
\begin_inset Formula $f$
\end_inset

-computably) a weakly 1-generic set by the finite extension method as follows.
 Suppose that we have already built an initial segment 
\begin_inset Formula $\sigma$
\end_inset

 of our set.
 We will,
 in parallel,
 look at all open sets 
\begin_inset Formula $U_{n}$
\end_inset

 that we have not yet gotten into.
 Consider the first one,
 say 
\begin_inset Formula $U_{m}$
\end_inset

,
 which we find to contain an extension 
\begin_inset Formula $\sigma\tau$
\end_inset

 of 
\begin_inset Formula $\sigma$
\end_inset

 (by which we mean 
\begin_inset Formula $\downcl{\sigma\tau}\subseteq U_{m}$
\end_inset

).
 Then,
 we will extend 
\begin_inset Formula $\sigma$
\end_inset

 to become 
\begin_inset Formula $\sigma\tau$
\end_inset

,
 with a twist.
 We will do this character-by-character,
 and at each step we will look at the open sets 
\begin_inset Formula $U_{<m}$
\end_inset

 to see if we can go into those instead,
 taking 
\begin_inset Formula $f(\text{current length})$
\end_inset

 at each step as outlined in the previous paragraph.
 If we find such an open set 
\begin_inset Formula $U_{i}$
\end_inset

 with 
\begin_inset Formula $i<m$
\end_inset

,
 we halt this process and restart it,
 trying to get into 
\begin_inset Formula $U_{i}$
\end_inset

 instead of 
\begin_inset Formula $U_{m}$
\end_inset

 (and still looking at opens 
\begin_inset Formula $U_{<i}$
\end_inset

 in the process).
\end_layout

\begin_layout Proof
To show that the resulting set
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There is a very minor thing to check here,
 which is that the length of the strings tends to infinity and so this does induce a well-defined set,
 but it is just a matter of considering open sets like 
\begin_inset Quotes eld
\end_inset

has a zero past the 
\begin_inset Formula $k$
\end_inset

-th position
\begin_inset Quotes erd
\end_inset

 for every 
\begin_inset Formula $k$
\end_inset

.
\end_layout

\end_inset

 
\begin_inset Formula $B$
\end_inset

 is weakly 1-generic:
 Pick a dense open set 
\begin_inset Formula $U_{n}$
\end_inset

,
 and pick a stage 
\begin_inset Formula $\sigma$
\end_inset

 by which,
 for every 
\begin_inset Formula $U_{<n}$
\end_inset

 that 
\begin_inset Formula $B$
\end_inset

 is in,
 
\begin_inset Formula $\sigma$
\end_inset

 is already in.
 Then,
 run the process and look at what happens every time the string is extended:
 We will be checking for a way to put our string inside 
\begin_inset Formula $U_{n}$
\end_inset

 every time we add a character (if 
\begin_inset Formula $B$
\end_inset

 is not already in it).
 This will eventually succeed by the claim in our second paragraph,
 and by assumption the sets of index lower than 
\begin_inset Formula $n$
\end_inset

 will not interfere with us when we shove 
\begin_inset Formula $B$
\end_inset

 inside of 
\begin_inset Formula $U_{n}$
\end_inset

,
 and so 
\begin_inset Formula $B\in U_{n}$
\end_inset

 as desired.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:w1giswr"

\end_inset

Any weakly 1-generic set is weakly random.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $X$
\end_inset

 be weakly 1-generic,
 and consider a fixed Kurtz test 
\begin_inset Formula $G_{n}$
\end_inset

.
 Consider the open set 
\begin_inset Formula $\cup G_{n}^{c}$
\end_inset

.
 It is dense because it has full measure (and every nontrivial open has positive measure).
 Then,
 
\begin_inset Formula $X\in\cup G_{n}^{c}$
\end_inset

,
 meaning 
\begin_inset Formula $X$
\end_inset

 passes an arbitrary Kurtz test and hence is weakly random.
\end_layout

\begin_layout Corollary
Any hyperimmune set computes a weakly random set.
\end_layout

\begin_layout Standard
As Nies argues,
 the resulting 
\begin_inset Quotes eld
\end_inset

random
\begin_inset Quotes erd
\end_inset

 sets do not obey some of our intuitions of randomness.
 For example,
 weakly 1-generic sets fail to uphold the law of large numbers (in a spectacular fashion,
 too).
\end_layout

\begin_layout Proposition
There is a left-c.e.
\begin_inset space \space{}
\end_inset

weakly 1-generic.
\end_layout

\begin_layout Proof
We outline a computable process to enumerate a 1-generic set from the left.
 Start with 
\begin_inset Formula $X=0^{\omega}$
\end_inset

,
 though our algorithm will be modifying 
\begin_inset Formula $X$
\end_inset

 as time goes on.
 In parallel,
 enumerate all open sets 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

.
 Each 
\begin_inset Formula $U_{n}$
\end_inset

 will try to modify 
\begin_inset Formula $\sigma$
\end_inset

 as to belong to 
\begin_inset Formula $U_{n}$
\end_inset

,
 albeit following the rules:
\end_layout

\begin_deeper
\begin_layout Itemize
(Obviously) 
\begin_inset Formula $U_{n}$
\end_inset

 can only change 
\begin_inset Formula $X$
\end_inset

 to a lexicographically greater (or equal) sequence,
\end_layout

\begin_layout Itemize
\begin_inset Formula $U_{n}$
\end_inset

 can only change 
\begin_inset Formula $X=\sigma_{0}0^{n}\sigma_{1}0^{\omega}$
\end_inset

 to 
\begin_inset Formula $\sigma_{0}0^{n}\sigma_{1}'0^{\omega}$
\end_inset

 (i.e.
\begin_inset space \space{}
\end_inset

can only perform changes past runs of 
\begin_inset Formula $n$
\end_inset

 zeros),
 and moreover it must do this under the condition that,
 for every 
\begin_inset Formula $i<n$
\end_inset

 such that the algorithm knows 
\begin_inset Formula $\sigma\in U_{i}$
\end_inset

 (or more precisely 
\begin_inset Formula $\downcl{\sigma}\subseteq U_{i}$
\end_inset

) it must be the case that 
\begin_inset Formula $\sigma_{0}\in U_{i}$
\end_inset

 already (and so 
\begin_inset Formula $X$
\end_inset

 will not be leaving 
\begin_inset Formula $U_{i}$
\end_inset

).
\end_layout

\end_deeper
\begin_layout Proof
Let 
\begin_inset Formula $X_{\infty}$
\end_inset

 be the limit set.
 We will show that 
\begin_inset Formula $X_{\infty}$
\end_inset

 is inside every dense open set.
 To see this,
 pick a dense open set 
\begin_inset Formula $U_{n}$
\end_inset

.
 Pick a stage such that 
\begin_inset Formula $X$
\end_inset

 is already known to be in every 
\begin_inset Formula $U_{<n}$
\end_inset

 that it will ever be known to be in.
 This guarantees that there is a prefix 
\begin_inset Formula $\sigma_{0}0^{n}$
\end_inset

 of 
\begin_inset Formula $X$
\end_inset

 that will never be perturbed,
 and in fact unless/until 
\begin_inset Formula $U_{n}$
\end_inset

 modifies 
\begin_inset Formula $X$
\end_inset

,
 we have an additional unperturbed 
\begin_inset Formula $0$
\end_inset

 at the end,
 giving us 
\begin_inset Formula $\sigma_{0}0^{n}0$
\end_inset

 as a prefix.
 Now,
 if 
\begin_inset Formula $U_{n}$
\end_inset

 truly is dense,
 it will eventually enumerate a string that extends 
\begin_inset Formula $\sigma_{0}0^{n}1$
\end_inset

,
 and 
\begin_inset Formula $U_{n}$
\end_inset

 has the permission to then change 
\begin_inset Formula $X$
\end_inset

 to have this prefix unfettered.
 Since no 
\begin_inset Formula $U_{<n}$
\end_inset

 will be triggered by the algorithm,
 it is guaranteed that 
\begin_inset Formula $X$
\end_inset

 never leaves 
\begin_inset Formula $U_{n}$
\end_inset

,
 completing the proof.
\end_layout

\begin_layout Proposition
A c.e.
\begin_inset space \space{}
\end_inset

set is not weakly random.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $X$
\end_inset

 be c.e.
 If 
\begin_inset Formula $X$
\end_inset

 is finite,
 it is obviously not weakly random.
 Otherwise,
 set 
\begin_inset Formula $G_{n}$
\end_inset

 to be the class of sets that have a 1 at the places corresponding to the first 
\begin_inset Formula $n$
\end_inset

 elements enumerated into 
\begin_inset Formula $X$
\end_inset

.
 This is clearly a Kurtz test that 
\begin_inset Formula $X$
\end_inset

 fails.
\end_layout

\begin_layout Standard
These past propositions show that there is a left-c.e.
\begin_inset space \space{}
\end_inset

set that fails to be c.e.
 I guess that this isn't such big news:
 The halting probability 
\begin_inset Formula $\Omega$
\end_inset

 was already known to fit the bill.
 But I guess now we have potentially weaker examples,
 though it's unclear if they are weaker in fact.
 We also now know that left-c.e.
\begin_inset space \space{}
\end_inset

is a weaker concept than c.e.
\begin_inset space \space{}
\end_inset

in that it intersects with weakly 1-generic while c.e.
\begin_inset space \space{}
\end_inset

does not.
\end_layout

\begin_layout Section
Schnorr Randomness
\end_layout

\begin_layout Definition
A Schnorr test is an ML test 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 such that 
\begin_inset Formula $\mu(G_{n})\leq2^{-n}$
\end_inset

 is a uniformly computable real.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:schnorrdefs"

\end_inset

The following definitions of Schnorr test yield the same notion of Schnorr randomness:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\mu(G_{n})\leq2^{-n}$
\end_inset

 is a uniformly computable real,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mu(G_{n})\to0$
\end_inset

 is a uniformly computable real,
\end_layout

\begin_layout Itemize
Same as the two above,
 but in fact 
\begin_inset Formula $\mu(G_{n})$
\end_inset

 is a computable sequence of rationals,
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mu(G_{n})=2^{-n}$
\end_inset

.
\end_layout

\begin_layout Itemize
All of the above,
 plus 
\begin_inset Formula $G_{n}$
\end_inset

 is a descending chain of classes.
\end_layout

\end_deeper
\begin_layout Proof
Clearly the strongest requirement is that 
\begin_inset Formula $\mu(G_{n})=2^{-n}$
\end_inset

 with 
\begin_inset Formula $G_{n}$
\end_inset

 monotone,
 and the weakest is that 
\begin_inset Formula $\mu(G_{n})\to0$
\end_inset

 as a uniformly computable sequence of reals.
 Thus,
 it suffices to show that,
 given a sequence of uniformly computable opens 
\begin_inset Formula $G_{n}$
\end_inset

 with 
\begin_inset Formula $\mu(G_{n})$
\end_inset

 uniformly computable converging to zero,
 we can construct a test 
\begin_inset Formula $\hat{G}_{n}$
\end_inset

 with 
\begin_inset Formula $\mu(\hat{G}_{n})=2^{-n}$
\end_inset

 that fails all the sets that 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 does,
 and possibly more.
 Recall that in this context,
 failing a test means being in every 
\begin_inset Formula $G_{n}$
\end_inset

.
\end_layout

\begin_layout Proof
First,
 assume WLOG that 
\begin_inset Formula $G_{n}\subseteq G_{n-1}$
\end_inset

,
 by replacing each 
\begin_inset Formula $G_{n}$
\end_inset

 with the intersection of itself with the prior.
 This may change the class of sets that fail the test,
 but it only makes the test more strict:
 If a set fails the new test,
 it already failed the previous one.
 The only thing that is not obvious that it would work is the following claim:
 
\end_layout

\begin_deeper
\begin_layout Claim
If 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 are computable opens of computable measure,
 so is 
\begin_inset Formula $A\cap B$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
Proof of claim:
 It suffices to have an algorithm that,
 given a rational 
\begin_inset Formula $\varepsilon>0$
\end_inset

,
 will return an approximation of 
\begin_inset Formula $\mu(A\cap B)$
\end_inset

 within 
\begin_inset Formula $\varepsilon$
\end_inset

 of the real value.
 To do this,
 pick a stage 
\begin_inset Formula $N$
\end_inset

 such that 
\begin_inset Formula $\mu(A_{N})$
\end_inset

 and 
\begin_inset Formula $\mu(B_{N})$
\end_inset

 are within 
\begin_inset Formula $\varepsilon/2$
\end_inset

 of the real value,
 and return 
\begin_inset Formula $\mu(A_{N}\cap B_{N})$
\end_inset

.
 This proves the claim.
\end_layout

\begin_layout Proof
Now,
 we may moreover assume that 
\begin_inset Formula $\mu(G_{n})<2^{-n}$
\end_inset

.
 This is because,
 since the test is monotone decreasing,
 we may without changing what sets pass/fail the test pass to a computable subsequence.
 Since the measures are uniformly computable we may always find a larger index such that the measure is below 
\begin_inset Formula $2^{-n}$
\end_inset

,
 completing this part of the proof.
\end_layout

\begin_layout Proof
To finish the proof of this proposition,
 we prove the following:
 Given a computable open 
\begin_inset Formula $U$
\end_inset

,
 an index for its computable measure 
\begin_inset Formula $m$
\end_inset

,
 and a rational 
\begin_inset Formula $1\geq q>m$
\end_inset

,
 we may uniformly find a computable open 
\begin_inset Formula $U'\supseteq U$
\end_inset

 whose measure is 
\begin_inset Formula $q$
\end_inset

.
 This is done as follows:
 enumerate 
\begin_inset Formula $U$
\end_inset

 as normal,
 while tracking an upper approximation 
\begin_inset Formula $q_{n}$
\end_inset

 for 
\begin_inset Formula $m$
\end_inset

.
 When this approximation dips below 
\begin_inset Formula $q$
\end_inset

,
 add some padding to the set to get the upper bound for the measure up to 
\begin_inset Formula $q$
\end_inset

 (or,
 more precisely if 
\begin_inset Formula $q$
\end_inset

 is not a dyadic rational,
 close to it from below).
 The assumption that 
\begin_inset Formula $q\leq1$
\end_inset

 ensures that this is always possible.
\end_layout

\begin_layout Proof
There are some details swept under the rug here.
 Perhaps it is easier to visualize it not as tracking an upper approximation for 
\begin_inset Formula $m$
\end_inset

,
 but rather as tracking a guarantee that no more than such-and-such measure will ever be added to 
\begin_inset Formula $U$
\end_inset

.
 But anyway,
 applying this process uniformly to 
\begin_inset Formula $G_{n}$
\end_inset

 yields the desired test,
 which is bigger (setwise) and hence fails the same sets and more.
\end_layout

\begin_layout Proof
The last hiccup is that this process might break the monotonicity,
 but we can do it carefully.
 We can adapt the construction to build 
\begin_inset Formula $U'$
\end_inset

 between 
\begin_inset Formula $U$
\end_inset

 and a previously chosen 
\begin_inset Formula $U''\supseteq U$
\end_inset

,
 so long as 
\begin_inset Formula $U''$
\end_inset

 has enough measure (namely,
 
\begin_inset Formula $q$
\end_inset

 or more).
 Thus,
 we simply perform this task,
 building 
\begin_inset Formula $\hat{G}_{n+1}$
\end_inset

 sandwiched between 
\begin_inset Formula $G_{n+1}$
\end_inset

 and 
\begin_inset Formula $\hat{G}_{n}$
\end_inset

.
 This completes the proof.
\end_layout

\begin_layout Proposition
For any particular Schnorr test 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 there is a computable set that passes it.
 Since Schnorr random implies weakly random implies noncomputable,
 we conclude that there is no universal Schnorr test.
\end_layout

\begin_layout Proof
We prove the stronger statement:
 For any computable open 
\begin_inset Formula $U$
\end_inset

 of computable measure 
\begin_inset Formula $m<1$
\end_inset

 there is a computable set that avoids 
\begin_inset Formula $U$
\end_inset

.
 Applying this to any 
\begin_inset Formula $G_{n}$
\end_inset

 with 
\begin_inset Formula $\mu(G_{n})<1$
\end_inset

 yields the desired result.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $m<1$
\end_inset

 be as above.
 Uniformly find 
\begin_inset Formula $n>0$
\end_inset

 such that 
\begin_inset Formula $m<1-2\cdot2^{-n}$
\end_inset

,
 and enumerate 
\begin_inset Formula $U$
\end_inset

 until there is less than 
\begin_inset Formula $2^{-2n}$
\end_inset

 measure left to add – let the resulting clopen by 
\begin_inset Formula $U_{\text{now}}$
\end_inset

.
 Then,
 look at all strings 
\begin_inset Formula $\sigma$
\end_inset

 of length 
\begin_inset Formula $n$
\end_inset

.
 By a pigeonhole-like principle,
 one of these strings must satisfy 
\begin_inset Formula $\mu(U_{\text{now}}\cap\downcl{\sigma})<2^{-n}(1-2\cdot2^{-n})$
\end_inset

,
 and it may be found effectively.
 In this scenario,
 we set 
\begin_inset Formula $\sigma$
\end_inset

 as a prefix of our set and proceed recursively.
 We can do this because 
\begin_inset Formula $\mu(U\cap\downcl{\sigma})$
\end_inset

 is also computable (see the Claim in the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:schnorrdefs"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

) and its measure is bounded above by
\begin_inset Formula 
\[
\mu(U\cap\downcl{\sigma})<\mu(U_{\text{now}}\cap\downcl{\sigma})+2^{-2n}<2^{-n}(1-2^{-n}),
\]

\end_inset

which is less than total,
 so the recursion works.
 Since this is done uniformly,
 we add characters to our string at each step,
 and at no finite stage are we totally engulfed by the open set 
\begin_inset Formula $U$
\end_inset

,
 this induces a computable set that is not in 
\begin_inset Formula $U$
\end_inset

.
\end_layout

\begin_layout Proposition
If 
\begin_inset Formula $Z$
\end_inset

 is Schnorr random but not MLR,
 then 
\begin_inset Formula $Z$
\end_inset

 is high.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 be a Martin-Löf test that 
\begin_inset Formula $Z$
\end_inset

 fails.
 Then,
 define the 
\begin_inset Formula $Z$
\end_inset

-computable function 
\begin_inset Formula $f(n)$
\end_inset

 via:
\begin_inset Formula 
\[
f(n)=\text{time it takes to enumerate \ensuremath{G_{n}} to find that \ensuremath{Z\in G_{n}}.}
\]

\end_inset

The claim is that 
\begin_inset Formula $f$
\end_inset

 dominates any computable total function.
 Indeed,
 let 
\begin_inset Formula $g$
\end_inset

 be a computable total function.
 To start,
 we can define a Kurtz test by
\begin_inset Formula 
\[
G_{n}^{g(n)}=\text{\ensuremath{G_{n}} enumerated for \ensuremath{g(n)} time.}
\]

\end_inset

Since 
\begin_inset Formula $Z$
\end_inset

 is weakly random,
 it must fail to be in some 
\begin_inset Formula $G_{n}^{g(n)}$
\end_inset

,
 and in fact in infinitely many,
 and so 
\begin_inset Formula $g(n)<f(n)$
\end_inset

 infinitely often.
 This proves the morally weaker result:
 If 
\begin_inset Formula $Z$
\end_inset

 is weakly random but not MLR then 
\begin_inset Formula $Z$
\end_inset

 is hyperimmune.
 The goal is now to construct a slightly more clever Schnorr test to get that 
\begin_inset Formula $g(n)<f(n)$
\end_inset

 cofinitely often.
\end_layout

\begin_layout Proof
So,
 let us define the test
\begin_inset Formula 
\[
U_{n}=\bigcup_{i>n}G_{i}^{g(i)}.
\]

\end_inset

This is a uniformly effective open,
 with 
\begin_inset Formula $\mu(U_{n})\leq\sum_{i>n}\mu(G_{i}^{g(i)})\leq\sum_{i>n}2^{-i}=2^{-n}$
\end_inset

,
 so it's a Martin-Löf test.
 But better yet,
 it is also a Schnorr test,
 because this same geometric bound allows us to compute the measure of 
\begin_inset Formula $U_{n}$
\end_inset

 to arbitrary precision 
\begin_inset Formula $\varepsilon$
\end_inset

,
 by capping off 
\begin_inset Formula $i$
\end_inset

 at a place 
\begin_inset Formula $n$
\end_inset

 where 
\begin_inset Formula $2^{-n}<\varepsilon$
\end_inset

.
 Now,
 since 
\begin_inset Formula $Z$
\end_inset

 is Schnorr random,
 it must not be in some 
\begin_inset Formula $U_{n}$
\end_inset

,
 implying that,
 for 
\begin_inset Formula $i>n$
\end_inset

,
 
\begin_inset Formula $Z\in G_{i}\setminus G_{i}^{g(i)}$
\end_inset

,
 and so 
\begin_inset Formula $f(i)>g(i)$
\end_inset

 for almost all 
\begin_inset Formula $i$
\end_inset

.
 This completes the proof.
\end_layout

\begin_layout Standard
We now provide a Kolmogorov complexity based definition of Schnorr randomness.
\end_layout

\begin_layout Definition
A computable measure machine (CMM) is a prefix-free machine 
\begin_inset Formula $M$
\end_inset

 whose halting probability is computable.
\end_layout

\begin_layout Proposition
If 
\begin_inset Formula $M$
\end_inset

 is a CMM then 
\begin_inset Formula $K_{M}$
\end_inset

 is computable on its domain.
 In other words,
 there is a program that,
 given 
\begin_inset Formula $\sigma$
\end_inset

,
 outputs 
\begin_inset Formula $K_{M}(\sigma)$
\end_inset

 if finite,
 and does not halt otherwise.
\end_layout

\begin_layout Proof
Givem 
\begin_inset Formula $\sigma$
\end_inset

,
 first try to find some input string 
\begin_inset Formula $x$
\end_inset

 such that 
\begin_inset Formula $M(x)=\sigma$
\end_inset

.
 This provides an upper bound on 
\begin_inset Formula $K_{M}(\sigma)$
\end_inset

.
 Now,
 to obtain a lower bound,
 compute all outputs of 
\begin_inset Formula $M$
\end_inset

 until we find that the halting probability is within 
\begin_inset Formula $2^{-\length x}$
\end_inset

of the real thing.
 This means that no new strings of length 
\begin_inset Formula $<\length x$
\end_inset

 will ever enter the domain of 
\begin_inset Formula $M$
\end_inset

.
 Thus,
 out of all of them (including 
\begin_inset Formula $x$
\end_inset

),
 whichever is the smallest one that outputs 
\begin_inset Formula $x$
\end_inset

 on 
\begin_inset Formula $M$
\end_inset

 is the shortest possible description.
\end_layout

\begin_layout Proposition
From a CMM 
\begin_inset Formula $M$
\end_inset

 and its halting probability 
\begin_inset Formula $\Omega_{M}$
\end_inset

 we may effectively obtain a CMM 
\begin_inset Formula $N$
\end_inset

 with halting probability 1 and 
\begin_inset Formula $K_{N}\leq K_{M}$
\end_inset

.
\end_layout

\begin_layout Proof
Apply the KC theorem.
 On one hand,
 enumerate the pairs 
\begin_inset Formula $(M(x),\length x)$
\end_inset

 for every value of 
\begin_inset Formula $x$
\end_inset

 on which 
\begin_inset Formula $M(x)$
\end_inset

 halts.
 In parallel,
 track an upper bound for 
\begin_inset Formula $\Omega_{M}$
\end_inset

,
 and add garbage to the domain to pad it out to 1.
\end_layout

\begin_layout Proposition
Let 
\begin_inset Formula $M$
\end_inset

 be a CMM.
 Then,
 we can compute from 
\begin_inset Formula $r$
\end_inset

 a strong index for the set 
\begin_inset Formula $\{y\mid K_{M}(y)\leq r\}$
\end_inset

.
\end_layout

\begin_layout Proof
Brute force 
\begin_inset Formula $M$
\end_inset

 on every input until you see that the halting probability is within less than 
\begin_inset Formula $2^{-r}$
\end_inset

 of the real thing.
 From now on,
 no new inputs of length 
\begin_inset Formula $r$
\end_inset

 or less may enter the domain of 
\begin_inset Formula $M$
\end_inset

,
 and so everything whose complexity is 
\begin_inset Formula $r$
\end_inset

 or less has already been seen.
 Collect all of those into an array,
 and you're done.
\end_layout

\begin_layout Theorem
A set 
\begin_inset Formula $Z$
\end_inset

 is Schnorr random iff for every CMM 
\begin_inset Formula $M$
\end_inset

 there is a constant 
\begin_inset Formula $b$
\end_inset

 such that 
\begin_inset Formula $K_{M}(Z\upto n)\geq n-b$
\end_inset

 for every 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Proof
(
\begin_inset Formula $\rightarrow$
\end_inset

) Let 
\begin_inset Formula $M$
\end_inset

 be a CMM,
 and define
\begin_inset Formula 
\[
R_{b}^{M}=\{\sigma\mid K_{M}(\sigma)<\length{\sigma}-b\}.
\]

\end_inset

This is a uniform open for the same reason as always,
 and the same reasoning as for ML tests shows that 
\begin_inset Formula $\mu(R_{b}^{M})\leq2^{-b}$
\end_inset

,
 but let us show that it is in fact a Schnorr test.
 Let's say that we wish to know the measure of 
\begin_inset Formula $R_{b}^{M}$
\end_inset

 within some tolerance 
\begin_inset Formula $\varepsilon$
\end_inset

.
 We first brute force the inputs of 
\begin_inset Formula $M$
\end_inset

 until the halting probability is within 
\begin_inset Formula $\varepsilon$
\end_inset

 of the real thing.
 Then,
 by this point 
\begin_inset Formula $R_{b}^{M}$
\end_inset

 will not be able to increase a lot:
\begin_inset Formula 
\[
\sum_{\text{\ensuremath{\sigma} new}}2^{-\length{\sigma}}\leq2^{-b}\sum2^{-K_{M}(\sigma)},
\]

\end_inset

and since the leftover 
\begin_inset Formula $\sigma$
\end_inset

 correspond to at most 
\begin_inset Formula $\varepsilon$
\end_inset

 measure on the domain of 
\begin_inset Formula $M$
\end_inset

,
 this is bounded from above by 
\begin_inset Formula $2^{-b}\varepsilon$
\end_inset

.
\end_layout

\begin_layout Proof
It is obvious that if 
\begin_inset Formula $Z$
\end_inset

 is Schnorr random,
 for every CMM 
\begin_inset Formula $M$
\end_inset

 it will pass the above test,
 meaning it will fail to be in some 
\begin_inset Formula $R_{b}^{M}$
\end_inset

,
 implying the desired result.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Proof
(
\begin_inset Formula $\leftarrow$
\end_inset

) Let 
\begin_inset Formula $Z$
\end_inset

 be a test that fails some Schnorr test 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

.
 We use this to construct a CMM 
\begin_inset Formula $M$
\end_inset

 for which the Kolmogorov complexity of 
\begin_inset Formula $Z$
\end_inset

 is not always big.
\end_layout

\begin_layout Proof
We apply the KC theorem.
 Passing to a subsequence,
 assume WLOG that 
\begin_inset Formula $\mu(G_{n})\leq2^{-2n}$
\end_inset

.
 For each 
\begin_inset Formula $G_{n}$
\end_inset

 pick a set of generators 
\begin_inset Formula $\{\sigma_{ni}\}_{i\in I}$
\end_inset

 and add 
\begin_inset Formula $\sigma_{ni}$
\end_inset

 with weight 
\begin_inset Formula $-n+\length{\sigma_{ni}}+1$
\end_inset

.
 The weights add up as follows
\begin_inset Formula 
\[
\sum_{n,i}2^{n-\length{\sigma_{ni}}-1}=\sum_{n}\frac{1}{2}2^{n}\mu(G_{n})\leq\sum2^{-n-1}=1,
\]

\end_inset

so the KC theorem applies.
 Moreover,
 the measure of the domain is 
\begin_inset Formula $\frac{1}{2}\sum\mu(G_{n})$
\end_inset

,
 which is a computable number.
 (We could also have assumed that 
\begin_inset Formula $\mu(G_{n})=2^{-2n}$
\end_inset

 to get measure exactly one.) Finally,
 since 
\begin_inset Formula $Z$
\end_inset

 is in every 
\begin_inset Formula $G_{n}$
\end_inset

,
 it has as initial segments 
\begin_inset Formula $\sigma_{ni}$
\end_inset

 for arbitrarily large values of 
\begin_inset Formula $n$
\end_inset

,
 and these prefixes give (for 
\begin_inset Formula $N=\length{\sigma_{ni}}$
\end_inset

)
\begin_inset Formula 
\[
K_{M}(Z\upto N)=K_{M}(\sigma_{ni})=N+1-n,
\]

\end_inset

which concludes the proof.
\end_layout

\begin_layout Proposition
If 
\begin_inset Formula $Z$
\end_inset

 is Schnorr random then it satisfies the law of large numbers.
\end_layout

\begin_layout Standard
The way that this is done for ML randomness is to show that sequences that don't satisfy the LLN are pretty rare,
 by the Chernoff inequalities.
 Then,
 we piggyback on a result that,
 if an event is rare enough (namely,
 happens with cubically decreasing probability in length) and computable enough (c.e.) then no ML sequence satisfies this property in the limit.
 We focus on extending this result to Schnorr randomness,
 and it will prove this result.
\end_layout

\begin_layout Lemma
Let 
\begin_inset Formula $P$
\end_inset

 be a computable property of strings such that,
 for some constant 
\begin_inset Formula $c$
\end_inset

,
 for every 
\begin_inset Formula $n\in\N$
\end_inset

 we have
\begin_inset Formula 
\[
\frac{\text{number of strings of length \ensuremath{n} that satisfy \ensuremath{P}}}{2^{n}}\leq\frac{c}{n^{2}}.
\]

\end_inset

Then,
 only finitely many prefixes of a Schnorr random set satisfy 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Proof
We build a CMM 
\begin_inset Formula $M$
\end_inset

 that lets us describe strings that satisfy 
\begin_inset Formula $P$
\end_inset

 easily.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $M(\sigma)$
\end_inset

 work as follows.
 First,
 read off a length 
\begin_inset Formula $n$
\end_inset

 using 
\begin_inset Formula $\log n+2\log\log n$
\end_inset

 bits.
 Then,
 write a string of around 
\begin_inset Formula $\log(c2^{n}n^{-2})\approx n+c'-2\log n$
\end_inset

 bits to say which of the 
\begin_inset Formula $\leq c2^{n}n^{-2}$
\end_inset

 strings that satisfy 
\begin_inset Formula $P$
\end_inset

 of this length are;
 since the property is computable we can enumerate them lexicographically and output whatever we want for the leftover identifiers.
 This describes such strings of length 
\begin_inset Formula $n$
\end_inset

 in 
\begin_inset Formula $n-\log n+2\log\log n+O(1)$
\end_inset

 bits,
 which is sublinear.
 It remains to show that 
\begin_inset Formula $M$
\end_inset

 is CMM.
 The measure of its domain is
\begin_inset Formula 
\[
\sum_{n}2^{\log n-2\log\log n-n-c'}=2^{-c'}\sum\frac{n}{2^{n}(\log n)^{2}},
\]

\end_inset

which is a computable number because the terms are bounded by any geometric series that decays faster than 
\begin_inset Formula $2^{-n}$
\end_inset

.
\end_layout

\begin_layout Section
Weak 2-Randomness
\end_layout

\begin_layout Standard
The first intuition would be that weak 2-randomness would be the following two things:
\end_layout

\begin_layout Itemize
Weakly random relative to 
\begin_inset Formula $0'$
\end_inset

,
\end_layout

\begin_layout Itemize
Belongs to every null 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class.
\end_layout

\begin_layout Standard
However,
 as we will see,
 these concepts do not coincide.
 Weak 2-randomness refers to the latter,
 though we will define it in a third natural way.
\end_layout

\begin_layout Definition
A 
\emph on
generalized ML test
\emph default
 is a uniform sequence of computable opens 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 such that 
\begin_inset Formula $\mu(G_{n})\to0$
\end_inset

.
 A weakly 2-random is a set that passes all generalized ML tests.
\end_layout

\begin_layout Remark
\begin_inset CommandInset label
LatexCommand label
name "rmk:w2rtests"

\end_inset

We could have defined a generalized ML test instead as requiring 
\begin_inset Formula $\mu(\cap G_{n})=0$
\end_inset

.
 This yields a different notion of test,
 but not a different notion of weak 2-randomness,
 because we may replace a test 
\begin_inset Formula $G_{n}$
\end_inset

 by a monotone decreasing test in which case the requirements 
\begin_inset Formula $\mu(\cap G_{n})=0$
\end_inset

 and 
\begin_inset Formula $\mu(G_{n})\to0$
\end_inset

 are equivalent.
\end_layout

\begin_layout Proposition
A set is weakly 2-random iff it avoids every null 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class.
\end_layout

\begin_layout Proof
Remark 
\begin_inset CommandInset ref
LatexCommand ref
reference "rmk:w2rtests"

\end_inset

,
 plus the observation that a 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class is the same as a uniform intersection of 
\begin_inset Formula $\Sigma_{1}$
\end_inset

 classes,
 i.e.
 a uniform intersection of computable opens.
\end_layout

\begin_layout Standard
We show that this notion relativizes as would be expected.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:w2rrelative"

\end_inset

A set is weakly 2-random relative to 
\begin_inset Formula $0^{(n)}$
\end_inset

 iff it avoids every null 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class.
\end_layout

\begin_layout Proof
By definition,
 a set is weakly 2-random relative to 
\begin_inset Formula $0^{(n)}$
\end_inset

 iff it belongs to every null 
\begin_inset Formula $\Pi_{2}^{0^{(n)}}$
\end_inset

 class.
 Every such class is a 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class,
 which proves the implication (
\begin_inset Formula $\leftarrow$
\end_inset

).
\end_layout

\begin_layout Proof
Now,
 let us prove (
\begin_inset Formula $\rightarrow$
\end_inset

).
 Suppose that 
\begin_inset Formula $Z$
\end_inset

 is a weakly 2-random set relative to 
\begin_inset Formula $0^{(n)}$
\end_inset

,
 and let 
\begin_inset Formula $P$
\end_inset

 be a null 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class.
 Then,
 we may write
\begin_inset Formula 
\[
P=\bigcap_{x}Q_{x},
\]

\end_inset

with each 
\begin_inset Formula $Q_{x}$
\end_inset

 a 
\begin_inset Formula $\Sigma_{n+1}$
\end_inset

 class,
 and with 
\begin_inset Formula $\mu(Q_{x})\to0$
\end_inset

.
 I proved in a separate document that there is a 
\begin_inset Formula $0^{(n)}$
\end_inset

-effective way to turn a 
\begin_inset Formula $\Sigma_{n+1}$
\end_inset

 class 
\begin_inset Formula $Q_{x}$
\end_inset

 into a 
\begin_inset Formula $\Sigma_{1}^{0^{(n)}}$
\end_inset

 class without increasing the measure more than a chosen parameter 
\begin_inset Formula $\varepsilon$
\end_inset

,
 so we may construct a 
\begin_inset Formula $\Pi_{2}^{0^{(n)}}$
\end_inset

class 
\begin_inset Formula $P'\supseteq P$
\end_inset

 that is also a null class.
 Since 
\begin_inset Formula $Z$
\end_inset

 is weakly 2-random,
 it must not be in 
\begin_inset Formula $P'$
\end_inset

,
 and hence is not in 
\begin_inset Formula $P$
\end_inset

,
 as desired.
\end_layout

\begin_layout Remark
\begin_inset CommandInset label
LatexCommand label
name "rmk:weaklyrandomweak"

\end_inset

Let us observe something about the proof of (
\begin_inset Formula $\rightarrow$
\end_inset

) in Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:w2rrelative"

\end_inset

.
 Essential therein was the fact that there is a 
\begin_inset Formula $0^{(n)}$
\end_inset

-effective way to turn a 
\begin_inset Formula $\Sigma_{n+1}$
\end_inset

 class into a 
\begin_inset Formula $\Sigma_{1}^{0^{(n)}}$
\end_inset

 class without increasing its size too much.
 Let us see what fails if the hypothesis was instead that our set was weakly random relative to 
\begin_inset Formula $0^{(n+1)}$
\end_inset

.
 Then,
 we would need to turn a 
\begin_inset Formula $\Sigma_{n+1}$
\end_inset

 class into a 
\begin_inset Formula $0^{(n+1)}$
\end_inset

 clopen without increasing its size too much,
 but this is clearly impossible in general because we could have started with a dense 
\begin_inset Formula $\Sigma_{n+1}$
\end_inset

 class of measure less than one.
\end_layout

\begin_layout Remark
More generally,
 for the proof to be able to relate weakly 
\begin_inset Formula $0^{(n+1)}$
\end_inset

-random with avoiding every null 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class,
 we would need to turn a null 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class into a null 
\begin_inset Formula $\Pi_{1}^{0^{(n+1)}}$
\end_inset

 class containing it,
 which again is impossible if the 
\begin_inset Formula $\Pi_{n+2}$
\end_inset

 class we started with happens to be dense:
 for instance,
 the set of sequences with finitely many ones.
\end_layout

\begin_layout Standard
We show that one cannot work around the issues outlined in Remark 
\begin_inset CommandInset ref
LatexCommand ref
reference "rmk:weaklyrandomweak"

\end_inset

.
\end_layout

\begin_layout Proposition
There exists a set 
\begin_inset Formula $Z$
\end_inset

 that is weakly random relative to 
\begin_inset Formula $0'$
\end_inset

 without being weakly 2-random,
 and in fact without even being Schnorr random.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $Z$
\end_inset

 be weakly 1-generic relative to 
\begin_inset Formula $0'$
\end_inset

.
 By relativization of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:w1giswr"

\end_inset

,
 
\begin_inset Formula $Z$
\end_inset

 is weakly random relative to 
\begin_inset Formula $0'$
\end_inset

.
 In particular,
 
\begin_inset Formula $Z$
\end_inset

 is weakly 1-generic (relative to 
\begin_inset Formula $0$
\end_inset

) and hence fails the law of large numbers.
 Thus,
 it cannot be Schnorr random.
\end_layout

\begin_layout Proposition
A 
\begin_inset Formula $0'$
\end_inset

-computable set is not weakly 2-random.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $Z$
\end_inset

 be 
\begin_inset Formula $0'$
\end_inset

-computable.
 Then it is 
\begin_inset Formula $\Delta_{2}$
\end_inset

,
 hence 
\begin_inset Formula $\Pi_{2}$
\end_inset

,
 hence 
\begin_inset Formula $\{Z\}$
\end_inset

 is a (null) 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class,
 yielding a generalized ML test that 
\begin_inset Formula $Z$
\end_inset

 fails.
\end_layout

\begin_layout Corollary
There is no universal generalized ML test.
\end_layout

\begin_layout Proof
This statement is equivalent to saying:
 For any null 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class 
\begin_inset Formula $P$
\end_inset

 there is a non weakly 2-random set outside of 
\begin_inset Formula $P$
\end_inset

.
 The reason for this is that any nonempty 
\begin_inset Formula $\Sigma_{2}$
\end_inset

 class 
\begin_inset Formula $Q$
\end_inset

 (in particular,
 any measure 1 such class) admits a left-c.e.
\begin_inset space \space{}
\end_inset

member.
 To see this,
 write 
\begin_inset Formula $Q=\cup Q_{n}$
\end_inset

;
 since 
\begin_inset Formula $Q$
\end_inset

 is nonempty,
 some 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $Q_{n}$
\end_inset

 must be nonempty.
 The Kreisel basis theorem asserts that the leftmost path of 
\begin_inset Formula $Q_{n}$
\end_inset

 is left-c.e,
 and this is easy to show:
 We may see 
\begin_inset Formula $Q_{n}$
\end_inset

 as the set of paths of a computable binary tree,
 and consider a computer program that brute forces through the paths of this tree always greedily choosing the leftmost one.
\end_layout

\begin_layout Theorem
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Hyperimmune-free Basis Theorem
\end_layout

\end_inset

Any nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class admits a hyperimmune-free element.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $S$
\end_inset

 be a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class,
 and 
\begin_inset Formula $e$
\end_inset

 an index for an oracle program.
 We construct a nonempty 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class 
\begin_inset Formula $\hat{S}\subseteq S$
\end_inset

 such that,
 for every 
\begin_inset Formula $X\in\hat{S}$
\end_inset

,
 either 
\begin_inset Formula $\varphi_{e}^{X}$
\end_inset

 is nontotal or it is computably dominated.
 This is performed (
\begin_inset Formula $0''$
\end_inset

-computably) as follows.
 We first ask:
 Is there 
\begin_inset Formula $X\in S$
\end_inset

 for which 
\begin_inset Formula $\varphi_{e}^{X}$
\end_inset

 is nontotal?
 If so,
 pick an element 
\begin_inset Formula $x$
\end_inset

 for which 
\begin_inset Formula $\varphi_{e}^{X}(x)\isnotwd$
\end_inset

,
 and set 
\begin_inset Formula $\hat{S}$
\end_inset

 to be the class of elements 
\begin_inset Formula $Y$
\end_inset

 of 
\begin_inset Formula $S$
\end_inset

 for which 
\begin_inset Formula $\varphi_{e}^{Y}(x)\isnotwd$
\end_inset

,
 which is a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class because asking that 
\begin_inset Formula $\varphi_{e}^{Y}(x)\isnotwd$
\end_inset

 is expressible as:
 For all time,
 this computation hasn't halted in this much time.
\end_layout

\begin_layout Proof
Now,
 let us think about the case where 
\begin_inset Formula $\varphi_{e}^{X}$
\end_inset

 is total for every 
\begin_inset Formula $X\in S$
\end_inset

.
 By compactness,
 this implies that for every 
\begin_inset Formula $x$
\end_inset

 there are finitely many strings covering 
\begin_inset Formula $S$
\end_inset

 for which 
\begin_inset Formula $\varphi_{e}^{\sigma}(x)$
\end_inset

 halts,
 which means that we may computably brute force through all possibilities for what 
\begin_inset Formula $\varphi_{e}^{X}(x)$
\end_inset

 converges to.
 This gives us a computable bound.
\end_layout

\begin_layout Corollary
There exists a hyperimmune-free MLR set.
\end_layout

\begin_layout Proof
Apply the Hyperimmune-free Basis Theorem to the 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class of sets 
\begin_inset Formula $A$
\end_inset

 with 
\begin_inset Formula $\forall_{n}K(A\upto n)\geq n$
\end_inset

.
 (It is not too hard to prove that this class is nonempty,
 but even if it were,
 replace 
\begin_inset Formula $\geq n$
\end_inset

 by 
\begin_inset Formula $\geq n-b$
\end_inset

 for some large 
\begin_inset Formula $b$
\end_inset

.)
\end_layout

\begin_layout Proposition
Any hyperimmune-free weakly random set 
\begin_inset Formula $Z$
\end_inset

 is weakly 2-random.
\end_layout

\begin_layout Proof
Suppose 
\begin_inset Formula $Z$
\end_inset

 is hyperimmune-free but not weakly 2-random.
 Then,
 there is a generalized ML test 
\begin_inset Formula $\{G_{n}\}_{n\in\N}$
\end_inset

 for which 
\begin_inset Formula $Z$
\end_inset

 is in all 
\begin_inset Formula $G_{n}$
\end_inset

.
 Consider the 
\begin_inset Formula $Z$
\end_inset

-computable function that finds how long one needs to enumerate 
\begin_inset Formula $G_{n}$
\end_inset

 for to find 
\begin_inset Formula $Z\in G_{n}$
\end_inset

.
 This function is majorized by some computable function 
\begin_inset Formula $f$
\end_inset

,
 which means that 
\begin_inset Formula $\{G_{n}^{f(n)}\}_{n\in\N}$
\end_inset

 is a Kurtz test that 
\begin_inset Formula $Z$
\end_inset

 also fails.
 Thus,
 
\begin_inset Formula $Z$
\end_inset

 is not weakly random.
\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:hyperimmunew2r"

\end_inset

There exists a hyperimmune-free weakly 2-random set.
\end_layout

\begin_layout Section
2-Randomness and Initial Segment Complexity
\end_layout

\begin_layout Definition
A set 
\begin_inset Formula $Z$
\end_inset

 is said to satisfy 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 if it satisfies the property:
\begin_inset Formula 
\begin{equation}
\text{There is a \ensuremath{b} for which, for infinitely many \ensuremath{n}, we have }C(Z\upto n)\geq n-b.\tag{\ensuremath{\star}}\label{eq:star}
\end{equation}

\end_inset


\begin_inset CommandInset counter
LatexCommand addto
counter "equation"
value "-1"
lyxonly "true"

\end_inset


\end_layout

\begin_layout Definition
We will show that 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is equivalent to 2-randomness,
 i.e.
 MLR rel 
\begin_inset Formula $0'$
\end_inset

.
 First,
 following Nies,
 we prove two weaker results.
\end_layout

\begin_layout Proposition
If a set 
\begin_inset Formula $Z$
\end_inset

 satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 then 
\begin_inset Formula $Z$
\end_inset

 is MLR.
\end_layout

\begin_layout Proof
We show that if infinitely many prefixes of 
\begin_inset Formula $Z$
\end_inset

 are 
\begin_inset Formula $C$
\end_inset

-incompressible then all of them are 
\begin_inset Formula $K$
\end_inset

-incompressible,
 albeit with some change to the constant term.
 Intuitively,
 if some prefix 
\begin_inset Formula $z$
\end_inset

 had a short 
\begin_inset Formula $K$
\end_inset

-description,
 say 
\begin_inset Formula $K(z)=\length z-N$
\end_inset

,
 then for any prefix 
\begin_inset Formula $zy$
\end_inset

 of 
\begin_inset Formula $Z$
\end_inset

 we have 
\begin_inset Formula $C(zy)\leq K(z)+\length y+c$
\end_inset

,
 where 
\begin_inset Formula $c$
\end_inset

 is the cost of encoding 
\begin_inset Quotes eld
\end_inset

first read off this self-delimiting description,
 then read off this collection of bits
\begin_inset Quotes erd
\end_inset

.
 Since 
\begin_inset Formula $K(z)\leq\length z-N$
\end_inset

,
 this gives 
\begin_inset Formula $C(zy)\leq\length{zy}+c-N$
\end_inset

,
 which by property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 implies 
\begin_inset Formula $c-N\geq-b$
\end_inset

,
 hence 
\begin_inset Formula $N\leq c+b$
\end_inset

.
 This places an upper bound on how 
\begin_inset Formula $K$
\end_inset

-compressible the prefixes of 
\begin_inset Formula $Z$
\end_inset

 can be.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:3randomstar"

\end_inset

If 
\begin_inset Formula $Z$
\end_inset

 is 3-random then 
\begin_inset Formula $Z$
\end_inset

 satisfies property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Proof
Let us try the first thing that pops to mind:
 Write property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 down carefully and see if it looks like a ML test in some degree.
 So,
 how would we write this property?
 We would say:
 
\begin_inset Formula 
\[
\exists_{b}\forall_{k}\exists_{n>k}\forall_{\sigma\text{ of length \ensuremath{n-b} or less}}\forall_{t}(V(\sigma)\text{ halts in \ensuremath{t} time}\implies V(\sigma)\neq Z\upto n).
\]

\end_inset

So,
 to satisfy property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is to 
\emph on
not
\emph default
 be in one of the following classes:
\begin_inset Formula 
\[
V_{b}=\{A\mid\exists_{k}\forall_{n>k}\exists_{\sigma\text{ of length \ensuremath{n-b} or less}}(V(\sigma)\iswd=A\upto n)\}.
\]

\end_inset

Each of these is a 
\begin_inset Formula $\Sigma_{3}$
\end_inset

 class,
 so by one of the several classifications of ML tests for 
\begin_inset Formula $n$
\end_inset

-randomness it suffices to estimate 
\begin_inset Formula $\mu(V_{b})$
\end_inset

.
 We do this by a rough counting argument.
\end_layout

\begin_layout Proof
First,
 look at the class 
\begin_inset Formula $Q_{bn}=\{A\mid C(A\upto n)\leq n-b\}$
\end_inset

.
 What is its measure?
 Well,
 this is a clopen (whether a set is in 
\begin_inset Formula $Q_{bn}$
\end_inset

 or not is determined by its first 
\begin_inset Formula $n$
\end_inset

 bits) and we may estimate its measure by bounding how many strings of size 
\begin_inset Formula $n$
\end_inset

 have descriptions of length 
\begin_inset Formula $n-b$
\end_inset

 or less.
 Well,
 there are at most 
\begin_inset Formula $2^{n-b+1}$
\end_inset

 such descriptions,
 and each such string contributes measure 
\begin_inset Formula $2^{-n}$
\end_inset

,
 so we have 
\begin_inset Formula $\mu(Q_{bn})\leq2^{-b+1}$
\end_inset

.
 Now,
 
\begin_inset Formula $V_{b}=\cup_{k}\cap_{n>k}Q_{bn}$
\end_inset

,
 and monotony properties tell us
\begin_inset Formula 
\[
\mu(V_{b})=\lim_{k}\mu(\cap_{n>k}Q_{bn})\leq\lim_{k}\mu(Q_{k+1})\leq\lim_{k}2^{-b+1}=2^{-b+1}.
\]

\end_inset

Thus,
 
\begin_inset Formula $V_{b}$
\end_inset

 really does form a ML test for 3-randomness,
 so a 3-random set fails to be in some 
\begin_inset Formula $V_{b}$
\end_inset

,
 and thus satisfies Property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Standard
We now work towards extending the above reasoning to 
\begin_inset Quotes eld
\end_inset

one degree less
\begin_inset Quotes erd
\end_inset

,
 in order to show that a 2-random set also satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 Let us look specifically at the classes 
\begin_inset Formula $Q_{bn}$
\end_inset

 that we made use of.
 These are 
\begin_inset Formula $\Sigma_{1}$
\end_inset

 classes,
 and we proceeded to make a ML test 
\begin_inset Formula $V_{b}$
\end_inset

 that is two quantifier alternations above 
\begin_inset Formula $Q_{bn}$
\end_inset

,
 hence making 
\begin_inset Formula $V_{b}$
\end_inset

 a 
\begin_inset Formula $\Sigma_{3}$
\end_inset

 test.
 Another way to see this is that 
\begin_inset Formula $V_{b}$
\end_inset

 was a 
\begin_inset Formula $d'$
\end_inset

-enumerable ML test,
 where 
\begin_inset Formula $d$
\end_inset

 is the degree that uniformly enumerates the classes 
\begin_inset Formula $Q_{bn}$
\end_inset

,
 namely 
\begin_inset Formula $d=0'$
\end_inset

.
 Now,
 the idea is to replace the classes 
\begin_inset Formula $Q_{bn}$
\end_inset

 by another collection,
 say 
\begin_inset Formula $\tilde{Q}_{bn}$
\end_inset

,
 that is computable in a low degree 
\begin_inset Formula $d$
\end_inset

,
 and thus would make the corresponding classes 
\begin_inset Formula $\tilde{V}_{b}$
\end_inset

 be uniformly enumerable in 
\begin_inset Formula $d'=0'$
\end_inset

,
 yielding a 
\begin_inset Formula $0'$
\end_inset

-enumerable ML test.
\end_layout

\begin_layout Standard
In order to construct this collection 
\begin_inset Formula $\tilde{Q}_{bn}$
\end_inset

,
 Nies considers the notion of 
\emph on
compression function
\emph default
.
 An example of a compression function is the map 
\begin_inset Formula $x\mapsto x^{*}$
\end_inset

,
 where 
\begin_inset Formula $x^{*}$
\end_inset

 is the shortest 
\begin_inset Formula $C$
\end_inset

-description of 
\begin_inset Formula $x$
\end_inset

.
 A compression function is any (injective) map that does as well as this or better.
\end_layout

\begin_layout Definition
A 
\emph on
compression function
\emph default
 
\begin_inset Formula $F$
\end_inset

 is an injective map 
\begin_inset Formula $2^{<\omega}\to2^{<\omega}$
\end_inset

 such that 
\begin_inset Formula $\length{F(x)}\leq C(x)$
\end_inset

 for all 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:starF"

\end_inset

If 
\begin_inset Formula $Z$
\end_inset

 is MLR relative to 
\begin_inset Formula $F'$
\end_inset

 then it satisfies the analogue of Property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

:
\begin_inset Formula 
\begin{equation}
\text{There is a \ensuremath{b} for which, for infinitely many \ensuremath{n}, we have \ensuremath{\length{F(Z\upto n)}\geq n-b}}\tag{\ensuremath{\star F}}\label{eq:starF}
\end{equation}

\end_inset


\end_layout

\begin_layout Proposition
\begin_inset CommandInset counter
LatexCommand addto
counter "equation"
value "-1"
lyxonly "true"

\end_inset


\end_layout

\begin_layout Proof
One applies a similar argument to that used in the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:3randomstar"

\end_inset

,
 though some care must be taken.
 First,
 one defines the classes
\begin_inset Formula 
\[
V_{b}=\{A\mid\exists_{k}\forall_{n>k}\length{F(A\upto n)}<n-b\}.
\]

\end_inset

We would like to use these as an 
\begin_inset Formula $F'$
\end_inset

-computable ML test for 
\begin_inset Formula $Z$
\end_inset

,
 but this is not necessarily the case,
 as we would need the ability to solve the halting problem on 
\begin_inset Formula $F$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

,
 not just 
\begin_inset Formula $F$
\end_inset

,
 to determine whether 
\begin_inset Formula $A$
\end_inset

 is in 
\begin_inset Formula $V_{b}$
\end_inset

.
 Thus,
 we reproduce the proof that any e.g.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\Sigma_{3}$
\end_inset

 class may be approximated by a 
\begin_inset Formula $0''$
\end_inset

-computable open.
\end_layout

\begin_layout Proof
Write 
\begin_inset Formula $V_{b}=\cup_{k}\cap_{n>k}\{A\mid F(A\upto n)<n-b\}$
\end_inset

.
 We will show that there is a uniformly 
\begin_inset Formula $F'$
\end_inset

-computable way to approximate the class 
\begin_inset Formula $Q_{bk}=\cap_{n>k}\{A\mid F(A\upto n)<n-b\}$
\end_inset

 from above within desired error,
 which by considering geometrically decreasing errors will allow us to approximate 
\begin_inset Formula $V_{b}$
\end_inset

 from above within arbitrary error using 
\begin_inset Formula $F'$
\end_inset

.
 To approximate 
\begin_inset Formula $Q_{bk}$
\end_inset

 from above,
 note that the answer to the question 
\begin_inset Quotes eld
\end_inset

will 
\begin_inset Formula $Q_{bk}$
\end_inset

 decrease in measure by more than 
\begin_inset Formula $\varepsilon$
\end_inset

 after this amount of time?
\begin_inset Quotes erd
\end_inset

 is a Halting Problem type question,
 which 
\begin_inset Formula $F'$
\end_inset

 can answer.
\end_layout

\begin_layout Proof
So,
 let 
\begin_inset Formula $\tilde{V}_{b}$
\end_inset

 be a close approxination of 
\begin_inset Formula $V_{b}$
\end_inset

,
 within error 
\begin_inset Formula $2^{-b}$
\end_inset

,
 say.
 The same counting argument used in the proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:3randomstar"

\end_inset

 (this is where injectivity of 
\begin_inset Formula $F$
\end_inset

 is used) shows that 
\begin_inset Formula $\mu(V_{b})\leq2^{-b+1}$
\end_inset

,
 and so 
\begin_inset Formula $\mu(\tilde{V}_{b})\leq3\cdot2^{-b}$
\end_inset

.
 This means that 
\begin_inset Formula $\tilde{V}_{b}$
\end_inset

 may be used as an 
\begin_inset Formula $F'$
\end_inset

-computable ML test,
 hence 
\begin_inset Formula $Z$
\end_inset

 must fail to be in some 
\begin_inset Formula $\tilde{V}_{b}$
\end_inset

,
 hence 
\begin_inset Formula $Z$
\end_inset

 must fail to be in some 
\begin_inset Formula $V_{b}$
\end_inset

,
 and finally for the corresponding 
\begin_inset Formula $b$
\end_inset

 we have that 
\begin_inset Formula $Z$
\end_inset

 satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:starF"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 completing the proof.
\end_layout

\begin_layout Standard
The most obvious compression function is the map 
\begin_inset Formula $x\mapsto x^{*}$
\end_inset

 described above,
 but this is not computationally optimal,
 as it has all the computational power of the Halting Problem.
\end_layout

\begin_layout Proposition
The compression function 
\begin_inset Formula $x\mapsto x^{*}$
\end_inset

 computes 
\begin_inset Formula $0'$
\end_inset

.
 In fact,
 plain Kologorov complexity 
\begin_inset Formula $x\mapsto C(x)$
\end_inset

 computes 
\begin_inset Formula $0'$
\end_inset

.
\end_layout

\begin_layout Proof
We define a machine 
\begin_inset Formula $M(x)$
\end_inset

 as follows.
 By the recursion theorem,
 let 
\begin_inset Formula $d$
\end_inset

 be the coding constant of 
\begin_inset Formula $M$
\end_inset

.
 Given 
\begin_inset Formula $x$
\end_inset

,
 execute the 
\begin_inset Formula $x$
\end_inset

-th Turing machine 
\begin_inset Formula $P_{x}$
\end_inset

 until it halts;
 let 
\begin_inset Formula $h(x)$
\end_inset

 be the corresponding runtime (if applicable).
 Now,
 look at all strings of length 
\begin_inset Formula $\length x+d+2$
\end_inset

 and approximate their plain complexity in 
\begin_inset Formula $h(x)$
\end_inset

 time.
 By a counting argument,
 at least one of them will have (approximate) complexity at least 
\begin_inset Formula $\length x+d$
\end_inset

;
 define 
\begin_inset Formula $M(x)$
\end_inset

 as that one.
\end_layout

\begin_layout Proof
We shall now use this machine,
 together with 
\begin_inset Formula $C$
\end_inset

,
 to solve the Halting Problem.
 Indeed,
 suppose that we wish to determine whether 
\begin_inset Formula $P_{x}$
\end_inset

 halts.
 If it does,
 the string 
\begin_inset Formula $\sigma=M(x)$
\end_inset

 must satisfy all the following properties:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\length{\sigma}=\length x+d+2$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $C(\sigma)=C(M(x))\leq d+\length x$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $C_{\text{runtime of \ensuremath{P_{x}}}}(\sigma)>\length x+d$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
As a consequence,
 the runtime of 
\begin_inset Formula $P_{x}$
\end_inset

 (if it halts) is strictly less than the time it takes the complexity of all strings of size 
\begin_inset Formula $\length x+d+2$
\end_inset

 to stabilize,
 which may be computed from 
\begin_inset Formula $C$
\end_inset

.
 This may be used to solve the Halting problem,
 which concludes the proof.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
There is no computable compression function.
\end_layout

\begin_layout Proposition
A compression function 
\begin_inset Formula $F$
\end_inset

 cannot be computable.
\end_layout

\begin_layout Proof
Let us define 
\begin_inset Formula $H(n)$
\end_inset

 as the following computable function,
 with 
\begin_inset Formula $n$
\end_inset

 a number input in binary:
 In some canonical way,
 find a string 
\begin_inset Formula $\sigma$
\end_inset

 such that 
\begin_inset Formula $\length{F(\sigma)}>n$
\end_inset

.
 Then,
 
\begin_inset Formula $C(H(n))\leq d+\log n$
\end_inset

,
 but yet,
 
\begin_inset Formula $C(H(n))\geq\length{F(H(n))}>n$
\end_inset

.
 These two inequalities are incompatible for large values of 
\begin_inset Formula $n$
\end_inset

,
 yielding a contradiction.
\end_layout

\begin_layout Standard
Nevertheless,
 Nies proves that there is a compression function that is close to computable.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:lowcompression"

\end_inset

There is a low compression function 
\begin_inset Formula $F$
\end_inset

.
\end_layout

\begin_layout Proof
The class of compression functions lives in a computably bounded subset of Baire space 
\begin_inset Formula $\omega^{\omega}$
\end_inset

,
 and it is moreover described by a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 property:
\begin_inset Formula 
\[
\forall_{x}\forall_{\sigma}\forall_{t}(U^{t}(\sigma)\iswd=x\implies\length{F(x)}\leq\length{\sigma})\,\land\,\text{\ensuremath{F} is injective (which is \ensuremath{\Pi_{1}})}
\]

\end_inset

so by the version of the Low Basis Theorem for computably bounded Baire space,
 there must exist a low compression function.
\end_layout

\begin_layout Corollary
Any 2-random set satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $Z$
\end_inset

 is 2-random,
 then it is random relative to 
\begin_inset Formula $0'=F'$
\end_inset

,
 where 
\begin_inset Formula $F$
\end_inset

 is a low compression function.
 Thus,
 by Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:starF"

\end_inset

,
 
\begin_inset Formula $Z$
\end_inset

 satisfies property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "prop:starF"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 and since by definition of compression function we have 
\begin_inset Formula $C(Z\upto n)\geq\length{F(Z\upto n)}$
\end_inset

,
 this implies property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Standard
Let us now prove the opposite direction.
 We start from the assumption that 
\begin_inset Formula $Z$
\end_inset

 is not 2-random,
 i.e.
\begin_inset space \space{}
\end_inset

that most of its prefixes cannot be efficiently compressed by a prefix-free machine even with the use of an oracle for the Halting Problem,
 and we prove that infinitely many of its prefixes are not compressible by a plain machine.
 The basic idea consists of the following:
 A computation that uses the Halting Problem is the same as a computation in the limit – let 
\begin_inset Formula $U(\sigma,t)$
\end_inset

 be the universal 
\begin_inset Quotes eld
\end_inset

limit prefix-free machine
\begin_inset Quotes erd
\end_inset

 (it's only prefix-free in its first input,
 for every value of 
\begin_inset Formula $t$
\end_inset

) and suppose that 
\begin_inset Formula $Z\upto n=\lim_{t}U(\sigma,t)$
\end_inset

 only for long strings 
\begin_inset Formula $\sigma$
\end_inset

.
 Now,
 we consider a computable (not limit) plain machine process where we encode 
\begin_inset Formula $\sigma$
\end_inset

,
 together with a long string 
\begin_inset Formula $\tau$
\end_inset

,
 such that 
\begin_inset Formula $\tau$
\end_inset

 encodes a large amount of bits in itself,
 but also its length encodes how long we must compute 
\begin_inset Formula $U(\sigma,t)$
\end_inset

 for in order for it to converge to the desired result.
 Summarizing:
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:cxy"

\end_inset

There is a constant 
\begin_inset Formula $c$
\end_inset

 such that,
 for all 
\begin_inset Formula $x$
\end_inset

,
 for almost all 
\begin_inset Formula $y$
\end_inset

,
 (or equivalently,
 for all long enough 
\begin_inset Formula $y$
\end_inset

)
\begin_inset Formula 
\[
C(xy)\leq K^{0'}(x)+\length y+c.
\]

\end_inset


\end_layout

\begin_layout Proof
Consider the following machine.
 Take as input a string 
\begin_inset Formula $\sigma'$
\end_inset

,
 and decompose it as 
\begin_inset Formula $\sigma y$
\end_inset


\emph on
 for 
\begin_inset Formula $\sigma$
\end_inset

 shorter than 
\begin_inset Formula $y$
\end_inset


\emph default
.
 There will be many ways to decompose this,
 but for each of them you see if 
\begin_inset Formula $U(\sigma,\length y)$
\end_inset

 halts.
 For the first such decomposition that you find,
 you output 
\begin_inset Formula $U(\sigma,\length y)y$
\end_inset

.
\end_layout

\begin_layout Proof
We show that,
 for a given 
\begin_inset Formula $\sigma$
\end_inset

,
 for large enough 
\begin_inset Formula $y$
\end_inset

 there will only be one such decomposition.
 Let 
\begin_inset Formula $T$
\end_inset

 be the time it takes 
\begin_inset Formula $U(\sigma,t)$
\end_inset

 to stabilize,
 and consider 
\begin_inset Formula $\sigma y$
\end_inset

 of total length 
\begin_inset Formula $\geq2T$
\end_inset

.
 Then,
 for any decomposition of 
\begin_inset Formula $\sigma y$
\end_inset

 as 
\begin_inset Formula $\tilde{\sigma}\tilde{y}$
\end_inset

,
 with 
\begin_inset Formula $\tilde{y}$
\end_inset

 longer than 
\begin_inset Formula $\tilde{\sigma}$
\end_inset

,
 we necessarily have 
\begin_inset Formula $\length{\tilde{y}}\geq T$
\end_inset

.
 Thus,
 since 
\begin_inset Formula $U(\sigma,\length{\tilde{y}})$
\end_inset

 is well-defined and each 
\begin_inset Formula $t$
\end_inset

-section of 
\begin_inset Formula $U$
\end_inset

 is prefix free,
 it must be the case that 
\begin_inset Formula $U(\tilde{\sigma},\length{\tilde{y}})$
\end_inset

 is not well-defined unless 
\begin_inset Formula $\tilde{\sigma}=\sigma$
\end_inset

,
 which completes the proof of this uniqueness.
\end_layout

\begin_layout Proof
This basically concludes the proof:
 If 
\begin_inset Formula $\sigma$
\end_inset

 is a shortest 
\begin_inset Formula $0'$
\end_inset

-description of 
\begin_inset Formula $x$
\end_inset

,
 the above machine provides descriptions of 
\begin_inset Formula $xy$
\end_inset

,
 for large 
\begin_inset Formula $y$
\end_inset

,
 of length 
\begin_inset Formula $\length{\sigma}+\length y+c$
\end_inset

,
 as desired.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:starimplies2r"

\end_inset

If 
\begin_inset Formula $Z$
\end_inset

 satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:starF"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 then 
\begin_inset Formula $Z$
\end_inset

 is 2-random.
\end_layout

\begin_layout Proof
Suppose 
\begin_inset Formula $Z$
\end_inset

 satisfies 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 In other words,
 there is a 
\begin_inset Formula $b$
\end_inset

 for which for infinitely many 
\begin_inset Formula $n$
\end_inset

 we have 
\begin_inset Formula $C(Z\upto n)\geq n-b$
\end_inset

.
 Now,
 pick any prefix 
\begin_inset Formula $x$
\end_inset

 of 
\begin_inset Formula $Z$
\end_inset

,
 say 
\begin_inset Formula $x=Z\upto n$
\end_inset

,
 and consider 
\begin_inset Formula $N$
\end_inset

 large enough,
 for which 
\begin_inset Formula $C(Z\upto N)\geq N-b$
\end_inset

),
 but also chosen so that 
\begin_inset Formula $Z\upto N=xy$
\end_inset

 with 
\begin_inset Formula $y$
\end_inset

 large enough to satisfy Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:cxy"

\end_inset

.
 Then,
\begin_inset Formula 
\[
N-b\leq C(Z\upto N)\leq K^{0'}(x)+N-\length x+c,
\]

\end_inset

which may be rearranged into 
\begin_inset Formula $K^{0'}(Z\upto n)\geq n-b-c$
\end_inset

.
 Since the prefix was chosen arbitrarily,
 this proves that 
\begin_inset Formula $Z$
\end_inset

 is 1-random relative to 
\begin_inset Formula $0'$
\end_inset

,
 i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $Z$
\end_inset

 is 2-random.
\end_layout

\begin_layout Standard
We will now use the tools we've just developed to prove that every 2-random set is hyperimmune – compare with Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:hyperimmunew2r"

\end_inset

,
 where we constructed a hyperimmune-free weakly 2-random set.
 First,
 we improve Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:cxy"

\end_inset

:
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:2rmachine"

\end_inset

There is a (fixed) total machine 
\begin_inset Formula $M$
\end_inset

 for which,
 for all 
\begin_inset Formula $x$
\end_inset

,
 for almost all 
\begin_inset Formula $y$
\end_inset

,
\begin_inset Formula 
\[
C_{M}(xy)\leq K^{0'}(x)+\length y.
\]

\end_inset


\end_layout

\begin_layout Proof
Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:cxy"

\end_inset

 constructs a machine 
\begin_inset Formula $M$
\end_inset

 that serves this purpose,
 with the only caveat being totality.
 However,
 we may modify 
\begin_inset Formula $U(\sigma,t)$
\end_inset

 to only execute for 
\begin_inset Formula $t$
\end_inset

 time and output an error code if the computation has not halted in this amount of time.
 This modified version yields a total machine 
\begin_inset Formula $M$
\end_inset

 (as long as we establish some fixed error code to output in the case that 
\begin_inset Formula $U(\sigma,\length y)$
\end_inset

 does not halt for any appropriate decomposition 
\begin_inset Formula $\sigma y$
\end_inset

 of the input).
\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:2rtfae"

\end_inset

Let 
\begin_inset Formula $Z\in2^{\omega}$
\end_inset

 and 
\begin_inset Formula $M$
\end_inset

 the machine from Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:2rmachine"

\end_inset

.
 TFAE:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Z$
\end_inset

 is 2-random,
\end_layout

\begin_layout Itemize
There is 
\begin_inset Formula $b$
\end_inset

 such that,
 for infinitely many 
\begin_inset Formula $n$
\end_inset

,
 
\begin_inset Formula $C(Z\upto n)\geq n-b$
\end_inset

 (this is Property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

),
\end_layout

\begin_layout Itemize
There is 
\begin_inset Formula $b$
\end_inset

 such that,
 for infinitely many 
\begin_inset Formula $n$
\end_inset

,
 
\begin_inset Formula $C_{M}(Z\upto n)\geq n-b$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
The equivalence between the first two has already been established.
 The second implies the third because 
\begin_inset Formula $C_{M}\geq C-O(1)$
\end_inset

.
 The third implies 2-randomness by the same argument as in Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:starimplies2r"

\end_inset

,
 where 
\begin_inset Formula $C$
\end_inset

 is replaced by 
\begin_inset Formula $C_{M}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
We use Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:2rtfae"

\end_inset

 to prove that any 2-random set is hyperimmune.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:2rhyperimmune"

\end_inset

A 2-random set computes a function that is not dominated by any computable function.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $Z$
\end_inset

 be 2-random,
 let 
\begin_inset Formula $M$
\end_inset

 be the machine from Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:2rmachine"

\end_inset

 together with the value of 
\begin_inset Formula $b$
\end_inset

 corresponding to 
\begin_inset Formula $Z$
\end_inset

,
 and set 
\begin_inset Formula $f(m)$
\end_inset

 to be the 
\begin_inset Formula $m$
\end_inset

-th value of 
\begin_inset Formula $n$
\end_inset

 for which 
\begin_inset Formula $C_{M}(Z\upto n)\geq n-b$
\end_inset

.
 We claim that 
\begin_inset Formula $f$
\end_inset

 is not majorized by any computable function,
 by showing that for any 
\begin_inset Formula $g\geq f$
\end_inset

 there is a 
\begin_inset Formula $g'$
\end_inset

-computable 2-random set.
\end_layout

\begin_layout Proof
Suppose that 
\begin_inset Formula $g\geq f$
\end_inset

,
 and build a set 
\begin_inset Formula $Y$
\end_inset

 in finite increments.
 We want each new prefix 
\begin_inset Formula $\sigma$
\end_inset

 of 
\begin_inset Formula $Y$
\end_inset

 to satisfy 
\begin_inset Formula $C_{M}(\sigma)\geq\length{\sigma}-b$
\end_inset

,
 but we want to be careful not to run into dead ends.
 To this effect,
 we require that 
\begin_inset Formula $\sigma$
\end_inset

 may be extended to 
\begin_inset Formula $\sigma'>\sigma$
\end_inset

 that also satisfies 
\begin_inset Formula $C_{M}(\sigma')\geq\length{\sigma}-b$
\end_inset

,
 and that 
\begin_inset Formula $\sigma'$
\end_inset

 may itself be extended in this manner,
 and so on.
 This property – of being indefinitely extendable in this way – is not necessarily easy to compute in general,
 but if we put bounds on how far we're willing to search for these extensions (such as,
 say,
 
\begin_inset Formula $g$
\end_inset

...),
 then it becomes computable in the jump.
\end_layout

\begin_layout Proof
More precisely:
 We consider the 
\begin_inset Formula $g$
\end_inset

-co-c.e.
\begin_inset space \space{}
\end_inset

question:
 Given 
\begin_inset Formula $\sigma$
\end_inset

,
 my 
\begin_inset Formula $n$
\end_inset

-th prefix,
 do there exist 
\begin_inset Formula $\sigma=\sigma_{n}<\sigma_{n+1}<\sigma_{n+2}<\dots$
\end_inset

 of length 
\begin_inset Formula $\length{\sigma_{i}}\leq g(i)$
\end_inset

,
 for which 
\begin_inset Formula $C_{M}(\sigma_{i})\geq\length{\sigma_{i}}-b$
\end_inset

?
 This question is co-c.e.
 because,
 if the answer is 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

,
 there must exist a maximal number of times we may extend 
\begin_inset Formula $\sigma$
\end_inset

 while retaining this property,
 and for each particular number of extensions there is a finite search space.
 Thus,
 this question may be answered by 
\begin_inset Formula $g'$
\end_inset

.
\end_layout

\begin_layout Proof
Now,
 since 
\begin_inset Formula $Z$
\end_inset

 exists and 
\begin_inset Formula $g\geq f$
\end_inset

,
 the answer for 
\begin_inset Formula $\sigma_{0}=\emptystring$
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

.
 Moreover,
 
\begin_inset Formula $g'$
\end_inset

 may given such a string find an extension for which the answer is also 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

,
 so 
\begin_inset Formula $g'$
\end_inset

 may iteratively find extensions 
\begin_inset Formula $\sigma_{0}<\sigma_{1}<\sigma_{2}<\dots$
\end_inset

 that converge to a set 
\begin_inset Formula $Y$
\end_inset

 that will therefore be 2-random.
\end_layout

\begin_layout Proof
If such a computable 
\begin_inset Formula $g$
\end_inset

 existed,
 we would then have a 
\begin_inset Formula $0'$
\end_inset

-computable 2-random.
 This is absurd,
 which completes the proof.
\end_layout

\begin_layout Remark
Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:2rhyperimmune"

\end_inset

 actually constructs a function that is not dominated by any 
\emph on
low
\emph default
 function,
 not just computable.
 I do not know how much stronger this is.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
The proof of Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:2rhyperimmune"

\end_inset

 was purposefully done in a 
\begin_inset Quotes eld
\end_inset

hands-on
\begin_inset Quotes erd
\end_inset

 way,
 but it may be seen as a combination of very standard techniques.
 First,
 one induces from 
\begin_inset Formula $g$
\end_inset

 (assumed computable for simplicity of notation) a 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class
\begin_inset Formula 
\[
P(X)\equiv\forall_{x}\exists_{y\leq g(x)}^{x}C_{M}(X\upto y)\geq y-b.
\]

\end_inset

The existence of 
\begin_inset Formula $g$
\end_inset

 is used to dominate the inner quantifier;
 otherwise,
 this would be a 
\begin_inset Formula $\Pi_{2}$
\end_inset

 class.
 Then,
 one notices that this class is nonempty because it contains 
\begin_inset Formula $Z$
\end_inset

 (this is where 
\begin_inset Formula $g\geq f$
\end_inset

 is used),
 and so this class must contain a 
\begin_inset Formula $0'$
\end_inset

-computable element 
\begin_inset Formula $Y$
\end_inset

.
 (In fact,
 it must contain a left-c.e.
\begin_inset space \space{}
\end_inset

element,
 as well as a low element,
 but these are overkill for our purposes).
 Such a 
\begin_inset Formula $Y$
\end_inset

 cannot be 2-random,
 and yet every element of 
\begin_inset Formula $P$
\end_inset

 satisfies property 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:star"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 and is therefore 2-random,
 a contradiction.
\end_layout

\begin_layout Remark
We can extract from this reasoning a property of 2-randomness that contrasts wildly from Martin-Löf randomness.
 While there are nontrivial 
\begin_inset Formula $\Pi_{1}$
\end_inset

 classes composed entirely of 1-randoms,
 the same is not true of 2-randoms (and indeed,
 weak 2-randoms):
\end_layout

\begin_layout Proposition
A 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class whose elements are all weakly 2-random must be empty.
\end_layout

\begin_layout Standard
We finish this section with a mostly unrelated result (because it is an exercise in Nies):
\end_layout

\begin_layout Proposition
There exists a low compression function for 
\begin_inset Formula $K$
\end_inset

,
 that is,
 a low injective function 
\begin_inset Formula $F\colon2^{<\omega}\to2^{<\omega}$
\end_inset

 such that 
\begin_inset Formula $\sum_{\sigma}2^{-\length{F(\sigma)}}\leq1$
\end_inset

 and,
 for all 
\begin_inset Formula $\sigma$
\end_inset

,
 
\begin_inset Formula $\length{F(\sigma)}\leq K(\sigma)$
\end_inset

.
\end_layout

\begin_layout Proof
Similar to Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:lowcompression"

\end_inset

,
 consider the following 
\begin_inset Formula $\Pi_{1}$
\end_inset

 class (in Baire space) which is composed entirely of compression functions:
\begin_inset Formula 
\[
P(F)\equiv\forall_{\sigma}(\length{F(\sigma)}\leq K(\sigma))\land\sum2^{-\length{F(\sigma)}}\leq1\land\text{\ensuremath{F} is injective}.
\]

\end_inset

(This is 
\begin_inset Formula $\Pi_{1}$
\end_inset

 because both 
\begin_inset Formula $x\leq K(y)$
\end_inset

,
 
\begin_inset Formula $\sum_{i\in I}x_{i}\leq1$
\end_inset

,
 and injectivity are co-c.e.
\begin_inset space \space{}
\end_inset

properties.) Moreover,
 this class is computably bounded because for any 
\begin_inset Formula $F\in P$
\end_inset

 we have 
\begin_inset Formula $\length{F(\sigma)}\leq c+\length{\sigma}$
\end_inset

,
 and it is nonempty because 
\begin_inset Formula $K$
\end_inset

 is in it.
 Thus,
 the Low Basis Theorem applies and we get the existence of a low element of this class.
\end_layout

\begin_layout Section
2-Randomness and Being Low for 
\begin_inset Formula $\Omega$
\end_inset


\end_layout

\begin_layout Definition
\begin_inset FormulaMacro
\newcommand{\Low}{\mathop{{\rm Low}}}
\end_inset

A set 
\begin_inset Formula $A$
\end_inset

 is 
\emph on
low for 
\begin_inset Formula $\Omega$
\end_inset


\emph default
 if 
\begin_inset Formula $\Omega$
\end_inset

 is MLR relative to 
\begin_inset Formula $A$
\end_inset

.
 The class of sets that are low for 
\begin_inset Formula $\Omega$
\end_inset

 are denoted 
\begin_inset Formula $\Low(\Omega)$
\end_inset

.
\end_layout

\begin_layout Standard
It is not obvious that this does not depend on the choice of prefix-free machine,
 but Nies says he will talk about that in Chapter 10.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:lowforomega"

\end_inset

The following two statements hold:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

label=(
\backslash
alph*)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "enu:lowforomega1"

\end_inset


\begin_inset Formula $\Low(\Omega)$
\end_inset

 is closed downward under Turing reducibility,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:lowforomega2"

\end_inset

If 
\begin_inset Formula $A$
\end_inset

 is low for 
\begin_inset Formula $\Omega$
\end_inset

 then 
\begin_inset Formula $A'\equiv A\oplus0'$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:lowforomega1"

\end_inset

 Given sets 
\begin_inset Formula $A\leq B$
\end_inset

 such that 
\begin_inset Formula $B$
\end_inset

 is low for 
\begin_inset Formula $\Omega$
\end_inset

,
 we notice that the ML tests that 
\begin_inset Formula $A$
\end_inset

 can produce can all be produced by 
\begin_inset Formula $B$
\end_inset

.
 Since 
\begin_inset Formula $B$
\end_inset

 is low for 
\begin_inset Formula $\Omega$
\end_inset

,
 
\begin_inset Formula $\Omega$
\end_inset

 must pass all those tests,
 and so passes all the tests produced by 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:lowforomega2"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 The inequality 
\begin_inset Formula $\geq$
\end_inset

 is always true,
 so we show that 
\begin_inset Formula $A\oplus0'$
\end_inset

 computes 
\begin_inset Formula $A'$
\end_inset

 or,
 equivalently,
 that 
\begin_inset Formula $A\oplus\Omega$
\end_inset

 computes 
\begin_inset Formula $A'$
\end_inset

.
 We will do this by using 
\begin_inset Formula $\Omega$
\end_inset

 to compute a function that grows faster than any chosen 
\begin_inset Formula $A$
\end_inset

-computable partial function 
\begin_inset Formula $\varphi$
\end_inset

,
 which (by applying to the 
\begin_inset Quotes eld
\end_inset

runtime of a program
\begin_inset Quotes erd
\end_inset

 function) implies that it,
 joined with 
\begin_inset Formula $A$
\end_inset

,
 computes 
\begin_inset Formula $A'$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
look at terms like 
\begin_inset Quotes eld
\end_inset

uniform domination
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

almost everywhere domination
\begin_inset Quotes erd
\end_inset

 (related?)
\end_layout

\end_inset


\end_layout

\begin_layout Proof
So,
 let 
\begin_inset Formula $\varphi$
\end_inset

 be a partial 
\begin_inset Formula $A$
\end_inset

-computable function.
 From it,
 define an 
\begin_inset Formula $A$
\end_inset

-computable ML test as follows:
 
\begin_inset Formula $U_{n}$
\end_inset

 is generated by the strings 
\begin_inset Formula $\sigma_{nk}$
\end_inset

,
 with 
\begin_inset Formula $k\in\N$
\end_inset

,
 and in turn these strings are obtained by simulating 
\begin_inset Formula $\Omega$
\end_inset

 for 
\begin_inset Formula $\varphi(k)$
\end_inset

 time (if it halts) and outputting the 
\begin_inset Formula $k+n$
\end_inset

 first bits obtained in this manner.
 It is easy to see that the output really is an 
\begin_inset Formula $A$
\end_inset

-ML test.
\end_layout

\begin_layout Proof
Now,
 we know that 
\begin_inset Formula $\Omega$
\end_inset

 is 
\begin_inset Formula $A$
\end_inset

-MLR,
 so it must fail to be in some 
\begin_inset Formula $U_{n}$
\end_inset

.
 This means that every one of the prefixes output by the previous program is wrong.
 Thus,
 the (
\begin_inset Formula $\Omega$
\end_inset

-computable) function 
\begin_inset Formula 
\[
f(k)=\text{time it takes the first \ensuremath{k} bits of \ensuremath{\Omega} to stabilize}
\]

\end_inset

must be greater than 
\begin_inset Formula $\varphi(k)+n$
\end_inset

 for every value of 
\begin_inset Formula $k$
\end_inset

 for which 
\begin_inset Formula $\varphi(k)$
\end_inset

 is defined,
 which completes the proof.
\end_layout

\begin_layout Proposition
A set is 2-random iff it is MLR and low for 
\begin_inset Formula $\Omega$
\end_inset

.
\end_layout

\begin_layout Proof
A set 
\begin_inset Formula $Z$
\end_inset

 is 2-random iff it's MLR relative to 
\begin_inset Formula $0'$
\end_inset

 iff it's MLR relative to 
\begin_inset Formula $\Omega$
\end_inset

 which,
 by van Lambalgen's Theorem (and the fact that 
\begin_inset Formula $\Omega$
\end_inset

 is MLR),
 is equivalent to requiring that 
\begin_inset Formula $Z$
\end_inset

 is MLR and 
\begin_inset Formula $\Omega$
\end_inset

 is MLR rel 
\begin_inset Formula $Z$
\end_inset

.
 This finishes the proof.
\end_layout

\begin_layout Corollary
\begin_inset Formula $\Omega^{0'}\in\Low(\Omega)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Corollary
The 2-random sets are closed downward inside 
\begin_inset Formula $\MLR$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:2rjump"

\end_inset

Any 2-random set 
\begin_inset Formula $Z$
\end_inset

 satisfies 
\begin_inset Formula $Z'\equiv Z\oplus0'$
\end_inset

.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
tell denis to send me errata
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We strengthen Corollary 
\begin_inset CommandInset ref
LatexCommand ref
reference "cor:2rjump"

\end_inset

.
 A more direct proof may be found in Theorem 8.14.1 of 
\begin_inset CommandInset citation
LatexCommand cite
key "algrand_downey_hirschfeldt"
literal "false"

\end_inset

.
\end_layout

\begin_layout Proposition
The following three statements are true for all 
\begin_inset Formula $n\geq1$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

label=(
\backslash
alph*)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "enu:3n1"

\end_inset

A set 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random iff 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $(n-1)$
\end_inset

-random and 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-low for 
\begin_inset Formula $\Omega^{0^{(n-1)}}$
\end_inset

 (i.e.
\begin_inset space \space{}
\end_inset


\begin_inset Formula $\Omega^{0^{(n-1)}}$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random relative to 
\begin_inset Formula $Z$
\end_inset

),
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:3n2"

\end_inset

If 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random then 
\begin_inset Formula $Z^{(n-1)}\equiv Z\oplus0^{(n-1)}$
\end_inset

,
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:3n3"

\end_inset

Van Lambalgen's theorem holds for 
\begin_inset Formula $n$
\end_inset

-randomness,
 i.e:
 
\begin_inset Formula $A\oplus B$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random iff 
\begin_inset Formula $A$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random and 
\begin_inset Formula $B$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random rel 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
We prove these results simultaneously by induction on 
\begin_inset Formula $n$
\end_inset

.
 All of these results are already established for 
\begin_inset Formula $n=1$
\end_inset

,
 so we proceed to do the induction step.
 Assume that all these results have been proven for a given value of 
\begin_inset Formula $n$
\end_inset

,
 and we shall prove them for 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout Proof
We start by proving 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:3n1"

\end_inset

.
 A set 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $(n+1)$
\end_inset

-random iff it is MLR relative to 
\begin_inset Formula $0^{(n)}$
\end_inset

 iff it is MLR relative to 
\begin_inset Formula $\Omega^{0^{(n-1)}}\oplus0^{(n-1)}$
\end_inset

 iff it is 
\begin_inset Formula $n$
\end_inset

-random relative to 
\begin_inset Formula $\Omega^{0^{(n-1)}}$
\end_inset

.
 By van Lambalgen's theorem for 
\begin_inset Formula $n$
\end_inset

 (which is part of our induction hypothesis),
 this happens iff 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random and 
\begin_inset Formula $n$
\end_inset

-low for 
\begin_inset Formula $\Omega^{0^{(n-1)}}$
\end_inset

.
\end_layout

\begin_layout Proof
Next,
 we prove 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:3n2"

\end_inset

.
 By relativizing Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:lowforomega"

\end_inset

,
 we conclude:
 If 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $X$
\end_inset

-low for 
\begin_inset Formula $\Omega^{X}$
\end_inset

 then 
\begin_inset Formula $(Z\oplus X)'\equiv Z\oplus X'$
\end_inset

.
 Applying this to 
\begin_inset Formula $X=0^{(n-1)}$
\end_inset

,
 we get that if 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-low for 
\begin_inset Formula $\Omega^{0^{(n-1)}}$
\end_inset

 then 
\begin_inset Formula $(Z\oplus0^{(n-1)})'\equiv Z\oplus0^{(n)}$
\end_inset

.
 Finally,
 if 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $(n+1)$
\end_inset

-random then it is 
\begin_inset Formula $n$
\end_inset

-low for 
\begin_inset Formula $\Omega^{(n-1)}$
\end_inset

,
 so 
\begin_inset Formula $(Z\oplus0^{(n-1)})'\equiv Z\oplus0^{(n)}$
\end_inset

,
 and moreover 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random,
 hence by IH the left-hand side is the same as 
\begin_inset Formula $Z^{(n)}$
\end_inset

,
 which provides the desired result.
\end_layout

\begin_layout Proof
Finally,
 we prove 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:3n3"

\end_inset

.
 The relativization of van Lambalgen's theorem for Martin-Löf randomness is:
 
\begin_inset Formula $A\oplus B$
\end_inset

 is 
\begin_inset Formula $(n+1)$
\end_inset

-random iff 
\begin_inset Formula $A$
\end_inset

 is 
\begin_inset Formula $(n+1)$
\end_inset

-random and 
\begin_inset Formula $B$
\end_inset

 is random rel 
\begin_inset Formula $A\oplus0^{(n)}$
\end_inset

.
 Item 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:3n2"

\end_inset

 for 
\begin_inset Formula $n+1$
\end_inset

 (which we just proved) immediately gives us that 
\begin_inset Formula $A^{(n)}\equiv A\oplus0^{(n)}$
\end_inset

 ,
 hence randomness rel 
\begin_inset Formula $A\oplus0^{(n)}$
\end_inset

 is equivalent to 
\begin_inset Formula $(n+1)$
\end_inset

-randomness rel 
\begin_inset Formula $A$
\end_inset

,
 which concludes the proof.
\end_layout

\begin_layout Standard
Finally,
 we solve and generalize a couple exercises from Nies' book.
\end_layout

\begin_layout Proposition
\begin_inset FormulaMacro
\newcommand{\symmetricdifference}{\mathbin{\triangle}}
\end_inset

If 
\begin_inset Formula $Z$
\end_inset

 is 
\begin_inset Formula $n$
\end_inset

-random and 
\begin_inset Formula $A$
\end_inset

 is 
\begin_inset Formula $\Delta_{n}$
\end_inset

 then 
\begin_inset Formula $Z\symmetricdifference A$
\end_inset

 is also 
\begin_inset Formula $n$
\end_inset

-random.
\end_layout

\begin_layout Proof
Given a 
\begin_inset Formula $0^{(n-1)}$
\end_inset

-computable ML test 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

,
 we can define a 
\begin_inset Formula $0^{(n-1)}$
\end_inset

-computable test 
\begin_inset Formula $\{U_{n}^{\symmetricdifference A}\}_{n\in\N}$
\end_inset

 that consists of the same sets with the bits of 
\begin_inset Formula $A$
\end_inset

 flipped.
 Clearly,
 
\begin_inset Formula $Z$
\end_inset

 passes the former test iff 
\begin_inset Formula $Z\symmetricdifference A$
\end_inset

 passes the latter.
 This is enough to prove the desired result.
\end_layout

\begin_layout Proof
In hindsight this is just the relativization of the same result for 
\begin_inset Formula $n=1$
\end_inset

.
 Oops.
\end_layout

\begin_layout Proposition
For 
\begin_inset Formula $n\geq2$
\end_inset

 there is a weakly 
\begin_inset Formula $n$
\end_inset

-random set 
\begin_inset Formula $R$
\end_inset

 of 
\begin_inset Formula $0^{(n-2)}$
\end_inset

-hyperimmune degree such that no set of the same Turing degree is 
\begin_inset Formula $n$
\end_inset

-random.
\end_layout

\begin_layout Proof
This is just the relativization of the result for 
\begin_inset Formula $n=2$
\end_inset

,
 which maybe is why Nies only states it as such.
\end_layout

\begin_layout Proof
\begin_inset Note Note
status open

\begin_layout Plain Layout
wait,
 I actually have no idea how to do this...
 check solutions or ask Denis.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Demuth Randomness
\end_layout

\begin_layout Definition
An 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

set/function is a limit-computable set/function for which there is a computable bound on the number of times that the computable approximation changes for each given 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
A 
\emph on
Demuth test
\emph default
 is a 
\begin_inset Formula $\omega$
\end_inset

-uniform sequence of uniform opens 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 that satisfies 
\begin_inset Formula $\mu(U_{n})\leq2^{-n}$
\end_inset

.
 By 
\begin_inset Formula $\omega$
\end_inset

-uniform we mean:
 There is an 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

function 
\begin_inset Formula $f\colon\N\to\N$
\end_inset

 such that 
\begin_inset Formula $U_{n}$
\end_inset

 is the 
\begin_inset Formula $f(n)$
\end_inset

-th open.
\end_layout

\begin_layout Definition
A set 
\begin_inset Formula $Z$
\end_inset

 
\emph on
passes
\emph default
 a Demuth test 
\begin_inset Formula $\{U_{n}\}_{n\in\N}$
\end_inset

 if it is in only finitely many of the 
\begin_inset Formula $U_{n}$
\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Note Note
status open

\begin_layout Plain Layout
So many parameters to tinker with here!
 Why 
\begin_inset Formula $\omega$
\end_inset

-uniform and not 
\begin_inset Formula $n$
\end_inset

-uniform?
 Why is the pass condition Solovay-like and not ML-like?
 Also,
 I get that the point is partially to eliminate 
\begin_inset Formula $\omega$
\end_inset

-c.e.
 sets like left-c.e.
 sets,
 but then we could consider replacing 
\begin_inset Formula $\omega$
\end_inset

-c.e.
 by 
\begin_inset Formula $g(n)=2^{n}$
\end_inset

-c.e.
 to exclude specifically the lce sets,
 why not do that?
 I guess that being 
\begin_inset Formula $2^{n}$
\end_inset

-c.e.
 isn't closed under subsequences,
 so van Lambalgen would be shot.
\end_layout

\end_inset


\end_layout

\begin_layout Proposition
Every 2-random set is Demuth random,
 because every Demuth test can be turned into a 
\begin_inset Formula $0'$
\end_inset

-computable ML test or Solovay test.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
Every Demuth random set is ML random,
 because any ML test is also a Demuth test,
 and the passing condition for Demuth tests is stronger than that for ML tests.
\end_layout

\begin_layout Remark
Nies claims (but I believe does not prove
\begin_inset Note Note
status open

\begin_layout Plain Layout
denissss
\end_layout

\end_inset

) that there is no universal Demuth test.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proposition
An 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

set 
\begin_inset Formula $Z$
\end_inset

 is not Demuth random.
 In particular,
 any l.c.e.
\begin_inset space \space{}
\end_inset

real,
 including 
\begin_inset Formula $\Omega$
\end_inset

,
 is not Demuth random.
\end_layout

\begin_layout Proof
For the first part of the proposition,
 simply make a Demuth test 
\begin_inset Formula $U_{n}=\downcl{Z\upto n}$
\end_inset

.
 For the second part,
 note that an l.c.e.
 set is 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

because the 
\begin_inset Formula $n$
\end_inset

-th bit changes at most 
\begin_inset Formula $2^{n}$
\end_inset

 times.
\end_layout

\begin_layout Lemma
There is a 
\begin_inset Formula $0'$
\end_inset

-computable function 
\begin_inset Formula $q(e,n)$
\end_inset

 that enumerates all 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

functions,
 in the sense that for any 
\begin_inset Formula $\omega$
\end_inset

-c.e.
\begin_inset space \space{}
\end_inset

function 
\begin_inset Formula $g$
\end_inset

 there is an index 
\begin_inset Formula $e$
\end_inset

 such that 
\begin_inset Formula $g=q_{e}$
\end_inset

.
\end_layout

\begin_layout Proof
Given input 
\begin_inset Formula $e,n$
\end_inset

,
 write 
\begin_inset Formula $e=\braket{i,j}$
\end_inset

.
 In this case,
 
\begin_inset Formula $i$
\end_inset

 is meant to represent the computable guesses,
 and 
\begin_inset Formula $j$
\end_inset

 is meant to represent the bound on number of changes.
 Then,
 check if 
\begin_inset Formula $\varphi_{j}(n)$
\end_inset

 halts using 
\begin_inset Formula $0'$
\end_inset

.
 If it doesn't,
 output whatever.
 If it does halt,
 say with value 
\begin_inset Formula $k$
\end_inset

,
 see what 
\begin_inset Formula $\varphi_{i}$
\end_inset

 has to say about the value on 
\begin_inset Formula $n$
\end_inset

.
 Using 
\begin_inset Formula $0'$
\end_inset

,
 check if it changes its mind 
\begin_inset Formula $k$
\end_inset

 or more times;
 if so,
 run it until it changes its mind for the 
\begin_inset Formula $k$
\end_inset

-th time,
 and output that.
 If it changes its mind less than 
\begin_inset Formula $k$
\end_inset

 times,
 run it until it isn't going to change its mind anymore and output that.
 There are some issues to deal with if it's nontotal but they're not too difficult to think around.
\end_layout

\begin_layout Proposition
There is a 
\begin_inset Formula $0'$
\end_inset

-computable Demuth random set.
\end_layout

\begin_layout Proof
First,
 we show that 
\begin_inset Formula $0'$
\end_inset

 computes all Demuth tests,
 with some false positives,
 in a specific way.
 Nies calls this a 
\emph on
special test
\emph default
.
\end_layout

\begin_layout Proof
First,
 define the open sets 
\begin_inset Formula $U_{\braket{e,n}}$
\end_inset

by:
 Enumerate an open according to 
\begin_inset Formula $q(e,n)$
\end_inset

,
 but if its measure is about to exceed 
\begin_inset Formula $2^{-n}$
\end_inset

,
 stop.
 Note that all Demuth tests are of the form 
\begin_inset Formula $\{U_{\braket{e,n}}\}_{n\in\N}$
\end_inset

for some 
\begin_inset Formula $e$
\end_inset

,
 though there may be values of 
\begin_inset Formula $e$
\end_inset

 that don't correspond to a Demuth test.
 (I suspect that if you build 
\begin_inset Formula $q$
\end_inset

 appropriately this will not happen,
 but this isn't relevant.) Now,
 define 
\begin_inset Formula $V_{n}=\cup_{e}U_{\braket{e,n+e}}$
\end_inset

.
 This is a 
\begin_inset Formula $0'$
\end_inset

-uniform sequence of 
\begin_inset Formula $0'$
\end_inset

-effective opens with measure 
\begin_inset Formula $\mu(V_{n})\leq2\cdot2^{-n}$
\end_inset

.
 ???
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
nyeh
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "bibliography"
options "plain"
encoding "default"

\end_inset


\end_layout

\end_body
\end_document
