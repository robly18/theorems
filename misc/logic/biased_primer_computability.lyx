#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass presentation_notes
\begin_preamble

\usepackage{listings}
\lstset{
basicstyle=\ttfamily\footnotesize,
keepspaces=true,
tabsize=4,
breaklines=true,
columns=fullflexible,
mathescape=true
}
\usepackage{fullpage}
\usepackage{tikz}
\usepackage{braket}
\end_preamble
\use_default_options true
\begin_modules
duarte_theorems
enumitem
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
A Biased Primer on Modern Computability Theory
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Date
January 29,
 2025
\end_layout

\begin_layout Section
Basics
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "C:/Users/gaming/Desktop/theorems/misc/lyx/macros_logic.lyx"
literal "false"

\end_inset


\end_layout

\begin_layout Point
Turing Machine and other methods of computation:
 Lambda Calculus,
 
\begin_inset Formula $\Sigma_{1}$
\end_inset

 formulas,
 Minecraft Redstone,
 Your Favorite Programming Language,
 Conway's Game of Life
\end_layout

\begin_layout Point
Halting Problem,
 Arithmetical Hierarchy,
 the Zoo of Degrees
\end_layout

\begin_layout Point
Method of Computation with Oracle.
 Notation:
 
\begin_inset Formula $\varphi_{e}^{X}$
\end_inset

,
 
\begin_inset Formula $\{e\}^{X}$
\end_inset

.
\end_layout

\begin_layout Point
Example Proof:
 There exist two sets 
\begin_inset Formula $A$
\end_inset

,
 
\begin_inset Formula $B$
\end_inset

 such that neither computes the other.
\end_layout

\begin_layout point
Build them using Finite Extension Method.
 Requirement:
 Ensure that 
\begin_inset Formula $A$
\end_inset

 is not 
\begin_inset Formula $\{e\}^{B}$
\end_inset

.
 Question:
 Based on what we have of 
\begin_inset Formula $B$
\end_inset

,
 is it possible that 
\begin_inset Formula $\{e\}^{B}(n)$
\end_inset

,
 where 
\begin_inset Formula $n$
\end_inset

 is the next index of 
\begin_inset Formula $A$
\end_inset

,
 will ever terminate?
 If not,
 there's nothing to do.
 If it is,
 we extend 
\begin_inset Formula $B_{\text{current}}$
\end_inset

 to make 
\begin_inset Formula $\{e\}^{B}(n)\iswd$
\end_inset

,
 and set 
\begin_inset Formula $A(n)$
\end_inset

 to be whatever value that is not.
\end_layout

\begin_layout Point
Corollary:
 There exist two sets 
\begin_inset Formula $A,B$
\end_inset

 below 
\begin_inset Formula $0'$
\end_inset

 such that neither computes the other.
\end_layout

\begin_layout Point
Remark:
 This method can be adapted to show that there are many incomparable degrees.
\end_layout

\begin_layout Section
Classes Of Degrees
\end_layout

\begin_layout Point
Introduce Low,
 High
\end_layout

\begin_layout Point
Prop:
 There exists a partial computable function that cannot be computably made total.
\end_layout

\begin_layout point
Example:
 Let 
\begin_inset Formula $f(e)$
\end_inset

 be the time that the 
\begin_inset Formula $e$
\end_inset

-th program takes to halt if it does.
 Any completion of 
\begin_inset Formula $f$
\end_inset

 can compute 
\begin_inset Formula $0'$
\end_inset

.
\end_layout

\begin_layout Point
Less obvious:
 There exists a PC 01-valued function that cannot be computably made total.
\end_layout

\begin_layout point
Example:
 Let 
\begin_inset Formula $\varphi_{e}(x)$
\end_inset

 be a universal 01-valued function,
 seen as 
\begin_inset Formula $\varphi\braket{e,x}$
\end_inset

.
 Then,
 if 
\begin_inset Formula $f$
\end_inset

 is a computable completion,
 we could computably define 
\begin_inset Formula $g(x)=1-f\braket{x,x}$
\end_inset

.
 If this is defined by the 
\begin_inset Formula $e$
\end_inset

-th program,
 we then have
\begin_inset Formula 
\[
g(e)=1-f\braket{e,e}=1-\varphi_{e}(e)=1-g(e),
\]

\end_inset

a contradiction.
 Thus,
 
\begin_inset Formula $f$
\end_inset

 cannot exist.
\end_layout

\begin_layout Point
Remark:
 In the first case we showed that computable 
\begin_inset Formula $f$
\end_inset

 did not exist because any such 
\begin_inset Formula $f$
\end_inset

 computes 
\begin_inset Formula $0'$
\end_inset

.
 In the second case,
 our argument is much weaker.
 This is of necessity:
\end_layout

\begin_layout Point
Theorem:
 There is a completion of 
\begin_inset Formula $\varphi$
\end_inset

 that is low,
 and therefore strictly below 
\begin_inset Formula $0'$
\end_inset

.
\end_layout

\begin_layout point
Remark:
 There is also a completion of 
\begin_inset Formula $\varphi$
\end_inset

 that is at the same level as 
\begin_inset Formula $0'$
\end_inset

.
\end_layout

\begin_layout Point
Will get into more details of how you do this later,
 but for now,
 one might wonder:
 What are the degrees that perform this task?
 This kind of phenomenon is common,
 and usually leads to either name a new class of degrees or rediscover an old one.
 Historically,
 this was the second case:
\end_layout

\begin_layout Point
Theorem:
 The degrees that compute a completion of 
\begin_inset Formula $\varphi$
\end_inset

 are precisely the degrees that compute a model of PA.
 (Many asterisks for discussion here!
 e.g.
\begin_inset space \space{}
\end_inset

the natural numbers!)
\end_layout

\begin_layout Point
For our purposes,
 define a PA degree as one that computes a completion of 
\begin_inset Formula $\varphi$
\end_inset

.
\end_layout

\begin_layout Point
Let's forget momentarily that we know that there is no computable PA degree,
 and let's imagine how we could try to find one.
\end_layout

\begin_layout Point
Draw a binary tree representing extensions of 
\begin_inset Formula $\varphi$
\end_inset

.
 Use runtime trick to make it computable.
 Now you have a computable binary tree and want to find a path through it.
\end_layout

\begin_layout point
Technical details:
 A computable binary tree 
\begin_inset Formula $T$
\end_inset

 is a computable set of binary strings that is closed under prefixes.
 A path in 
\begin_inset Formula $T$
\end_inset

 is an infinite binary sequence,
 such that every prefix is in 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_layout Point
Theorem:
 (Low Basis) If 
\begin_inset Formula $T$
\end_inset

 is a computable binary tree with infinitely many nodes,
 it admits a path of low degree.
\end_layout

\begin_layout point
The proof is too elaborate to get into here,
 but I'll do an example of how one can build low degrees in a moment.
\end_layout

\begin_layout Point
Corollary:
 There is a low PA degree.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Point
Theorem:
 There is a noncomputable low set 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout point
Proof:
 Build 
\begin_inset Formula $A$
\end_inset

 via the finite extension method.
 At the 
\begin_inset Formula $n$
\end_inset

-th step,
 suppose you've already built some prefix 
\begin_inset Formula $\sigma$
\end_inset

 of what will eventually be 
\begin_inset Formula $A$
\end_inset

.
 To continue,
 you ask:
 Is there an extension of 
\begin_inset Formula $\sigma$
\end_inset

 that makes the 
\begin_inset Formula $n$
\end_inset

-th oracle program halt when fed 
\begin_inset Formula $A$
\end_inset

 as an oracle?
 If there is,
 you extend 
\begin_inset Formula $\sigma$
\end_inset

 in that manner and proceed to step 
\begin_inset Formula $n+1$
\end_inset

.
 Otherwise,
 you add nothing and proceed to step 
\begin_inset Formula $n+1$
\end_inset

.
\end_layout

\begin_layout point
The reason this works is that 
\begin_inset Formula $0'$
\end_inset

 can determine,
 by computable brute-forcing,
 which of the two steps of the construction you took.
 But furthermore,
 this doesn't just tell you that 
\begin_inset Formula $0'$
\end_inset

 can compute 
\begin_inset Formula $A$
\end_inset

:
 It also tells you whether the 
\begin_inset Formula $n$
\end_inset

-th oracle program will halt when fed 
\begin_inset Formula $A$
\end_inset

 as an oracle.
\end_layout

\begin_layout point
This method is called 
\emph on
forcing the jump
\emph default
,
 and is very useful for constructing low sets.
\end_layout

\begin_layout Section
Computable Structure Theory
\end_layout

\begin_layout Point
Outline distinction between computable model vs.
 computable structure.
\end_layout

\begin_layout Point
Example:
 
\begin_inset Formula $(\N,0,1,+,\times,<)$
\end_inset

 as a structure is very simple,
 but as a model is very complicated.
\end_layout

\begin_layout Point
On the other hand,
 a theorem by Tennenbaum states that any nonstandard structure of PA is noncomputable,
 i.e.
\begin_inset space \space{}
\end_inset

harder than 
\begin_inset Formula $\N$
\end_inset

,
 while as models 
\begin_inset Formula $\N$
\end_inset

 is very complicated and there are a lot of models of PA easier than it.
\end_layout

\begin_layout Point
Make a point about how the same structure can have copies that are easier and harder to compute.
\end_layout

\begin_layout Point
Important type of structures:
 Linear order 
\begin_inset Formula $(L,<)$
\end_inset

,
 Linear order w/ successor relation 
\begin_inset Formula $(L,<,S)$
\end_inset

.
\end_layout

\begin_layout Point
Prop:
 If 
\begin_inset Formula $(L,<)$
\end_inset

 is computable by 
\begin_inset Formula $d$
\end_inset

,
 then 
\begin_inset Formula $(L,<,S)$
\end_inset

 is computable by 
\begin_inset Formula $d'$
\end_inset

.
\end_layout

\begin_layout Point
Corollary:
 If 
\begin_inset Formula $(L,<)$
\end_inset

 is low,
 then 
\begin_inset Formula $(L,<,S)$
\end_inset

 is computable by 
\begin_inset Formula $0'$
\end_inset

.
\end_layout

\begin_layout Point
Interesting Result:
 (Frolov-Montalbán) If 
\begin_inset Formula $(L,<,S)$
\end_inset

 is computable by 
\begin_inset Formula $0'$
\end_inset

,
 then 
\begin_inset Formula $(L,<)$
\end_inset

 is low.
\end_layout

\begin_layout point
Proof Sketch:
 Force the jump.
 In other words,
 
\begin_inset Formula $0'$
\end_inset

 will be building 
\begin_inset Formula $(L,<)$
\end_inset

,
 but will stop to ask 
\begin_inset Quotes eld
\end_inset

can I make the 
\begin_inset Formula $n$
\end_inset

-th program halt with this as an oracle?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout point
The proof has a bit of an added element:
 To force the jump,
 you need to look for a linear order extending current one that makes the program halt,
 but then you need to make sure that this order 
\begin_inset Quotes eld
\end_inset

fits inside 
\begin_inset Formula $L$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 If it does,
 you're good.
 Otherwise,
 it must be because of a connecting chain,
 which you will first add and then try again for the same program.
 This works after a finite number of steps because the number of connected components at play is decreasing.
\end_layout

\end_body
\end_document
