#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass presentation_notes
\begin_preamble

\usepackage{listings}
\lstset{
basicstyle=\ttfamily\footnotesize,
keepspaces=true,
tabsize=4,
breaklines=true,
columns=fullflexible,
mathescape=true
}
\usepackage{fullpage}
\usepackage{tikz}
\usepackage{braket}

\renewcommand\Point[1]{\noindent \hspace{0.5em plus 0em} \large $\bullet$ #1 \par \smallskip}
\end_preamble
\use_default_options true
\begin_modules
InStar
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\listings_params "basicstyle={\ttfamily},keepspaces=true,tabsize=4,breaklines=true,columns=fullflexible,mathescape=true"
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Pizza Seminar Talk
\begin_inset Newline newline
\end_inset


\begin_inset Quotes eld
\end_inset

in quotes followed by itself
\begin_inset Quotes erd
\end_inset

 in quotes followed by itself
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Date
February 5,
 2025
\end_layout

\begin_layout In Preamble
\begin_inset CommandInset include
LatexCommand input
filename "C:/Users/gaming/Desktop/theorems/misc/lyx/macros_logic.lyx"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
A Quine is a computer program which,
 when compiled and executed,
 produces a copy of its own source code as output.
 To build one is a cool exercise to give to a first year CS undergraduate,
 but cooler yet is the fact that Stephen Kleene came up with a Quine (1938) before the first computer even existed (1941).
\end_layout

\begin_layout Standard
What Kleene was doing was proving what is nowadays called "Kleene's fixed point theorem",
 and when I first saw it I thought it was a novelty,
 but it didn't really seem useful for anything.
 Now I realize how wrong I was.
\end_layout

\begin_layout Standard
In this talk,
 I will present and prove Kleene's fixed point theorem,
 and provide applications to:
 Computer Security,
 Biology,
 Mars Expeditions,
 Philosophy,
 Applied Combinatorics,
 and my research.
\end_layout

\begin_layout Section
Quines
\end_layout

\begin_layout Point
Describe idea of a Quine.
 Build one with the audience.
\end_layout

\begin_layout Point
Some ways to cheat:
\end_layout

\begin_layout Itemize
An empty file
\end_layout

\begin_deeper
\begin_layout Itemize
Won 
\begin_inset Quotes eld
\end_inset

worst abuse of the rules
\begin_inset Quotes erd
\end_inset

 in a 1995 competition
\end_layout

\end_deeper
\begin_layout Itemize
A file that reads itself
\end_layout

\begin_layout Point
Introduce the idea that (non-cheating) Quines are much more powerful than they appear.
 Adapt idea to build an ouroboros Quine in two different languages.
\end_layout

\begin_layout Point
Introduce idea that Quines allow you to make code that reasons about itself.
 Prove insolvability of Halting Problem.
\end_layout

\begin_layout Section
Recursion Theorem
\end_layout

\begin_layout Point
Kleene Recursion Theorem:
 Let 
\begin_inset Formula $\varphi_{e}(x)$
\end_inset

 be a universal computable function,
 and let 
\begin_inset Formula $f(x)$
\end_inset

 be a computable total function.
 Then,
 there is 
\begin_inset Formula $e$
\end_inset

 such that 
\begin_inset Formula $\varphi_{e}=\varphi_{f(e)}$
\end_inset

.
\end_layout

\begin_layout point
Book Proof:
 Consider a program that calculates 
\begin_inset Formula $F(u,z)=\varphi_{\varphi_{u}(u)}(z)$
\end_inset

.
 Let 
\begin_inset Formula $d(u)$
\end_inset

 be a program that calculates 
\begin_inset Formula $z\mapsto F(u,z)$
\end_inset

.
 Then,
 let 
\begin_inset Formula $v$
\end_inset

 be a program that calculates the composite function 
\begin_inset Formula $f\circ d$
\end_inset

,
 and finally set 
\begin_inset Formula $e=d(v)$
\end_inset

.
\end_layout

\begin_layout point
Proof that this works:
 
\begin_inset Formula $\varphi_{e}(x)=\varphi_{d(v)}(x)=F(v,x)=\varphi_{\varphi_{v}(v)}(x)=\varphi_{f(d(v))}(x)=\varphi_{f(e)}(x)$
\end_inset

.
\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $\blacksquare$
\end_inset


\end_layout

\begin_layout point
Tell anecdote about how someone once asked Kleene what was going on here.
\end_layout

\begin_layout point
Understandable proof:
 Let 
\begin_inset Formula $e$
\end_inset

 be a program that,
 on input 
\begin_inset Formula $x$
\end_inset

,
 does the following:
 (1) Get its own code,
 (2) Apply 
\begin_inset Formula $f$
\end_inset

 to it,
 (3) Execute the resulting code on input 
\begin_inset Formula $x$
\end_inset

.
 This obviously does the right thing.
\end_layout

\begin_layout Point
Remark:
 The program 
\begin_inset Formula $e$
\end_inset

 is not necessarily a fixed point in the usual sense of the word!
 It may be the case that 
\begin_inset Formula $\varphi_{e}=\varphi_{f(e)}\neq\varphi_{f(f(e))}$
\end_inset

.
 For example,
 let 
\begin_inset Formula $f(x)$
\end_inset

 be the function:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

If $x$ is not 
\begin_inset Quotes eld
\end_inset

print('hello world')
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

  output 
\begin_inset Quotes eld
\end_inset

print('hello world')
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

  output 
\begin_inset Quotes eld
\end_inset

print('haha gotcha')
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Applications
\end_layout

\begin_layout Subsection
Computer Security 1
\end_layout

\begin_layout Point
Let's say you want to write a computer virus.
 In other words,
 a program that,
 when executed,
 will execute some code and then propagate itself to other computers.
\end_layout

\begin_layout Point
Apply recursion theorem to 
\begin_inset Formula $f(e)$
\end_inset

:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Quotes eld
\end_inset

StealCreditCards()
\end_layout

\begin_layout Plain Layout

StealPasswords()
\end_layout

\begin_layout Plain Layout

EmailToEveryone('hey wanna see my nudes?
 then run this program :)',
 $e$)
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Point
The resulting program 
\begin_inset Formula $e$
\end_inset

 obtained from the Recursion theorem will,
 when executed,
 do the same as the program 
\begin_inset Formula $f(e)$
\end_inset

,
 that is:
 steal credit cards,
 steal passwords,
 and e-mail program 
\begin_inset Formula $e$
\end_inset

 to everyone.
\end_layout

\begin_layout Point
You can also use this to write an anti-virus.
 Let's say that you want your program to look through all the programs that are running on the computer,
 and there's some suspicious things you're looking for.
 For example,
 you want to be wary of programs that have code which looks at user input (could be spyware),
 that deletes files on disk,
 or that looks too hard at what's on computer memory.
 Of course,
 there are programs that do this for legitimate reasons â€“ for example,
 the part of the operating system that deals with handling user input.
 Or,
 well,
 an anti-virus such as yourself...
 So how do you avoid flagging yourself as a virus?
\end_layout

\begin_layout Point
The solution:
 Recursion Theorem!
 Let 
\begin_inset Formula $f(e)$
\end_inset

:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Quotes eld
\end_inset

For p in SuspiciousActivityPrograms do:
\end_layout

\begin_layout Plain Layout

    If p is not Windows.exe,
 Internet Explorer.exe,
 or $e$ then halt(p)
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Point
If you apply the RT to this 
\begin_inset Formula $f$
\end_inset

,
 you get a program 
\begin_inset Formula $e$
\end_inset

 that,
 when executed,
 does the same as 
\begin_inset Formula $f(e)$
\end_inset

,
 that is:
 Look through the programs that are doing suspicious activity,
 and if they're not Windows or IE or 
\begin_inset Formula $e$
\end_inset

,
 halt them.
 Since our antivirus is 
\begin_inset Formula $e$
\end_inset

 in this case,
 it will not halt itself.
\end_layout

\begin_layout Point
Remark:
 Interestingly,
 in this case 
\begin_inset Formula $f(e)$
\end_inset

 is 
\emph on
not 
\emph default
an effective antivirus,
 because it will halt itself!
\end_layout

\begin_layout Subsection
Computer Security II
\end_layout

\begin_layout Point
There is an interesting essay called 
\begin_inset Quotes eld
\end_inset

Reflections on Trusting Trust
\begin_inset Quotes erd
\end_inset

 by Ken Thompson,
 from 1984.
 In it,
 he describes a possible form of insidious malware that would be virtually undetectable.
 In the intervening 40 years,
 I believe there have been found instances of it occurring in the wild,
 so this is really a practical concern!
\end_layout

\begin_layout Point
Here's the idea:
 So,
 this is one of the two guys who created C,
 including writing the first compiler for it.
 He also programmed a very widespread operating system,
 UNIX.
 In this essay,
 he (hypothetically) admits to having programmed a virus into it,
 one that is very hard to get rid of.
\end_layout

\begin_layout Point
So,
 let's say that when he wrote the operating system he introduced a backdoor,
 allowing anyone who knows a certain (fixed) password to log into any account of anyone using that operating system.
\end_layout

\begin_layout Point
Back in the day,
 a lot of programs were shared by sharing the source code and compiling it in their own computer.
 This implies that people could 
\emph on
see
\emph default
 the source code.
 Thus,
 such a blatant backdoor would not go unnoticed for long,
 and cautious users would simply make a version without the backdoor and compile the clean version by themselves,
 to obtain a clean operating system.
\end_layout

\begin_layout Point
However,
 this guy also wrote the C compiler they used.
 So,
 we can imagine that he took it one level up,
 and actually backdoor'd the compiler itself.
 In other words,
 we can imagine that he set up the compiler to detect if it is compiling this operating system,
 and if it is,
 to add a backdoor to the compiled version.
\end_layout

\begin_layout Point
Again,
 we can imagine that a cautious user would investigate the source code for the compiler itself,
 and if something was off,
 create their own clean version and recompile it,
 to create a clean compiler and with it make a clean operating system.
\end_layout

\begin_layout Point
To combat this,
 we imagine adding a little more malicious code to the compiler.
 Imagine that,
 besides checking if the program is the UNIX system and adding a backdoor if so,
 this compiler also checks if it's compiling a C compiler,
 and replaces it by a copy of itself if so.
\end_layout

\begin_layout Point
This is the hypothetical scenario that Ken Thompson describes in his essay.
 It is a little complicated to implement,
 because this bugged C compiler has to contain a copy of its own source code to replace a 
\begin_inset Quotes eld
\end_inset

fixed source code
\begin_inset Quotes erd
\end_inset

 by itself,
 but we can see that the Recursion Theorem can be used to prove that it's possible.
\end_layout

\begin_layout Subsection
Biology
\end_layout

\begin_layout Point
If we think about it,
 all self-replicating life relies on the Recursion Theorem.
\end_layout

\begin_layout Point
Think about it:
 A cell is like a computer,
 and DNA/RNA is its code.
 There are videos you can see of proteins rolling through the DNA strands in order to 
\begin_inset Quotes eld
\end_inset

figure out
\begin_inset Quotes erd
\end_inset

 what it should be producing,
 which is a lot like a computer scanning lines of code.
 Now,
 let's think about what cell division is about in these terms.
 You have a machine,
 which executes some code,
 and part of this code consists of building a copy of the machine,
 including a copy of the code.
 At first this seems impossible,
 because it requires that the code contains a full description for itself.
 But the recursion theorem shows that it is possible!
\end_layout

\begin_layout Point
(I am being a little facetious here,
 because in this example you really can do a 
\begin_inset Quotes eld
\end_inset

file that reads itself
\begin_inset Quotes erd
\end_inset

 version of a Quine.)
\end_layout

\begin_layout Subsection
Mars Expeditions
\end_layout

\begin_layout Point
Surely you've heard of Conway's Game of Life.
 But have you heard of its origin story?
\end_layout

\begin_layout Point
Suppose for the time being that we want to send a probe to Mars to prepare it for human colonization.
 However,
 sending things to Mars is expensive,
 so we want to ensure that we send a pretty small probe,
 but we want to equip it for a big task.
\end_layout

\begin_layout Point
Fortunately for us,
 Mars has a lot of iron,
 and probably other resources that you need to make more probes.
 So the solution is obvious:
 Make a probe capable of self-replicating.
\end_layout

\begin_layout Point
Nowadays this is probably not so shocking,
 but in the 1940's the problem was interesting enough to garner the attention of von Neumann himself.
\end_layout

\begin_layout Point
After some work,
 von
\begin_inset space ~
\end_inset

Neumann created a game-of-life-like automata,
 with 29 states,
 and proved the existence of a 
\begin_inset Quotes eld
\end_inset

universal self-replicator
\begin_inset Quotes erd
\end_inset

.
 This was a very complicated machine which had the ability to make copies of itself.
 It was also versatile enough to,
 for example,
 make a copy that is more powerful than itself,
 and also capable of self-replicating.
\end_layout

\begin_layout Point
This automaton is quite complex,
 and does take a long time to self-replicate.
 In 1995,
 the first concrete realization of von
\begin_inset space ~
\end_inset

Neumann's automaton was published in the literature,
 but the authors had not had enough time to see it self-replicate.
 It takes 63 billion timesteps to do so.
 Nowadays it's doable in a few minutes,
 though it occupies a lot of memory.
\end_layout

\begin_layout Point
Anyway,
 Conway thought that von
\begin_inset space ~
\end_inset

Neumann's machine was overly complicated,
 and tried to find a ruleset that was as simple as possible while still bringing about interesting behavior.
\end_layout

\begin_layout Point
But the point of the story is von
\begin_inset space ~
\end_inset

Neumann's automaton,
 which is capable of self-replicating.
 It is capable of doing so because it contains,
 within itself,
 a description of itself,
 or rather,
 some information from which it is capable of decoding a description of itself.
 And this is really the same idea behind the Recursion Theorem.
\end_layout

\begin_layout Subsection
Philosophy
\end_layout

\begin_layout Point
You all know about the liar's paradox:
 
\begin_inset Quotes eld
\end_inset

This sentence is false
\begin_inset Quotes erd
\end_inset

.
 It is kind of troubling for some philosophers,
 because it casts doubt on the idea that a sentence has an objective truth value,
 and that any well-formed sentence will necessarily be true or false.
\end_layout

\begin_layout Point
Some people try to get around this by disallowing the use of self-reference.
 In other words,
 we never allow a sentence to refer to itself.
 We also disallow vicious cycles,
 such as 
\begin_inset Quotes eld
\end_inset

the next sentence is false
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

the previous sentence is true
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Point
Willard Quine,
 after whom the notion of Quine was named,
 showed that this is an insufficient solution,
 by creating what is today known as Quine's paradox:
\end_layout

\begin_layout Point
\begin_inset Quotes eld
\end_inset

yields falsehood when preceded by its quotation
\begin_inset Quotes erd
\end_inset

 yields falsehood when preceded by its quotation
\end_layout

\begin_layout Point
This sentence manages to never refer to itself abstractly.
 It only refers to the string 
\begin_inset Quotes eld
\end_inset

yields falsehood when preceded by its quotation
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Point
If you think about it,
 this is also a manifestation of what's going on in Kleene's recursion theorem.
 This string is a small piece of information,
 which the sentence uses to construct a copy of itself,
 in order to discuss it.
\end_layout

\begin_layout Subsection
Applied Combinatorics
\end_layout

\begin_layout Point
The Recursion Theorem can be used to produce a dubiously efficient implementation of the factorial function!
\end_layout

\begin_layout Point
Let 
\begin_inset Formula $f(e)$
\end_inset

 be the code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

On input $x$,
\end_layout

\begin_layout Plain Layout

If $x = 0$,
 output 1
\end_layout

\begin_layout Plain Layout

Else,
 output $x 
\backslash
times 
\backslash
varphi_e(x-1)$.
\end_layout

\end_inset


\end_layout

\begin_layout Point
A fixed point 
\begin_inset Formula $e$
\end_inset

 of this function will implement factorial:
\end_layout

\begin_layout point
\begin_inset Formula $\varphi_{e}(x)=\varphi_{f(e)}(x)$
\end_inset

,
 which if 
\begin_inset Formula $x=0$
\end_inset

 outputs 
\begin_inset Formula $1$
\end_inset

,
 otherwise outputs 
\begin_inset Formula $x\times\varphi_{e}(x-1)$
\end_inset

.
 By induction on 
\begin_inset Formula $x$
\end_inset

,
 this obviously outputs 
\begin_inset Formula $x!$
\end_inset

.
\end_layout

\begin_layout Point
Show on computer.
\end_layout

\begin_layout Subsection
Computability Theory
\end_layout

\begin_layout Point
Consider the following game.
 I (Player 1) will write a computer program that will print out a set of natural numbers.
 Your goal (Player 2) is to write a computer program that also prints out a set of natural numbers.
\end_layout

\begin_layout point
(You should spend some time clarifying the rules here.)
\end_layout

\begin_layout Point
Obviously,
 Player 2 always gets the chance to win.
 However,
 this does not mean that P2 has a winning strategy!
\end_layout

\begin_layout Point
Definition:
 A (computable) winning strategy is a computable function 
\begin_inset Formula $w(e)$
\end_inset

 that takes as input my (P1) program,
 and outputs another.
\end_layout

\begin_layout Point
Prop:
 Player 2 has no computable winning strategy.
\end_layout

\begin_layout point
Proof:
 Suppose that they do,
 say 
\begin_inset Formula $w$
\end_inset

.
 Let's say that I apply the Recursion Theorem to 
\begin_inset Formula $w$
\end_inset

,
 obtaining a program 
\begin_inset Formula $e$
\end_inset

 that does the same as 
\begin_inset Formula $w(e)$
\end_inset

.
 Then,
 my program will simply copy the set that ought to be winning against it...
 A contradiction!
\end_layout

\end_body
\end_document
