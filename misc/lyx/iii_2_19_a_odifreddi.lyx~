#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble

\usepackage{listings}
\lstset{
basicstyle=\ttfamily\footnotesize,
keepspaces=true,
tabsize=4,
breaklines=true,
columns=fullflexible,
mathescape=true
}
\usepackage{fullpage}
\end_preamble
\use_default_options true
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letter
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Solution to Exercise III.2.19 a) of Odifreddi
\end_layout

\begin_layout Author
Duarte Maia
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "macros_logic.lyx"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Standard
Construct directly an example of a set which is simple but not effectively simple.
\end_layout

\begin_layout Section
Solution
\end_layout

\begin_layout Standard
We perform a marker construction,
 in the following sense.
 We assume that countably many moving markers have been placed on the natural numbers,
 one for each number,
 and we will describe a simulation in which the markers are moved around.
 Once a natural number is left unmarked,
 it will never be marked again.
 This shall determine a c.e.
\begin_inset space ~
\end_inset

set,
 by enumerating the numbers which are left unmarked.
 We will ensure that the resulting set is coinfinite by ensuring that each marker can be moved finitely many times.
 This leaves us with two tasks to fulfil:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $P$
\end_inset

 Ensure that the resulting set is simple,
 by making sure that for every infinite c.e.
 set 
\begin_inset Formula $W_{e}$
\end_inset

 there is an element 
\begin_inset Formula $x\in W_{e}$
\end_inset

 which is left unmarked,
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $N$
\end_inset

 Ensure that the resulting set is not effectively simple,
 by making sure that for every 
\begin_inset Formula $\varphi_{e}$
\end_inset

 there is 
\begin_inset Formula $x$
\end_inset

 such that either 
\begin_inset Formula $\varphi_{e}(x)\uparrow$
\end_inset

 or,
 if 
\begin_inset Formula $\varphi_{e}(x)\downarrow$
\end_inset

,
 
\begin_inset Formula $W_{x}$
\end_inset

 is a finite set,
 all of whose elements are marked,
 but 
\begin_inset Formula $\card{W_{x}>\varphi_{e}(x)}$
\end_inset

.
\end_layout

\begin_layout Standard
To ensure that all tasks 
\begin_inset Formula $P_{e}$
\end_inset

 are fulfilled,
 we simply dovetail over the c.e.
\begin_inset space ~
\end_inset

sets 
\begin_inset Formula $W_{e}$
\end_inset

 and,
 upon finding large enough elements of 
\begin_inset Formula $W_{e}$
\end_inset

,
 we push any marker with label 
\begin_inset Formula $>e$
\end_inset

 that may be in their place.
 We do this only (at most) once for each 
\begin_inset Formula $W_{e}$
\end_inset

.
\end_layout

\begin_layout Standard
To ensure that 
\begin_inset Formula $N_{e}$
\end_inset

 is fulfilled is quite tricker,
 and the way I've found to do it requires some strong usage of the recursion theorem.
 First,
 let 
\begin_inset Formula $P$
\end_inset

 be the code for the simulation that we are programming right now.
 Moreover,
 define 
\begin_inset Formula $x(e)$
\end_inset

 as code for a program that does the following (this again requires usage of the recursion theorem):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Let $x$ be this program
\end_layout

\begin_layout Plain Layout

Let $
\backslash
nu$ be $
\backslash
varphi_e(x)$
\end_layout

\begin_layout Plain Layout

Let $P$ be the code for the simulation
\end_layout

\begin_layout Plain Layout

Run $P$ for as long as it takes for the simulation to compute $
\backslash
nu$
\end_layout

\begin_layout Plain Layout

List the position of the first $
\backslash
nu$ markers at this stage.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once this is defined,
 we set our simulation to dovetail processes which compute 
\begin_inset Formula $\nu=\varphi_{e}(x(e))$
\end_inset

 for every 
\begin_inset Formula $e\in\N$
\end_inset

;
 once such a computation is complete,
 we place a 
\begin_inset Quotes eld
\end_inset

lock
\begin_inset Quotes erd
\end_inset

 on the first 
\begin_inset Formula $\nu$
\end_inset

 markers so that they can't be moved again.
 This would fulfill 
\begin_inset Formula $N_{e}$
\end_inset

,
 with 
\begin_inset Formula $x=x(e)$
\end_inset

.
\end_layout

\begin_layout Standard
I don't think that this quite works,
 unfortunately,
 because it could be the case that the requirements 
\begin_inset Formula $N_{e}$
\end_inset

 create locks at an overwhelmingly fast rate,
 such that e.g.
 
\begin_inset Formula $P_{73}$
\end_inset

 is never fulfilled.
 (Also,
 it absolutely 
\emph on
couldn't
\emph default
 work;
 if it did,
 the union of all 
\begin_inset Formula $W_{x(e)}$
\end_inset

 would be an infinite c.e.
\begin_inset space ~
\end_inset

set contained in the complement of the final set...) To get around this,
 we allow 
\begin_inset Formula $P_{e}$
\end_inset

 to break through some locks,
 which will in turn mess up some of the 
\begin_inset Formula $N_{i}$
\end_inset

,
 but we ensure that 
\begin_inset Formula $P_{e}$
\end_inset

 only breaks locks created by large enough 
\begin_inset Formula $N_{i}$
\end_inset

,
 and when it does we will make a note to re-fulfill 
\begin_inset Formula $N_{i}$
\end_inset

.
 Thus,
 each 
\begin_inset Formula $N_{i}$
\end_inset

 will be broken a finite number of times (at most 
\begin_inset Formula $i$
\end_inset

),
 and after the last time it will be fulfilled forever.
\end_layout

\begin_layout Standard
We are now almost ready for the final construction.
 Define 
\begin_inset Formula $x(e,s)$
\end_inset

 as the following program:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Let $x$ be this program
\end_layout

\begin_layout Plain Layout

Let $
\backslash
nu$ be $
\backslash
varphi_e(x)$
\end_layout

\begin_layout Plain Layout

Let $P$ be the code for the simulation
\end_layout

\begin_layout Plain Layout

Run $P$ for $s$ steps,
 then continue running it until it is about to fulfill $N_e$
\end_layout

\begin_layout Plain Layout

List the position of the first $
\backslash
nu+1$ markers at this stage.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now,
 we define the simulation 
\begin_inset Formula $P$
\end_inset

 as follows.
 Dovetail processes 
\begin_inset Formula $P_{e}$
\end_inset

 and 
\begin_inset Formula $N_{e}$
\end_inset

,
 for 
\begin_inset Formula $e\in\N$
\end_inset

.
 Here is what these processes do:
\end_layout

\begin_layout Description
\begin_inset Formula $N_{e}$
\end_inset

 Compute 
\begin_inset Formula $\nu=\varphi_{e}(x,0)$
\end_inset

.
 Once this computation halts,
 immediately place 
\begin_inset Quotes eld
\end_inset

locks
\begin_inset Quotes erd
\end_inset

 labeled 
\begin_inset Formula $e$
\end_inset

 on the first 
\begin_inset Formula $\nu+1$
\end_inset

 markers and halt this process.
\end_layout

\begin_layout Description
\begin_inset Formula $P_{e}$
\end_inset

 Enumerate elements from 
\begin_inset Formula $W_{e}$
\end_inset

,
 stopping when you find some 
\begin_inset Formula $x\in W_{e}$
\end_inset

 in an unmarked position,
 or in a position with an unlocked marker,
 or in position with a marker all of whose locks have labels 
\begin_inset Formula $i>e$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\begin_inset Formula $x$
\end_inset

 is in an unmarked position,
 
\begin_inset Formula $P_{e}$
\end_inset

 has been fulfilled;
 halt this process.
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $x$
\end_inset

 is in a position with an unlocked marker 
\begin_inset Formula $i>e$
\end_inset

,
 
\begin_inset Quotes eld
\end_inset

kick
\begin_inset Quotes erd
\end_inset

 this marker forward (i.e.
\begin_inset space ~
\end_inset

push it to the position of the next marker,
 and kick that one and so forth).
 
\begin_inset Formula $P_{e}$
\end_inset

 has now been fulfilled;
 halt this process.
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $x$
\end_inset

 is in a position whose marker has some number of locks labeled 
\begin_inset Formula $i_{1},\dots,i_{n}>e$
\end_inset

,
 kick the marker forward and restart the processes 
\begin_inset Formula $N_{i_{1}},\dots,N_{i_{n}}$
\end_inset

,
 albeit with 
\begin_inset Formula $\nu$
\end_inset

 defined as 
\begin_inset Formula $\varphi_{e}(x,s)$
\end_inset

,
 with 
\begin_inset Formula $s$
\end_inset

 equal t the current time of execution.
 Finally,
 
\begin_inset Formula $P_{e}$
\end_inset

 has been fulfilled;
 halt this process.
\end_layout

\end_deeper
\begin_layout Standard
We claim that the set 
\begin_inset Formula $A$
\end_inset

 given by the numbers which are eventually unmarked is a simple,
 but not effectively simple,
 set.
 We now verify this.
\end_layout

\begin_layout Itemize
(c.e.) When a position is unmarked,
 it is never marked again.
 Moreover,
 the simulation of the markers is computable.
 Thus,
 we enumerate the set by running the simulation indefinitely and printing out every number which is unmarked.
\end_layout

\begin_layout Itemize
(coinfinite) It suffices to verify that every marker is kicked a finite number of times.
 This is the case because the 
\begin_inset Formula $i$
\end_inset

-th marker will only ever be kicked by the processes 
\begin_inset Formula $P_{0},\dots,P_{i-1}$
\end_inset

,
 and once by each at most.
\end_layout

\begin_layout Itemize
(simple) Let 
\begin_inset Formula $W_{e}$
\end_inset

 be an infinite c.e.
\begin_inset space ~
\end_inset

set.
 Suppose for the sake of contradiction that condition 
\begin_inset Formula $P_{e}$
\end_inset

 is never fulfilled,
 in which case the process 
\begin_inset Formula $P_{e}$
\end_inset

 will run indefinitely.
\end_layout

\begin_deeper
\begin_layout Standard
Let 
\begin_inset Formula $N$
\end_inset

 be a natural number larger than all the following:
\end_layout

\begin_layout Itemize
The final positions of the markers numbered 
\begin_inset Formula $0$
\end_inset

 to 
\begin_inset Formula $e$
\end_inset

,
\end_layout

\begin_layout Itemize
The locks that will ever have been placed by processes 
\begin_inset Formula $N_{0}$
\end_inset

 to 
\begin_inset Formula $N_{e}$
\end_inset

.
\end_layout

\begin_layout Standard
Such an 
\begin_inset Formula $N$
\end_inset

 exists because each marker has a finite final position,
 and each process 
\begin_inset Formula $N_{i}$
\end_inset

 places finitely many locks each time it runs,
 and runs at most 
\begin_inset Formula $i$
\end_inset

 times.
\end_layout

\begin_layout Standard
Now,
 eventually the process 
\begin_inset Formula $P_{e}$
\end_inset

 enumerates an element of 
\begin_inset Formula $W_{e}$
\end_inset

 which is larger than 
\begin_inset Formula $N$
\end_inset

,
 and by inspection of the simulation it is clear that at this stage 
\begin_inset Formula $P_{e}$
\end_inset

 will be fulfilled,
 a contradiction.
 Thus,
 
\begin_inset Formula $A$
\end_inset

 is simple.
\end_layout

\end_deeper
\begin_layout Itemize
(not effectively simple) Suppose that 
\begin_inset Formula $A$
\end_inset

 is effectively simple with function 
\begin_inset Formula $f=\varphi_{e}$
\end_inset

.
 We use the definition of 
\begin_inset Quotes eld
\end_inset

effectively simple
\begin_inset Quotes erd
\end_inset

 that presupposes that 
\begin_inset Formula $f$
\end_inset

 is a total function.
 Thus,
 whenever the process 
\begin_inset Formula $N_{e}$
\end_inset

 is made to run,
 it will finish executing in a finite amount of time.
 We also know that it is made to run a finite number of times,
 and that the last time that it is executed the locks that it places will never be removed,
 and the corresponding markers will stay in place forever.
 Thus,
 the corresponding set 
\begin_inset Formula $W_{x(e,s)}$
\end_inset

 shall be contained in 
\begin_inset Formula $A^{c}$
\end_inset

,
 
\end_layout

\end_body
\end_document
